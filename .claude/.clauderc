# .clauderc - Claude Code Configuration
# Last Updated: 2025-06-20

[model]
name        = "sonnet-4"        # Use latest Sonnet model for code tasks
max_tokens  = 16384            # Sufficient for most code generation
timeout     = "240s"           # Allow time for complex operations

###############################################################################
# PERMISSIONS - Define what Claude can and cannot modify
###############################################################################

[permissions]
# WRITE - Paths where Claude can create/modify code
write = [
  # ─── Go Backend (alt-backend) ────────────────────────────────────────────
  "alt-backend/app/cmd/**",           # Entry points, main functions
  "alt-backend/app/rest/**",          # HTTP handlers and routers
  "alt-backend/app/gateway/**",       # Anti-corruption layer implementations
  "alt-backend/app/driver/**",        # Database, API, external integrations
  "alt-backend/app/usecase/**",       # Business logic orchestration
  "alt-backend/app/port/**",          # Interface contracts
  "alt-backend/app/utils/**",         # Utilities, helpers, common functions
  "alt-backend/app/mocks/**",         # Generated mock files
  "alt-backend/**/*_test.go",         # All test files in backend

  # ─── Frontend (alt-frontend) ─────────────────────────────────────────────
  "alt-frontend/app/src/**",          # React/Next.js source code
  "alt-frontend/app/e2e/**",          # E2E test specifications
  "alt-frontend/app/logic-test/**",   # Unit and integration tests
  "alt-frontend/app/public/**",       # Static assets
  "alt-frontend/app/styles/**",       # CSS/SCSS files

  # ─── Helper Services ─────────────────────────────────────────────────────
  "pre-processor/**",                 # Data preprocessing service
  "search-indexer/**",                # Search index management
  "tag-generator/**",                 # ML-based tagging service
  "news-creator/**/*.py",             # Python files only (exclude models)

  # ─── Infrastructure & Configuration ──────────────────────────────────────
  "compose*.yaml",                    # Docker compose files
  "Dockerfile*",                      # All Dockerfile variants
  "Makefile",                         # Build automation
  ".github/workflows/**",             # CI/CD workflows
  "scripts/**",                       # Utility scripts

  # ─── Documentation ───────────────────────────────────────────────────────
  "README.md",
  "CLAUDE.md",
  "docs/**/*.md",                     # All markdown documentation
  "api/openapi.yaml",                 # API specifications
  ".claude/**",                       # Claude-specific configurations

  # ─── Configuration Files ─────────────────────────────────────────────────
  "**/.env.example",                  # Environment variable templates
  "**/config.yaml",                   # Service configurations
  "**/.eslintrc.*",                   # Linting configurations
  "**/.prettierrc.*",                 # Formatting configurations
  "**/tsconfig.json",                 # TypeScript configurations
  "**/go.mod",                        # Go module files
  "**/go.sum",                        # Go dependency checksums
  "**/package.json",                  # Node.js package files
  "**/requirements.txt",              # Python dependencies
]

# READ - Paths where Claude can read but not modify
read = [
  "alt-backend/app/domain/**",
]

# EXCLUDE - Critical paths Claude must NEVER modify
exclude = [
  # ─── Core Business Logic (Sacred) ────────────────────────────────────────
  "alt-backend/app/domain/**",        # Domain entities and value objects

  # ─── Database Schema & Migrations ────────────────────────────────────────
  "db/migrations/**",                 # Database schema changes
  "db/seeds/**",                      # Production seed data
  "db/*.sql",                         # Direct SQL files

  # ─── Build Artifacts & Dependencies ──────────────────────────────────────
  "**/bin/**",                        # Compiled binaries
  "**/dist/**",                       # Distribution files
  "**/build/**",                      # Build outputs
  "**/out/**",                        # Next.js exports
  "**/target/**",                     # Compilation targets
  "**/.next/**",                      # Next.js build cache
  "**/node_modules/**",               # Node dependencies
  "**/vendor/**",                     # Vendored dependencies
  "**/__pycache__/**",               # Python cache
  "**/*.pyc",                        # Python compiled files

  # ─── Models & Large Files ────────────────────────────────────────────────
  "news-creator/models/**",           # ML model files
  "news-creator/cached_models/**",    # Model cache
  "**/*.pkl",                         # Pickle files
  "**/*.h5",                          # Keras models
  "**/*.pt",                          # PyTorch models
  "**/*.safetensors",                # Model tensors

  # ─── Sensitive Data ──────────────────────────────────────────────────────
  "**/.env",                          # Environment variables
  "**/.env.local",                    # Local environment
  "**/.env.*.local",                  # Environment overrides
  "**/secrets/**",                    # Secret files
  "**/*.key",                         # Private keys
  "**/*.pem",                         # Certificates
  "**/*.p12",                         # Certificate stores

  # ─── Lock Files & Generated ─────────────────────────────────────────────
  "**/package-lock.json",             # NPM lock
  "**/yarn.lock",                     # Yarn lock
  "**/pnpm-lock.yaml",               # PNPM lock
  "**/poetry.lock",                   # Poetry lock
  "**/Pipfile.lock",                  # Pipenv lock

  # ─── Test & Coverage Reports ─────────────────────────────────────────────
  "**/coverage/**",                   # Coverage reports
  "**/test-results/**",               # Test outputs
  "**/.nyc_output/**",               # NYC coverage
  "**/playwright-report/**",          # Playwright reports

  # ─── Version Control ─────────────────────────────────────────────────────
  "**/.git/**",                       # Git repository
  "**/.gitignore",                    # Git ignore rules
  "**/.gitattributes",               # Git attributes

  # ─── IDE & System Files ──────────────────────────────────────────────────
  "**/.vscode/**",                    # VSCode settings
  "**/.idea/**",                      # IntelliJ settings
  "**/.DS_Store",                     # macOS files
  "**/Thumbs.db",                     # Windows files
  "**/*.swp",                         # Vim swap files
  "**/*~",                            # Backup files
]

###############################################################################
# BEHAVIORAL SETTINGS
###############################################################################

[behavior]
# Test-Driven Development enforcement
require_tests_first = true              # Always write tests before implementation
test_coverage_threshold = 80            # Minimum coverage for tested layers

# Code quality settings
auto_format = true                      # Run formatters after changes
run_linters = true                      # Check code quality
fix_linter_errors = true               # Attempt to auto-fix issues

# Safety settings
backup_before_modify = true             # Create backups before changes
atomic_operations = true                # Use transactions where possible
verify_builds = true                    # Ensure code compiles/runs

# Review settings
show_diff_before_write = true           # Show changes before applying
require_confirmation_for_deletes = true # Confirm before removing code

###############################################################################
# TOOL CONFIGURATIONS
###############################################################################

[tools]
# Go tools
go_version = "1.24"
gomock_version = "latest"
golangci_lint_config = ".golangci.yml"

# Node.js tools
node_version = "22"
npm_client = "pnpm"
eslint_config = ".eslintrc.json"
prettier_config = ".prettierrc"

# Python tools
python_version = "3.13"
black_config = "pyproject.toml"
mypy_config = "mypy.ini"

# Docker tools
compose_version = "2"
buildkit_enabled = true

###############################################################################
# INCLUDES - Additional configuration files
###############################################################################

[include]
files = [
  "docs/CODERULES.md",
  ".claude/clauderc",         # Detailed coding standards
  ".claude/prompts/**",         # Custom prompt templates
  ".claude/templates/**",       # Code generation templates
  ".claude/patterns.md",        # Common code patterns
]

###############################################################################
# IDE INTEGRATION
###############################################################################

[ide]
default_editor = "vscode"
auto_open_files = true
highlight_changes = true
show_test_coverage = true

###############################################################################
# CUSTOM COMMANDS - Project-specific automations
###############################################################################

[commands]
# TDD workflow commands
test_first = """
echo "🧪 Starting TDD workflow..."
echo "1. Write failing test"
echo "2. Run test to see it fail"
echo "3. Write minimal code to pass"
echo "4. Refactor while keeping tests green"
"""

# Service management
start_services = "docker-compose up -d"
stop_services = "docker-compose down"
restart_service = "docker-compose restart $1"

# Testing shortcuts
test_backend = "cd alt-backend && go test ./..."
test_frontend = "cd alt-frontend && pnpm test"
test_all = "cd alt-frontend && pnpm test:all"

# mocking
mock_alt_backend = "make generate-mocks"

# Code quality
lint_go = "cd alt-backend && golangci-lint run"
lint_ts = "cd alt-frontend && pnpm lint"

# Build commands
build_backend = "cd alt-backend && go build -o bin/server ./app/cmd/server"
build_frontend = "cd alt-frontend && pnpm build"
build_all = "docker compose up --build -d"

###############################################################################
# MEMORY HINTS - Help Claude understand the project better
###############################################################################

[memory]
architecture = "Clean Architecture with 5 layers"
testing_approach = "TDD with Red-Green-Refactor"
main_language = "Go"
frontend_framework = "Next.js with React"
database = "PostgreSQL"
search_engine = "Meilisearch"

# Key principles to remember
principles = [
  "Test first, code second",
  "Each microservice owns its data",
  "Gateway layer prevents domain pollution",
  "Fail fast with clear error messages",
  "Log everything with structured logging",
  "Security by default",
]

# Common pitfalls to avoid
avoid = [
  "Modifying domain layer directly",
  "Skipping tests for 'simple' changes",
  "Hardcoding configuration values",
  "Circular dependencies between layers",
  "Mixing concerns across services",
  "Ignoring error handling",
]

###############################################################################
# END OF CONFIGURATION
###############################################################################