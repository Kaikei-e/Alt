# Default values for common-secrets
# Centralized secret management

# Namespace configuration
namespace:
  create: false
  name: "default"

# Labels and annotations
commonLabels:
  app.kubernetes.io/component: secrets
  app.kubernetes.io/part-of: alt

commonAnnotations: {}

# Database credentials
database:
  postgres:
    enabled: true
    secretName: postgres-secrets
    # Base64 encoded values (set via values-<env>.yaml)
    password: ""
    appPassword: ""
    
  authPostgres:
    enabled: true
    secretName: auth-postgres-secrets
    password: ""
    
  kratosPostgres:
    enabled: true
    secretName: kratos-postgres-secrets
    password: ""
    
  clickhouse:
    enabled: true
    secretName: clickhouse-secrets
    password: ""
    appPassword: ""

# API Keys and tokens
apiKeys:
  huggingFace:
    enabled: true
    secretName: huggingface-secret
    token: ""
    additionalNamespaces:
      - "alt-auth"
    
  meilisearch:
    enabled: true
    secretName: meilisearch-secrets
    masterKey: ""
    apiKey: ""

# Service-specific secrets
services:
  backend:
    enabled: true
    secretName: backend-secrets
    secrets:
      DB_PASSWORD: ""
      POSTGRES_PASSWORD: ""
      DB_APP_PASSWORD: ""
      HF_TOKEN: ""
      MEILI_MASTER_KEY: ""
      MEILISEARCH_API_KEY: ""
      
  preProcessor:
    enabled: true
    secretName: pre-processor-secrets
    secrets:
      PRE_PROCESSOR_DB_PASSWORD: ""
      
  tagGenerator:
    enabled: true
    secretName: tag-generator-secrets
    secrets:
      DB_TAG_GENERATOR_PASSWORD: ""
      
  searchIndexer:
    enabled: true
    secretName: search-indexer-secrets
    secrets:
      SEARCH_INDEXER_DB_PASSWORD: ""
      
  authService:
    enabled: true
    secretName: auth-service-secrets
    secrets:
      DATABASE_URL: ""
      KRATOS_ADMIN_URL: ""
      KRATOS_PUBLIC_URL: ""
      JWT_SECRET: ""
      CSRF_SECRET: ""

# External Secrets Operator integration
externalSecrets:
  enabled: false
  createServiceAccount: true
  secretStore:
    name: vault-backend
    kind: SecretStore
    provider: vault  # vault, aws, gcpSecretsManager
  
  # Vault configuration
  vault:
    server: "https://vault.example.com"
    path: "secret"
    role: "alt-secrets-reader"
  
  # AWS Secrets Manager configuration
  aws:
    region: "us-west-2"
  
  # GCP Secret Manager configuration
  gcp:
    enabled: false
    projectId: ""
    clusterLocation: ""
    clusterName: ""
    serviceAccount: ""
  
  # Secret paths
  postgres:
    secretKey: "secret/postgres"
  auth:
    secretKey: "secret/auth"
  api:
    secretKey: "secret/api"

# Sealed Secrets integration
sealedSecrets:
  enabled: false
  
  # Sealed encrypted data (generated via kubeseal)
  postgres:
    username: "AgBy3i4OJSWK+PiTySYZZA9rO33HUKdRNPE..."  # Example encrypted data
    password: "AgCKx5N8z3Q4aO5pH7yZGb4r4Q5pHIL6..."     # Example encrypted data
    database: "AgA5r9x2V4kL6bH8nM3qF5g7vB9iD2..."      # Example encrypted data
  
  auth:
    jwt-secret: "AgD3j4M5L2k8E6cS1h9P4t..."             # Example encrypted data
    kratos-secret: "AgB6h3D9j2K7m4N8z1..."              # Example encrypted data
    oauth-client-id: "AgF5k7n2B8c6V3..."                # Example encrypted data
    oauth-client-secret: "AgL8v4m9H6z2..."              # Example encrypted data
  
  api:
    meilisearch-key: "AgN9p2K6L4j8V7..."                # Example encrypted data
    gemma-api-key: "AgR3d8M5k2T7..."                     # Example encrypted data
    github-token: "AgW7h4B2n9..."                        # Example encrypted data

# Service Account configuration
serviceAccount:
  create: true
  name: common-secrets-sa