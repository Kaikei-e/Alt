apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "csr-controller.fullname" . }}-automated-incident-response
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: automated-incident-response
spec:
  replicas: {{ .Values.automatedIncidentResponse.replicas | default 2 }}
  selector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: automated-incident-response
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "csr-controller.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: automated-incident-response
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: automated-incident-response
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.automatedIncidentResponse.image.repository }}:{{ .Values.automatedIncidentResponse.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.automatedIncidentResponse.image.pullPolicy }}
        env:
        - name: INCIDENT_DETECTION_ENABLED
          value: {{ .Values.automatedIncidentResponse.incidentDetection.enabled | default true | quote }}
        - name: AUTOMATED_TRIAGE_ENABLED
          value: {{ .Values.automatedIncidentResponse.automatedTriage.enabled | default true | quote }}
        - name: RESPONSE_ORCHESTRATION_ENABLED
          value: {{ .Values.automatedIncidentResponse.responseOrchestration.enabled | default true | quote }}
        - name: CONTAINMENT_AUTOMATION_ENABLED
          value: {{ .Values.automatedIncidentResponse.containmentAutomation.enabled | default true | quote }}
        - name: EVIDENCE_COLLECTION_ENABLED
          value: {{ .Values.automatedIncidentResponse.evidenceCollection.enabled | default true | quote }}
        - name: COMMUNICATION_AUTOMATION_ENABLED
          value: {{ .Values.automatedIncidentResponse.communicationAutomation.enabled | default true | quote }}
        - name: RECOVERY_AUTOMATION_ENABLED
          value: {{ .Values.automatedIncidentResponse.recoveryAutomation.enabled | default true | quote }}
        - name: LESSONS_LEARNED_ENABLED
          value: {{ .Values.automatedIncidentResponse.lessonsLearned.enabled | default true | quote }}
        - name: PLAYBOOK_EXECUTION_ENABLED
          value: {{ .Values.automatedIncidentResponse.playbookExecution.enabled | default true | quote }}
        - name: MACHINE_LEARNING_ENABLED
          value: {{ .Values.automatedIncidentResponse.machineLearning.enabled | default true | quote }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        - name: webhook
          containerPort: 9443
          protocol: TCP
        - name: soar
          containerPort: 8443
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.automatedIncidentResponse.resources | nindent 12 }}
        volumeMounts:
        - name: incident-response-config
          mountPath: /etc/incident-response
          readOnly: true
        - name: playbooks
          mountPath: /etc/playbooks
          readOnly: true
        - name: incident-data
          mountPath: /var/lib/incidents
        - name: response-logs
          mountPath: /var/log/response
        - name: evidence-storage
          mountPath: /var/lib/evidence
        - name: communication-templates
          mountPath: /etc/communication-templates
          readOnly: true
        - name: ml-models
          mountPath: /var/lib/ml-models
        - name: orchestration-cache
          mountPath: /var/cache/orchestration
      volumes:
      - name: incident-response-config
        configMap:
          name: {{ include "csr-controller.fullname" . }}-incident-response-config
      - name: playbooks
        configMap:
          name: {{ include "csr-controller.fullname" . }}-incident-response-playbooks
      - name: incident-data
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-incident-data
      - name: response-logs
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-response-logs
      - name: evidence-storage
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-evidence-storage
      - name: communication-templates
        configMap:
          name: {{ include "csr-controller.fullname" . }}-communication-templates
      - name: ml-models
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-ir-ml-models
      - name: orchestration-cache
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-orchestration-cache
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "csr-controller.fullname" . }}-automated-incident-response
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: automated-incident-response
spec:
  type: {{ .Values.automatedIncidentResponse.service.type }}
  ports:
  - port: {{ .Values.automatedIncidentResponse.service.port }}
    targetPort: http
    protocol: TCP
    name: http
  - port: {{ .Values.automatedIncidentResponse.service.grpcPort }}
    targetPort: grpc
    protocol: TCP
    name: grpc
  - port: {{ .Values.automatedIncidentResponse.service.webhookPort }}
    targetPort: webhook
    protocol: TCP
    name: webhook
  - port: {{ .Values.automatedIncidentResponse.service.soarPort }}
    targetPort: soar
    protocol: TCP
    name: soar
  selector:
    {{- include "csr-controller.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: automated-incident-response
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "csr-controller.fullname" . }}-incident-response-training
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: automated-incident-response
spec:
  schedule: {{ .Values.automatedIncidentResponse.training.schedule | default "0 3 * * 0" | quote }}
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
          containers:
          - name: incident-response-training
            image: "{{ .Values.automatedIncidentResponse.image.repository }}:{{ .Values.automatedIncidentResponse.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.automatedIncidentResponse.image.pullPolicy }}
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting incident response training pipeline..."
              
              # Collect historical incident data
              echo "Collecting historical incident data..."
              python /opt/incident-response/scripts/incident_data_collector.py \
                --config-path=/etc/incident-response/training-config.yaml \
                --output-path=/var/lib/incidents/training-data
              
              # Train incident classification models
              echo "Training incident classification models..."
              python /opt/incident-response/scripts/incident_classifier_trainer.py \
                --data-path=/var/lib/incidents/training-data \
                --model-path=/var/lib/ml-models/classification \
                --config-path=/etc/incident-response/ml-config.yaml
              
              # Train response recommendation models
              echo "Training response recommendation models..."
              python /opt/incident-response/scripts/response_recommender_trainer.py \
                --data-path=/var/lib/incidents/training-data \
                --model-path=/var/lib/ml-models/recommendation \
                --config-path=/etc/incident-response/ml-config.yaml
              
              # Train severity prediction models
              echo "Training severity prediction models..."
              python /opt/incident-response/scripts/severity_predictor_trainer.py \
                --data-path=/var/lib/incidents/training-data \
                --model-path=/var/lib/ml-models/severity \
                --config-path=/etc/incident-response/ml-config.yaml
              
              # Evaluate model performance
              echo "Evaluating model performance..."
              python /opt/incident-response/scripts/model_evaluator.py \
                --model-path=/var/lib/ml-models \
                --test-data-path=/var/lib/incidents/test-data \
                --output-path=/var/lib/incidents/evaluation-results
              
              # Update production models if performance is satisfactory
              echo "Updating production models..."
              python /opt/incident-response/scripts/model_deployer.py \
                --model-path=/var/lib/ml-models \
                --evaluation-path=/var/lib/incidents/evaluation-results \
                --deployment-path=/var/lib/ml-models/production
              
              echo "Incident response training pipeline completed successfully"
            env:
            - name: TRAINING_DATA_PERIOD
              value: {{ .Values.automatedIncidentResponse.training.trainingDataPeriod | default "90d" | quote }}
            - name: MODEL_VALIDATION_THRESHOLD
              value: {{ .Values.automatedIncidentResponse.training.modelValidationThreshold | default "0.85" | quote }}
            - name: RETRAINING_THRESHOLD
              value: {{ .Values.automatedIncidentResponse.training.retrainingThreshold | default "0.05" | quote }}
            - name: CROSS_VALIDATION_FOLDS
              value: {{ .Values.automatedIncidentResponse.training.crossValidationFolds | default "5" | quote }}
            - name: HYPERPARAMETER_TUNING_ENABLED
              value: {{ .Values.automatedIncidentResponse.training.hyperparameterTuningEnabled | default true | quote }}
            volumeMounts:
            - name: incident-response-config
              mountPath: /etc/incident-response
              readOnly: true
            - name: incident-data
              mountPath: /var/lib/incidents
            - name: ml-models
              mountPath: /var/lib/ml-models
          volumes:
          - name: incident-response-config
            configMap:
              name: {{ include "csr-controller.fullname" . }}-incident-response-config
          - name: incident-data
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-incident-data
          - name: ml-models
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-ir-ml-models
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "csr-controller.fullname" . }}-incident-response-simulation
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: automated-incident-response
spec:
  schedule: {{ .Values.automatedIncidentResponse.simulation.schedule | default "0 1 * * 1" | quote }}
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
          containers:
          - name: incident-response-simulation
            image: "{{ .Values.automatedIncidentResponse.image.repository }}:{{ .Values.automatedIncidentResponse.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.automatedIncidentResponse.image.pullPolicy }}
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting incident response simulation..."
              
              # Initialize simulation environment
              echo "Initializing simulation environment..."
              python /opt/incident-response/scripts/simulation_initializer.py \
                --config-path=/etc/incident-response/simulation-config.yaml \
                --output-path=/var/lib/incidents/simulations
              
              # Generate synthetic incident scenarios
              echo "Generating synthetic incident scenarios..."
              python /opt/incident-response/scripts/scenario_generator.py \
                --config-path=/etc/incident-response/simulation-config.yaml \
                --output-path=/var/lib/incidents/simulations/scenarios
              
              # Execute automated response simulations
              echo "Executing automated response simulations..."
              python /opt/incident-response/scripts/simulation_executor.py \
                --scenarios-path=/var/lib/incidents/simulations/scenarios \
                --playbooks-path=/etc/playbooks \
                --output-path=/var/lib/incidents/simulations/results
              
              # Analyze simulation results
              echo "Analyzing simulation results..."
              python /opt/incident-response/scripts/simulation_analyzer.py \
                --results-path=/var/lib/incidents/simulations/results \
                --output-path=/var/lib/incidents/simulations/analysis
              
              # Generate simulation reports
              echo "Generating simulation reports..."
              python /opt/incident-response/scripts/simulation_reporter.py \
                --analysis-path=/var/lib/incidents/simulations/analysis \
                --output-path=/var/lib/incidents/simulations/reports
              
              # Update response procedures based on simulation results
              echo "Updating response procedures..."
              python /opt/incident-response/scripts/procedure_updater.py \
                --analysis-path=/var/lib/incidents/simulations/analysis \
                --playbooks-path=/etc/playbooks \
                --config-path=/etc/incident-response/procedure-config.yaml
              
              echo "Incident response simulation completed successfully"
            env:
            - name: SIMULATION_SCENARIOS
              value: {{ .Values.automatedIncidentResponse.simulation.scenarios | join "," | quote }}
            - name: SIMULATION_COMPLEXITY
              value: {{ .Values.automatedIncidentResponse.simulation.complexity | default "medium" | quote }}
            - name: SIMULATION_DURATION
              value: {{ .Values.automatedIncidentResponse.simulation.duration | default "30m" | quote }}
            - name: PARALLEL_SIMULATIONS
              value: {{ .Values.automatedIncidentResponse.simulation.parallelSimulations | default "3" | quote }}
            - name: REALISTIC_DELAYS_ENABLED
              value: {{ .Values.automatedIncidentResponse.simulation.realisticDelaysEnabled | default true | quote }}
            volumeMounts:
            - name: incident-response-config
              mountPath: /etc/incident-response
              readOnly: true
            - name: playbooks
              mountPath: /etc/playbooks
              readOnly: true
            - name: incident-data
              mountPath: /var/lib/incidents
            - name: orchestration-cache
              mountPath: /var/cache/orchestration
          volumes:
          - name: incident-response-config
            configMap:
              name: {{ include "csr-controller.fullname" . }}-incident-response-config
          - name: playbooks
            configMap:
              name: {{ include "csr-controller.fullname" . }}-incident-response-playbooks
          - name: incident-data
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-incident-data
          - name: orchestration-cache
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-orchestration-cache
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingAdmissionWebhook
metadata:
  name: {{ include "csr-controller.fullname" . }}-incident-response-webhook
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: automated-incident-response
webhooks:
- name: incident-response.alt.production.local
  clientConfig:
    service:
      name: {{ include "csr-controller.fullname" . }}-automated-incident-response
      namespace: {{ .Release.Namespace }}
      path: "/webhook/incident-response"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods", "services", "configmaps", "secrets"]
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["networking.k8s.io"]
    apiVersions: ["v1"]
    resources: ["networkpolicies", "ingresses"]
  namespaceSelector:
    matchLabels:
      incident-response-monitoring: "enabled"
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: {{ .Values.automatedIncidentResponse.webhook.failurePolicy | default "Ignore" }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "csr-controller.fullname" . }}-incident-response-netpol
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: automated-incident-response
spec:
  podSelector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: automated-incident-response
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: {{ .Release.Namespace }}
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: security-intelligence
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: security-policy-engine
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: zero-trust-engine
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 9443
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 25
    - protocol: TCP
      port: 587
  - to:
    - namespaceSelector:
        matchLabels:
          name: {{ .Release.Namespace }}
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9200
    - protocol: TCP
      port: 3000