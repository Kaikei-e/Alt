apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "csr-controller.fullname" . }}-cross-cloud-security-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: cross-cloud-security-controller
spec:
  replicas: {{ .Values.crossCloudSecurityController.replicas | default 3 }}
  selector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: cross-cloud-security-controller
  template:
    metadata:
      labels:
        {{- include "csr-controller.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: cross-cloud-security-controller
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/cross-cloud-security-config.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.crossCloudSecurityController.podSecurityContext | nindent 8 }}
      containers:
      - name: cross-cloud-security-controller
        image: "{{ .Values.crossCloudSecurityController.image.repository }}:{{ .Values.crossCloudSecurityController.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.crossCloudSecurityController.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.crossCloudSecurityController.securityContext | nindent 10 }}
        env:
        - name: CROSS_CLOUD_SECURITY_ENABLED
          value: {{ .Values.crossCloudSecurityController.enabled | default "true" | quote }}
        - name: MULTI_CLOUD_COMPLIANCE_ENABLED
          value: {{ .Values.crossCloudSecurityController.multiCloudCompliance.enabled | default "true" | quote }}
        - name: UNIFIED_SECURITY_POLICY_ENABLED
          value: {{ .Values.crossCloudSecurityController.unifiedSecurityPolicy.enabled | default "true" | quote }}
        - name: CROSS_CLOUD_IDENTITY_ENABLED
          value: {{ .Values.crossCloudSecurityController.crossCloudIdentity.enabled | default "true" | quote }}
        - name: THREAT_INTELLIGENCE_ENABLED
          value: {{ .Values.crossCloudSecurityController.threatIntelligence.enabled | default "true" | quote }}
        - name: SECURITY_ORCHESTRATION_ENABLED
          value: {{ .Values.crossCloudSecurityController.securityOrchestration.enabled | default "true" | quote }}
        - name: COMPLIANCE_AUTOMATION_ENABLED
          value: {{ .Values.crossCloudSecurityController.complianceAutomation.enabled | default "true" | quote }}
        - name: ZERO_TRUST_ENABLED
          value: {{ .Values.crossCloudSecurityController.zeroTrust.enabled | default "true" | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.crossCloudSecurityController.logLevel | default "info" }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: grpc
          containerPort: 9091
          protocol: TCP
        - name: security-api
          containerPort: 8443
          protocol: TCP
        - name: compliance-api
          containerPort: 8444
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.crossCloudSecurityController.resources | nindent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/cross-cloud-security-controller
          readOnly: true
        - name: security-policies
          mountPath: /etc/security-policies
          readOnly: true
        - name: compliance-frameworks
          mountPath: /etc/compliance-frameworks
          readOnly: true
        - name: threat-intelligence
          mountPath: /etc/threat-intelligence
          readOnly: true
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: ca-bundle
          mountPath: /etc/ssl/ca-bundle
          readOnly: true
        - name: security-state
          mountPath: /var/lib/security-state
        - name: compliance-reports
          mountPath: /var/lib/compliance-reports
      volumes:
      - name: config
        configMap:
          name: {{ include "csr-controller.fullname" . }}-cross-cloud-security-config
      - name: security-policies
        configMap:
          name: {{ include "csr-controller.fullname" . }}-security-policies
      - name: compliance-frameworks
        configMap:
          name: {{ include "csr-controller.fullname" . }}-compliance-frameworks
      - name: threat-intelligence
        secret:
          secretName: {{ include "csr-controller.fullname" . }}-threat-intelligence
      - name: tls-certs
        projected:
          sources:
          - secret:
              name: {{ include "csr-controller.fullname" . }}-tls-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
      - name: ca-bundle
        configMap:
          name: {{ include "csr-controller.fullname" . }}-ca-bundle
      - name: security-state
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-security-state-pvc
      - name: compliance-reports
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-compliance-reports-pvc
      {{- with .Values.crossCloudSecurityController.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.crossCloudSecurityController.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.crossCloudSecurityController.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "csr-controller.fullname" . }}-cross-cloud-security-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: cross-cloud-security-controller
spec:
  type: {{ .Values.crossCloudSecurityController.service.type | default "ClusterIP" }}
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  - port: 9091
    targetPort: grpc
    protocol: TCP
    name: grpc
  - port: 8443
    targetPort: security-api
    protocol: TCP
    name: security-api
  - port: 8444
    targetPort: compliance-api
    protocol: TCP
    name: compliance-api
  selector:
    {{- include "csr-controller.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: cross-cloud-security-controller

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "csr-controller.fullname" . }}-compliance-automation-engine
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: compliance-automation-engine
spec:
  replicas: {{ .Values.crossCloudSecurityController.complianceAutomationEngine.replicas | default 2 }}
  selector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: compliance-automation-engine
  template:
    metadata:
      labels:
        {{- include "csr-controller.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: compliance-automation-engine
    spec:
      serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.crossCloudSecurityController.complianceAutomationEngine.podSecurityContext | nindent 8 }}
      containers:
      - name: compliance-automation-engine
        image: "{{ .Values.crossCloudSecurityController.complianceAutomationEngine.image.repository }}:{{ .Values.crossCloudSecurityController.complianceAutomationEngine.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.crossCloudSecurityController.complianceAutomationEngine.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.crossCloudSecurityController.complianceAutomationEngine.securityContext | nindent 10 }}
        env:
        - name: COMPLIANCE_FRAMEWORKS
          value: {{ join "," (.Values.crossCloudSecurityController.complianceAutomationEngine.frameworks | default (list "soc2" "iso27001" "gdpr" "pcidss" "hipaa")) }}
        - name: AUTO_REMEDIATION_ENABLED
          value: {{ .Values.crossCloudSecurityController.complianceAutomationEngine.autoRemediation.enabled | default "true" | quote }}
        - name: CONTINUOUS_MONITORING_ENABLED
          value: {{ .Values.crossCloudSecurityController.complianceAutomationEngine.continuousMonitoring.enabled | default "true" | quote }}
        - name: EVIDENCE_COLLECTION_ENABLED
          value: {{ .Values.crossCloudSecurityController.complianceAutomationEngine.evidenceCollection.enabled | default "true" | quote }}
        - name: AUDIT_TRAIL_ENABLED
          value: {{ .Values.crossCloudSecurityController.complianceAutomationEngine.auditTrail.enabled | default "true" | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.crossCloudSecurityController.complianceAutomationEngine.logLevel | default "info" }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.crossCloudSecurityController.complianceAutomationEngine.resources | nindent 10 }}
        volumeMounts:
        - name: compliance-config
          mountPath: /etc/compliance-config
          readOnly: true
        - name: compliance-frameworks
          mountPath: /etc/compliance-frameworks
          readOnly: true
        - name: evidence-storage
          mountPath: /var/lib/evidence
        - name: audit-logs
          mountPath: /var/log/audit
      volumes:
      - name: compliance-config
        configMap:
          name: {{ include "csr-controller.fullname" . }}-cross-cloud-security-config
      - name: compliance-frameworks
        configMap:
          name: {{ include "csr-controller.fullname" . }}-compliance-frameworks
      - name: evidence-storage
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-evidence-storage-pvc
      - name: audit-logs
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-audit-logs-pvc
      {{- with .Values.crossCloudSecurityController.complianceAutomationEngine.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.crossCloudSecurityController.complianceAutomationEngine.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.crossCloudSecurityController.complianceAutomationEngine.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "csr-controller.fullname" . }}-compliance-automation-engine
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: compliance-automation-engine
spec:
  type: {{ .Values.crossCloudSecurityController.complianceAutomationEngine.service.type | default "ClusterIP" }}
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    {{- include "csr-controller.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: compliance-automation-engine

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "csr-controller.fullname" . }}-threat-intelligence-aggregator
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: threat-intelligence-aggregator
spec:
  replicas: {{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.replicas | default 2 }}
  selector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: threat-intelligence-aggregator
  template:
    metadata:
      labels:
        {{- include "csr-controller.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: threat-intelligence-aggregator
    spec:
      serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.crossCloudSecurityController.threatIntelligenceAggregator.podSecurityContext | nindent 8 }}
      containers:
      - name: threat-intelligence-aggregator
        image: "{{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.image.repository }}:{{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.crossCloudSecurityController.threatIntelligenceAggregator.securityContext | nindent 10 }}
        env:
        - name: THREAT_INTEL_SOURCES
          value: {{ join "," (.Values.crossCloudSecurityController.threatIntelligenceAggregator.sources | default (list "misp" "opencti" "stix" "taxii")) }}
        - name: REAL_TIME_ANALYSIS_ENABLED
          value: {{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.realTimeAnalysis.enabled | default "true" | quote }}
        - name: ML_BASED_DETECTION_ENABLED
          value: {{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.mlBasedDetection.enabled | default "true" | quote }}
        - name: BEHAVIORAL_ANALYSIS_ENABLED
          value: {{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.behavioralAnalysis.enabled | default "true" | quote }}
        - name: AUTOMATED_RESPONSE_ENABLED
          value: {{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.automatedResponse.enabled | default "true" | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.logLevel | default "info" }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: threat-api
          containerPort: 8445
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.crossCloudSecurityController.threatIntelligenceAggregator.resources | nindent 10 }}
        volumeMounts:
        - name: threat-intel-config
          mountPath: /etc/threat-intel-config
          readOnly: true
        - name: threat-intelligence
          mountPath: /etc/threat-intelligence
          readOnly: true
        - name: ml-models
          mountPath: /var/lib/ml-models
          readOnly: true
        - name: threat-data
          mountPath: /var/lib/threat-data
        - name: analysis-results
          mountPath: /var/lib/analysis-results
      volumes:
      - name: threat-intel-config
        configMap:
          name: {{ include "csr-controller.fullname" . }}-cross-cloud-security-config
      - name: threat-intelligence
        secret:
          secretName: {{ include "csr-controller.fullname" . }}-threat-intelligence
      - name: ml-models
        configMap:
          name: {{ include "csr-controller.fullname" . }}-ml-models
      - name: threat-data
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-threat-data-pvc
      - name: analysis-results
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-analysis-results-pvc
      {{- with .Values.crossCloudSecurityController.threatIntelligenceAggregator.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.crossCloudSecurityController.threatIntelligenceAggregator.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.crossCloudSecurityController.threatIntelligenceAggregator.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "csr-controller.fullname" . }}-threat-intelligence-aggregator
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: threat-intelligence-aggregator
spec:
  type: {{ .Values.crossCloudSecurityController.threatIntelligenceAggregator.service.type | default "ClusterIP" }}
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  - port: 8445
    targetPort: threat-api
    protocol: TCP
    name: threat-api
  selector:
    {{- include "csr-controller.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: threat-intelligence-aggregator

---
{{- if .Values.crossCloudSecurityController.horizontalPodAutoscaler.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "csr-controller.fullname" . }}-cross-cloud-security-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: cross-cloud-security-controller
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "csr-controller.fullname" . }}-cross-cloud-security-controller
  minReplicas: {{ .Values.crossCloudSecurityController.horizontalPodAutoscaler.minReplicas | default 3 }}
  maxReplicas: {{ .Values.crossCloudSecurityController.horizontalPodAutoscaler.maxReplicas | default 20 }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.crossCloudSecurityController.horizontalPodAutoscaler.targetCPUUtilizationPercentage | default 70 }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .Values.crossCloudSecurityController.horizontalPodAutoscaler.targetMemoryUtilizationPercentage | default 80 }}
  - type: Pods
    pods:
      metric:
        name: security_events_per_second
      target:
        type: AverageValue
        averageValue: "100"
  - type: Pods
    pods:
      metric:
        name: threat_detection_latency_seconds
      target:
        type: AverageValue
        averageValue: "1"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 60
{{- end }}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "csr-controller.fullname" . }}-security-policy-sync
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: security-policy-sync
spec:
  schedule: {{ .Values.crossCloudSecurityController.securityPolicySync.schedule | default "*/15 * * * *" | quote }}
  concurrencyPolicy: {{ .Values.crossCloudSecurityController.securityPolicySync.concurrencyPolicy | default "Forbid" }}
  successfulJobsHistoryLimit: {{ .Values.crossCloudSecurityController.securityPolicySync.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.crossCloudSecurityController.securityPolicySync.failedJobsHistoryLimit | default 1 }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "csr-controller.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: security-policy-sync
        spec:
          serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
          securityContext:
            {{- toYaml .Values.crossCloudSecurityController.securityPolicySync.podSecurityContext | nindent 12 }}
          restartPolicy: OnFailure
          containers:
          - name: policy-sync
            image: "{{ .Values.crossCloudSecurityController.securityPolicySync.image.repository }}:{{ .Values.crossCloudSecurityController.securityPolicySync.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.crossCloudSecurityController.securityPolicySync.image.pullPolicy }}
            securityContext:
              {{- toYaml .Values.crossCloudSecurityController.securityPolicySync.securityContext | nindent 14 }}
            env:
            - name: SYNC_MODE
              value: {{ .Values.crossCloudSecurityController.securityPolicySync.mode | default "incremental" }}
            - name: CLOUD_PROVIDERS
              value: {{ join "," (.Values.crossCloudSecurityController.securityPolicySync.cloudProviders | default (list "aws" "azure" "gcp" "onpremise")) }}
            - name: POLICY_VALIDATION_ENABLED
              value: {{ .Values.crossCloudSecurityController.securityPolicySync.policyValidation.enabled | default "true" | quote }}
            - name: CONFLICT_RESOLUTION
              value: {{ .Values.crossCloudSecurityController.securityPolicySync.conflictResolution | default "merge" }}
            - name: DRY_RUN
              value: {{ .Values.crossCloudSecurityController.securityPolicySync.dryRun | default "false" | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.crossCloudSecurityController.securityPolicySync.logLevel | default "info" }}
            resources:
              {{- toYaml .Values.crossCloudSecurityController.securityPolicySync.resources | nindent 14 }}
            volumeMounts:
            - name: policy-sync-config
              mountPath: /etc/policy-sync-config
              readOnly: true
            - name: security-policies
              mountPath: /etc/security-policies
              readOnly: true
            - name: cloud-credentials
              mountPath: /etc/cloud-credentials
              readOnly: true
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting cross-cloud security policy synchronization..."
              
              # Discover security policies across clouds
              /usr/local/bin/policy-sync discover \
                --config=/etc/policy-sync-config/config.yaml \
                --credentials=/etc/cloud-credentials \
                --providers="$CLOUD_PROVIDERS" \
                --output=/tmp/discovered-policies.json
              
              if [ $? -eq 0 ]; then
                echo "Policy discovery completed successfully"
                
                # Validate discovered policies
                if [ "$POLICY_VALIDATION_ENABLED" = "true" ]; then
                  /usr/local/bin/policy-sync validate \
                    --config=/etc/policy-sync-config/config.yaml \
                    --policies=/tmp/discovered-policies.json \
                    --baseline=/etc/security-policies
                  
                  if [ $? -ne 0 ]; then
                    echo "Policy validation failed"
                    exit 1
                  fi
                fi
                
                # Synchronize policies
                if [ "$DRY_RUN" = "false" ]; then
                  /usr/local/bin/policy-sync sync \
                    --config=/etc/policy-sync-config/config.yaml \
                    --policies=/tmp/discovered-policies.json \
                    --mode=$SYNC_MODE \
                    --conflict-resolution=$CONFLICT_RESOLUTION
                else
                  echo "Dry run mode: synchronization plan generated but not executed"
                  /usr/local/bin/policy-sync sync \
                    --config=/etc/policy-sync-config/config.yaml \
                    --policies=/tmp/discovered-policies.json \
                    --mode=$SYNC_MODE \
                    --conflict-resolution=$CONFLICT_RESOLUTION \
                    --dry-run
                fi
                
              else
                echo "Policy discovery failed"
                exit 1
              fi
              
              echo "Cross-cloud security policy synchronization completed"
          volumes:
          - name: policy-sync-config
            configMap:
              name: {{ include "csr-controller.fullname" . }}-cross-cloud-security-config
          - name: security-policies
            configMap:
              name: {{ include "csr-controller.fullname" . }}-security-policies
          - name: cloud-credentials
            secret:
              secretName: {{ include "csr-controller.fullname" . }}-cloud-credentials

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "csr-controller.fullname" . }}-compliance-assessment
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: compliance-assessment
spec:
  schedule: {{ .Values.crossCloudSecurityController.complianceAssessment.schedule | default "0 */6 * * *" | quote }}
  concurrencyPolicy: {{ .Values.crossCloudSecurityController.complianceAssessment.concurrencyPolicy | default "Forbid" }}
  successfulJobsHistoryLimit: {{ .Values.crossCloudSecurityController.complianceAssessment.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.crossCloudSecurityController.complianceAssessment.failedJobsHistoryLimit | default 1 }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "csr-controller.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: compliance-assessment
        spec:
          serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
          securityContext:
            {{- toYaml .Values.crossCloudSecurityController.complianceAssessment.podSecurityContext | nindent 12 }}
          restartPolicy: OnFailure
          containers:
          - name: compliance-assessment
            image: "{{ .Values.crossCloudSecurityController.complianceAssessment.image.repository }}:{{ .Values.crossCloudSecurityController.complianceAssessment.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.crossCloudSecurityController.complianceAssessment.image.pullPolicy }}
            securityContext:
              {{- toYaml .Values.crossCloudSecurityController.complianceAssessment.securityContext | nindent 14 }}
            env:
            - name: ASSESSMENT_TYPE
              value: {{ .Values.crossCloudSecurityController.complianceAssessment.type | default "comprehensive" }}
            - name: COMPLIANCE_FRAMEWORKS
              value: {{ join "," (.Values.crossCloudSecurityController.complianceAssessment.frameworks | default (list "soc2" "iso27001" "gdpr" "pcidss")) }}
            - name: AUTO_REMEDIATION_ENABLED
              value: {{ .Values.crossCloudSecurityController.complianceAssessment.autoRemediation.enabled | default "true" | quote }}
            - name: EVIDENCE_COLLECTION_ENABLED
              value: {{ .Values.crossCloudSecurityController.complianceAssessment.evidenceCollection.enabled | default "true" | quote }}
            - name: REPORT_GENERATION_ENABLED
              value: {{ .Values.crossCloudSecurityController.complianceAssessment.reportGeneration.enabled | default "true" | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.crossCloudSecurityController.complianceAssessment.logLevel | default "info" }}
            resources:
              {{- toYaml .Values.crossCloudSecurityController.complianceAssessment.resources | nindent 14 }}
            volumeMounts:
            - name: assessment-config
              mountPath: /etc/assessment-config
              readOnly: true
            - name: compliance-frameworks
              mountPath: /etc/compliance-frameworks
              readOnly: true
            - name: evidence-storage
              mountPath: /var/lib/evidence
            - name: compliance-reports
              mountPath: /var/lib/compliance-reports
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting cross-cloud compliance assessment..."
              
              # Perform compliance assessment
              /usr/local/bin/compliance-assessment assess \
                --config=/etc/assessment-config/config.yaml \
                --frameworks="$COMPLIANCE_FRAMEWORKS" \
                --type=$ASSESSMENT_TYPE \
                --output=/tmp/assessment-results.json
              
              if [ $? -eq 0 ]; then
                echo "Compliance assessment completed successfully"
                
                # Collect evidence if enabled
                if [ "$EVIDENCE_COLLECTION_ENABLED" = "true" ]; then
                  /usr/local/bin/compliance-assessment collect-evidence \
                    --config=/etc/assessment-config/config.yaml \
                    --assessment=/tmp/assessment-results.json \
                    --output=/var/lib/evidence/$(date +%Y%m%d-%H%M%S)
                fi
                
                # Generate compliance reports
                if [ "$REPORT_GENERATION_ENABLED" = "true" ]; then
                  /usr/local/bin/compliance-assessment generate-report \
                    --config=/etc/assessment-config/config.yaml \
                    --assessment=/tmp/assessment-results.json \
                    --output=/var/lib/compliance-reports/$(date +%Y%m%d-%H%M%S)
                fi
                
                # Auto-remediate issues if enabled
                if [ "$AUTO_REMEDIATION_ENABLED" = "true" ]; then
                  ISSUES=$(cat /tmp/assessment-results.json | jq '.issues | length')
                  
                  if [ "$ISSUES" -gt 0 ]; then
                    echo "Found $ISSUES compliance issues, attempting auto-remediation..."
                    
                    /usr/local/bin/compliance-assessment remediate \
                      --config=/etc/assessment-config/config.yaml \
                      --assessment=/tmp/assessment-results.json
                    
                    if [ $? -eq 0 ]; then
                      echo "Auto-remediation completed successfully"
                    else
                      echo "Auto-remediation failed, manual intervention required"
                    fi
                  else
                    echo "No compliance issues found"
                  fi
                fi
                
              else
                echo "Compliance assessment failed"
                exit 1
              fi
              
              echo "Cross-cloud compliance assessment completed"
          volumes:
          - name: assessment-config
            configMap:
              name: {{ include "csr-controller.fullname" . }}-cross-cloud-security-config
          - name: compliance-frameworks
            configMap:
              name: {{ include "csr-controller.fullname" . }}-compliance-frameworks
          - name: evidence-storage
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-evidence-storage-pvc
          - name: compliance-reports
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-compliance-reports-pvc