apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "csr-controller.fullname" . }}-security-recommendation-engine
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: security-recommendation-engine
spec:
  replicas: {{ .Values.securityRecommendationEngine.replicas | default 2 }}
  selector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: security-recommendation-engine
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "csr-controller.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: security-recommendation-engine
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: security-recommendation-engine
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.securityRecommendationEngine.image.repository }}:{{ .Values.securityRecommendationEngine.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.securityRecommendationEngine.image.pullPolicy }}
        env:
        - name: VULNERABILITY_RECOMMENDATIONS_ENABLED
          value: {{ .Values.securityRecommendationEngine.vulnerabilityRecommendations.enabled | default true | quote }}
        - name: CONFIGURATION_RECOMMENDATIONS_ENABLED
          value: {{ .Values.securityRecommendationEngine.configurationRecommendations.enabled | default true | quote }}
        - name: POLICY_RECOMMENDATIONS_ENABLED
          value: {{ .Values.securityRecommendationEngine.policyRecommendations.enabled | default true | quote }}
        - name: ARCHITECTURE_RECOMMENDATIONS_ENABLED
          value: {{ .Values.securityRecommendationEngine.architectureRecommendations.enabled | default true | quote }}
        - name: COMPLIANCE_RECOMMENDATIONS_ENABLED
          value: {{ .Values.securityRecommendationEngine.complianceRecommendations.enabled | default true | quote }}
        - name: PERFORMANCE_RECOMMENDATIONS_ENABLED
          value: {{ .Values.securityRecommendationEngine.performanceRecommendations.enabled | default true | quote }}
        - name: COST_OPTIMIZATION_ENABLED
          value: {{ .Values.securityRecommendationEngine.costOptimization.enabled | default true | quote }}
        - name: AUTOMATION_RECOMMENDATIONS_ENABLED
          value: {{ .Values.securityRecommendationEngine.automationRecommendations.enabled | default true | quote }}
        - name: PERSONALIZATION_ENABLED
          value: {{ .Values.securityRecommendationEngine.personalization.enabled | default true | quote }}
        - name: CONTINUOUS_LEARNING_ENABLED
          value: {{ .Values.securityRecommendationEngine.continuousLearning.enabled | default true | quote }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        - name: dashboard
          containerPort: 3000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.securityRecommendationEngine.resources | nindent 12 }}
        volumeMounts:
        - name: recommendation-engine-config
          mountPath: /etc/recommendation-engine
          readOnly: true
        - name: recommendation-models
          mountPath: /var/lib/recommendation-models
        - name: recommendation-data
          mountPath: /var/lib/recommendation-data
        - name: user-profiles
          mountPath: /var/lib/user-profiles
        - name: recommendation-cache
          mountPath: /var/cache/recommendations
        - name: learning-data
          mountPath: /var/lib/learning-data
        - name: knowledge-base
          mountPath: /var/lib/knowledge-base
        - name: feedback-data
          mountPath: /var/lib/feedback-data
      volumes:
      - name: recommendation-engine-config
        configMap:
          name: {{ include "csr-controller.fullname" . }}-recommendation-engine-config
      - name: recommendation-models
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-recommendation-models
      - name: recommendation-data
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-recommendation-data
      - name: user-profiles
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-user-profiles
      - name: recommendation-cache
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-recommendation-cache
      - name: learning-data
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-learning-data
      - name: knowledge-base
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-knowledge-base
      - name: feedback-data
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-feedback-data
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "csr-controller.fullname" . }}-security-recommendation-engine
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: security-recommendation-engine
spec:
  type: {{ .Values.securityRecommendationEngine.service.type }}
  ports:
  - port: {{ .Values.securityRecommendationEngine.service.port }}
    targetPort: http
    protocol: TCP
    name: http
  - port: {{ .Values.securityRecommendationEngine.service.grpcPort }}
    targetPort: grpc
    protocol: TCP
    name: grpc
  - port: {{ .Values.securityRecommendationEngine.service.dashboardPort }}
    targetPort: dashboard
    protocol: TCP
    name: dashboard
  selector:
    {{- include "csr-controller.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: security-recommendation-engine
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "csr-controller.fullname" . }}-recommendation-generation
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: security-recommendation-engine
spec:
  schedule: {{ .Values.securityRecommendationEngine.recommendationGeneration.schedule | default "0 */6 * * *" | quote }}
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
          containers:
          - name: recommendation-generation
            image: "{{ .Values.securityRecommendationEngine.image.repository }}:{{ .Values.securityRecommendationEngine.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.securityRecommendationEngine.image.pullPolicy }}
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting recommendation generation pipeline..."
              
              # Collect security posture data
              echo "Collecting security posture data..."
              python /opt/recommendation-engine/scripts/data_collector.py \
                --config-path=/etc/recommendation-engine/data-collection-config.yaml \
                --output-path=/var/lib/recommendation-data/security-posture
              
              # Analyze vulnerabilities
              echo "Analyzing vulnerabilities..."
              python /opt/recommendation-engine/scripts/vulnerability_analyzer.py \
                --data-path=/var/lib/recommendation-data/security-posture \
                --output-path=/var/lib/recommendation-data/vulnerability-analysis \
                --config-path=/etc/recommendation-engine/vulnerability-config.yaml
              
              # Analyze configurations
              echo "Analyzing configurations..."
              python /opt/recommendation-engine/scripts/configuration_analyzer.py \
                --data-path=/var/lib/recommendation-data/security-posture \
                --output-path=/var/lib/recommendation-data/configuration-analysis \
                --config-path=/etc/recommendation-engine/configuration-config.yaml
              
              # Generate recommendations
              echo "Generating recommendations..."
              python /opt/recommendation-engine/scripts/recommendation_generator.py \
                --analysis-path=/var/lib/recommendation-data \
                --models-path=/var/lib/recommendation-models \
                --output-path=/var/lib/recommendation-data/recommendations \
                --config-path=/etc/recommendation-engine/recommendation-config.yaml
              
              # Prioritize recommendations
              echo "Prioritizing recommendations..."
              python /opt/recommendation-engine/scripts/recommendation_prioritizer.py \
                --recommendations-path=/var/lib/recommendation-data/recommendations \
                --user-profiles-path=/var/lib/user-profiles \
                --output-path=/var/lib/recommendation-data/prioritized-recommendations \
                --config-path=/etc/recommendation-engine/prioritization-config.yaml
              
              # Generate reports
              echo "Generating recommendation reports..."
              python /opt/recommendation-engine/scripts/report_generator.py \
                --recommendations-path=/var/lib/recommendation-data/prioritized-recommendations \
                --output-path=/var/lib/recommendation-data/reports \
                --config-path=/etc/recommendation-engine/reporting-config.yaml
              
              # Update knowledge base
              echo "Updating knowledge base..."
              python /opt/recommendation-engine/scripts/knowledge_base_updater.py \
                --recommendations-path=/var/lib/recommendation-data/recommendations \
                --feedback-path=/var/lib/feedback-data \
                --knowledge-base-path=/var/lib/knowledge-base \
                --config-path=/etc/recommendation-engine/knowledge-base-config.yaml
              
              echo "Recommendation generation pipeline completed successfully"
            env:
            - name: RECOMMENDATION_SCOPE
              value: {{ .Values.securityRecommendationEngine.recommendationGeneration.scope | default "comprehensive" | quote }}
            - name: ANALYSIS_DEPTH
              value: {{ .Values.securityRecommendationEngine.recommendationGeneration.analysisDepth | default "deep" | quote }}
            - name: RECOMMENDATION_CONFIDENCE_THRESHOLD
              value: {{ .Values.securityRecommendationEngine.recommendationGeneration.confidenceThreshold | default "0.7" | quote }}
            - name: PERSONALIZATION_LEVEL
              value: {{ .Values.securityRecommendationEngine.recommendationGeneration.personalizationLevel | default "high" | quote }}
            - name: PARALLEL_PROCESSING_ENABLED
              value: {{ .Values.securityRecommendationEngine.recommendationGeneration.parallelProcessingEnabled | default true | quote }}
            volumeMounts:
            - name: recommendation-engine-config
              mountPath: /etc/recommendation-engine
              readOnly: true
            - name: recommendation-models
              mountPath: /var/lib/recommendation-models
            - name: recommendation-data
              mountPath: /var/lib/recommendation-data
            - name: user-profiles
              mountPath: /var/lib/user-profiles
            - name: learning-data
              mountPath: /var/lib/learning-data
            - name: knowledge-base
              mountPath: /var/lib/knowledge-base
            - name: feedback-data
              mountPath: /var/lib/feedback-data
          volumes:
          - name: recommendation-engine-config
            configMap:
              name: {{ include "csr-controller.fullname" . }}-recommendation-engine-config
          - name: recommendation-models
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-recommendation-models
          - name: recommendation-data
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-recommendation-data
          - name: user-profiles
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-user-profiles
          - name: learning-data
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-learning-data
          - name: knowledge-base
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-knowledge-base
          - name: feedback-data
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-feedback-data
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "csr-controller.fullname" . }}-recommendation-model-training
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: security-recommendation-engine
spec:
  schedule: {{ .Values.securityRecommendationEngine.modelTraining.schedule | default "0 2 * * 0" | quote }}
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
          containers:
          - name: recommendation-model-training
            image: "{{ .Values.securityRecommendationEngine.image.repository }}:{{ .Values.securityRecommendationEngine.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.securityRecommendationEngine.image.pullPolicy }}
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting recommendation model training pipeline..."
              
              # Prepare training data
              echo "Preparing training data..."
              python /opt/recommendation-engine/scripts/training_data_preparer.py \
                --feedback-path=/var/lib/feedback-data \
                --learning-data-path=/var/lib/learning-data \
                --output-path=/var/lib/learning-data/prepared \
                --config-path=/etc/recommendation-engine/training-config.yaml
              
              # Train vulnerability recommendation models
              echo "Training vulnerability recommendation models..."
              python /opt/recommendation-engine/scripts/vulnerability_model_trainer.py \
                --training-data-path=/var/lib/learning-data/prepared \
                --models-path=/var/lib/recommendation-models/vulnerability \
                --config-path=/etc/recommendation-engine/vulnerability-model-config.yaml
              
              # Train configuration recommendation models
              echo "Training configuration recommendation models..."
              python /opt/recommendation-engine/scripts/configuration_model_trainer.py \
                --training-data-path=/var/lib/learning-data/prepared \
                --models-path=/var/lib/recommendation-models/configuration \
                --config-path=/etc/recommendation-engine/configuration-model-config.yaml
              
              # Train policy recommendation models
              echo "Training policy recommendation models..."
              python /opt/recommendation-engine/scripts/policy_model_trainer.py \
                --training-data-path=/var/lib/learning-data/prepared \
                --models-path=/var/lib/recommendation-models/policy \
                --config-path=/etc/recommendation-engine/policy-model-config.yaml
              
              # Train architecture recommendation models
              echo "Training architecture recommendation models..."
              python /opt/recommendation-engine/scripts/architecture_model_trainer.py \
                --training-data-path=/var/lib/learning-data/prepared \
                --models-path=/var/lib/recommendation-models/architecture \
                --config-path=/etc/recommendation-engine/architecture-model-config.yaml
              
              # Train personalization models
              echo "Training personalization models..."
              python /opt/recommendation-engine/scripts/personalization_model_trainer.py \
                --training-data-path=/var/lib/learning-data/prepared \
                --user-profiles-path=/var/lib/user-profiles \
                --models-path=/var/lib/recommendation-models/personalization \
                --config-path=/etc/recommendation-engine/personalization-config.yaml
              
              # Evaluate model performance
              echo "Evaluating model performance..."
              python /opt/recommendation-engine/scripts/model_evaluator.py \
                --models-path=/var/lib/recommendation-models \
                --test-data-path=/var/lib/learning-data/prepared/test \
                --output-path=/var/lib/learning-data/evaluation \
                --config-path=/etc/recommendation-engine/evaluation-config.yaml
              
              # Deploy best performing models
              echo "Deploying best performing models..."
              python /opt/recommendation-engine/scripts/model_deployer.py \
                --models-path=/var/lib/recommendation-models \
                --evaluation-path=/var/lib/learning-data/evaluation \
                --deployment-path=/var/lib/recommendation-models/production \
                --config-path=/etc/recommendation-engine/deployment-config.yaml
              
              echo "Recommendation model training pipeline completed successfully"
            env:
            - name: TRAINING_DATA_PERIOD
              value: {{ .Values.securityRecommendationEngine.modelTraining.trainingDataPeriod | default "90d" | quote }}
            - name: MODEL_VALIDATION_SPLIT
              value: {{ .Values.securityRecommendationEngine.modelTraining.validationSplit | default "0.2" | quote }}
            - name: HYPERPARAMETER_TUNING_ENABLED
              value: {{ .Values.securityRecommendationEngine.modelTraining.hyperparameterTuningEnabled | default true | quote }}
            - name: CROSS_VALIDATION_FOLDS
              value: {{ .Values.securityRecommendationEngine.modelTraining.crossValidationFolds | default "5" | quote }}
            - name: EARLY_STOPPING_ENABLED
              value: {{ .Values.securityRecommendationEngine.modelTraining.earlyStoppingEnabled | default true | quote }}
            - name: MODEL_PERFORMANCE_THRESHOLD
              value: {{ .Values.securityRecommendationEngine.modelTraining.performanceThreshold | default "0.8" | quote }}
            volumeMounts:
            - name: recommendation-engine-config
              mountPath: /etc/recommendation-engine
              readOnly: true
            - name: recommendation-models
              mountPath: /var/lib/recommendation-models
            - name: learning-data
              mountPath: /var/lib/learning-data
            - name: feedback-data
              mountPath: /var/lib/feedback-data
            - name: user-profiles
              mountPath: /var/lib/user-profiles
          volumes:
          - name: recommendation-engine-config
            configMap:
              name: {{ include "csr-controller.fullname" . }}-recommendation-engine-config
          - name: recommendation-models
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-recommendation-models
          - name: learning-data
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-learning-data
          - name: feedback-data
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-feedback-data
          - name: user-profiles
            persistentVolumeClaim:
              claimName: {{ include "csr-controller.fullname" . }}-user-profiles
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "csr-controller.fullname" . }}-recommendation-engine-netpol
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: security-recommendation-engine
spec:
  podSelector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: security-recommendation-engine
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: {{ .Release.Namespace }}
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: csr-controller
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: security-intelligence
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: security-policy-engine
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: automated-incident-response
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  - to:
    - namespaceSelector:
        matchLabels:
          name: {{ .Release.Namespace }}
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9200