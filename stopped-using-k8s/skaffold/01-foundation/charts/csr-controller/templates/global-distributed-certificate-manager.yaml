apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "csr-controller.fullname" . }}-global-distributed-certificate-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: global-distributed-certificate-manager
spec:
  replicas: {{ .Values.globalDistributedCertificateManager.replicas | default 3 }}
  selector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: global-distributed-certificate-manager
  template:
    metadata:
      labels:
        {{- include "csr-controller.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: global-distributed-certificate-manager
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/global-distributed-certificate-config.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.globalDistributedCertificateManager.podSecurityContext | nindent 8 }}
      containers:
      - name: global-distributed-certificate-manager
        image: "{{ .Values.globalDistributedCertificateManager.image.repository }}:{{ .Values.globalDistributedCertificateManager.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.globalDistributedCertificateManager.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.globalDistributedCertificateManager.securityContext | nindent 10 }}
        env:
        - name: GLOBAL_DISTRIBUTION_ENABLED
          value: {{ .Values.globalDistributedCertificateManager.enabled | default "true" | quote }}
        - name: MULTI_REGION_ENABLED
          value: {{ .Values.globalDistributedCertificateManager.multiRegion.enabled | default "true" | quote }}
        - name: CROSS_CLUSTER_ENABLED
          value: {{ .Values.globalDistributedCertificateManager.crossCluster.enabled | default "true" | quote }}
        - name: FEDERATION_ENABLED
          value: {{ .Values.globalDistributedCertificateManager.federation.enabled | default "true" | quote }}
        - name: GLOBAL_CA_ENABLED
          value: {{ .Values.globalDistributedCertificateManager.globalCA.enabled | default "true" | quote }}
        - name: CERTIFICATE_REPLICATION_ENABLED
          value: {{ .Values.globalDistributedCertificateManager.certificateReplication.enabled | default "true" | quote }}
        - name: CONSISTENCY_MODE
          value: {{ .Values.globalDistributedCertificateManager.consistency.mode | default "eventual" }}
        - name: CONFLICT_RESOLUTION_STRATEGY
          value: {{ .Values.globalDistributedCertificateManager.conflictResolution.strategy | default "timestamp-based" }}
        - name: LOG_LEVEL
          value: {{ .Values.globalDistributedCertificateManager.logLevel | default "info" }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: grpc
          containerPort: 9091
          protocol: TCP
        - name: federation-api
          containerPort: 8443
          protocol: TCP
        - name: replication-api
          containerPort: 8444
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.globalDistributedCertificateManager.resources | nindent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/global-distributed-certificate-manager
          readOnly: true
        - name: global-ca-certs
          mountPath: /etc/global-ca
          readOnly: true
        - name: federation-certs
          mountPath: /etc/federation-certs
          readOnly: true
        - name: replication-certs
          mountPath: /etc/replication-certs
          readOnly: true
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: certificate-store
          mountPath: /var/lib/certificates
        - name: replication-state
          mountPath: /var/lib/replication-state
      volumes:
      - name: config
        configMap:
          name: {{ include "csr-controller.fullname" . }}-global-distributed-certificate-config
      - name: global-ca-certs
        secret:
          secretName: {{ include "csr-controller.fullname" . }}-global-ca-certs
      - name: federation-certs
        secret:
          secretName: {{ include "csr-controller.fullname" . }}-federation-certs
      - name: replication-certs
        secret:
          secretName: {{ include "csr-controller.fullname" . }}-replication-certs
      - name: tls-certs
        projected:
          sources:
          - secret:
              name: {{ include "csr-controller.fullname" . }}-tls-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
      - name: certificate-store
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-certificate-store-pvc
      - name: replication-state
        persistentVolumeClaim:
          claimName: {{ include "csr-controller.fullname" . }}-replication-state-pvc
      {{- with .Values.globalDistributedCertificateManager.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.globalDistributedCertificateManager.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.globalDistributedCertificateManager.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "csr-controller.fullname" . }}-global-distributed-certificate-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: global-distributed-certificate-manager
spec:
  type: {{ .Values.globalDistributedCertificateManager.service.type | default "ClusterIP" }}
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  - port: 9091
    targetPort: grpc
    protocol: TCP
    name: grpc
  - port: 8443
    targetPort: federation-api
    protocol: TCP
    name: federation-api
  - port: 8444
    targetPort: replication-api
    protocol: TCP
    name: replication-api
  selector:
    {{- include "csr-controller.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: global-distributed-certificate-manager

---
{{- if .Values.globalDistributedCertificateManager.globalCaService.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "csr-controller.fullname" . }}-global-ca-service
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: global-ca-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    {{- if .Values.globalDistributedCertificateManager.globalCaService.annotations }}
    {{- toYaml .Values.globalDistributedCertificateManager.globalCaService.annotations | nindent 4 }}
    {{- end }}
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
    {{- toYaml .Values.globalDistributedCertificateManager.globalCaService.sourceRanges | nindent 4 }}
  ports:
  - port: 443
    targetPort: federation-api
    protocol: TCP
    name: federation-api-secure
  - port: 8444
    targetPort: replication-api
    protocol: TCP
    name: replication-api-secure
  selector:
    {{- include "csr-controller.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: global-distributed-certificate-manager
{{- end }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "csr-controller.fullname" . }}-certificate-replication-node
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: certificate-replication-node
spec:
  serviceName: {{ include "csr-controller.fullname" . }}-certificate-replication-node
  replicas: {{ .Values.globalDistributedCertificateManager.certificateReplication.nodes | default 3 }}
  selector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: certificate-replication-node
  template:
    metadata:
      labels:
        {{- include "csr-controller.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: certificate-replication-node
    spec:
      serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.globalDistributedCertificateManager.certificateReplication.podSecurityContext | nindent 8 }}
      containers:
      - name: certificate-replication-node
        image: "{{ .Values.globalDistributedCertificateManager.certificateReplication.image.repository }}:{{ .Values.globalDistributedCertificateManager.certificateReplication.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.globalDistributedCertificateManager.certificateReplication.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.globalDistributedCertificateManager.certificateReplication.securityContext | nindent 10 }}
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CLUSTER_NODES
          value: {{ .Values.globalDistributedCertificateManager.certificateReplication.nodes | default 3 | quote }}
        - name: REPLICATION_FACTOR
          value: {{ .Values.globalDistributedCertificateManager.certificateReplication.replicationFactor | default 2 | quote }}
        - name: CONSISTENCY_LEVEL
          value: {{ .Values.globalDistributedCertificateManager.certificateReplication.consistencyLevel | default "quorum" }}
        - name: ENCRYPTION_ENABLED
          value: {{ .Values.globalDistributedCertificateManager.certificateReplication.encryption.enabled | default "true" | quote }}
        - name: COMPRESSION_ENABLED
          value: {{ .Values.globalDistributedCertificateManager.certificateReplication.compression.enabled | default "true" | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.globalDistributedCertificateManager.certificateReplication.logLevel | default "info" }}
        ports:
        - name: peer
          containerPort: 7000
          protocol: TCP
        - name: client
          containerPort: 7001
          protocol: TCP
        - name: metrics
          containerPort: 9100
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: client
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: client
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          {{- toYaml .Values.globalDistributedCertificateManager.certificateReplication.resources | nindent 10 }}
        volumeMounts:
        - name: replication-config
          mountPath: /etc/replication-config
          readOnly: true
        - name: replication-data
          mountPath: /var/lib/replication-data
        - name: replication-logs
          mountPath: /var/log/replication
      volumes:
      - name: replication-config
        configMap:
          name: {{ include "csr-controller.fullname" . }}-certificate-replication-config
  volumeClaimTemplates:
  - metadata:
      name: replication-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: {{ .Values.globalDistributedCertificateManager.certificateReplication.storage.storageClass | default "fast-ssd" }}
      resources:
        requests:
          storage: {{ .Values.globalDistributedCertificateManager.certificateReplication.storage.size | default "10Gi" }}
  - metadata:
      name: replication-logs
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: {{ .Values.globalDistributedCertificateManager.certificateReplication.storage.storageClass | default "fast-ssd" }}
      resources:
        requests:
          storage: {{ .Values.globalDistributedCertificateManager.certificateReplication.storage.logSize | default "5Gi" }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "csr-controller.fullname" . }}-certificate-replication-node
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: certificate-replication-node
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - port: 7000
    targetPort: peer
    protocol: TCP
    name: peer
  - port: 7001
    targetPort: client
    protocol: TCP
    name: client
  - port: 9100
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    {{- include "csr-controller.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: certificate-replication-node

---
{{- if .Values.globalDistributedCertificateManager.horizontalPodAutoscaler.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "csr-controller.fullname" . }}-global-distributed-certificate-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: global-distributed-certificate-manager
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "csr-controller.fullname" . }}-global-distributed-certificate-manager
  minReplicas: {{ .Values.globalDistributedCertificateManager.horizontalPodAutoscaler.minReplicas | default 3 }}
  maxReplicas: {{ .Values.globalDistributedCertificateManager.horizontalPodAutoscaler.maxReplicas | default 20 }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.globalDistributedCertificateManager.horizontalPodAutoscaler.targetCPUUtilizationPercentage | default 70 }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .Values.globalDistributedCertificateManager.horizontalPodAutoscaler.targetMemoryUtilizationPercentage | default 80 }}
  - type: Pods
    pods:
      metric:
        name: certificate_requests_per_second
      target:
        type: AverageValue
        averageValue: "50"
  - type: Pods
    pods:
      metric:
        name: replication_lag_seconds
      target:
        type: AverageValue
        averageValue: "5"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 60
{{- end }}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "csr-controller.fullname" . }}-global-certificate-sync
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: global-certificate-sync
spec:
  schedule: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.schedule | default "*/5 * * * *" | quote }}
  concurrencyPolicy: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.concurrencyPolicy | default "Forbid" }}
  successfulJobsHistoryLimit: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.failedJobsHistoryLimit | default 1 }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "csr-controller.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: global-certificate-sync
        spec:
          serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
          securityContext:
            {{- toYaml .Values.globalDistributedCertificateManager.globalCertificateSync.podSecurityContext | nindent 12 }}
          restartPolicy: OnFailure
          containers:
          - name: certificate-sync
            image: "{{ .Values.globalDistributedCertificateManager.globalCertificateSync.image.repository }}:{{ .Values.globalDistributedCertificateManager.globalCertificateSync.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.image.pullPolicy }}
            securityContext:
              {{- toYaml .Values.globalDistributedCertificateManager.globalCertificateSync.securityContext | nindent 14 }}
            env:
            - name: SYNC_MODE
              value: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.mode | default "incremental" }}
            - name: CONFLICT_RESOLUTION
              value: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.conflictResolution | default "latest-wins" }}
            - name: CONSISTENCY_CHECK
              value: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.consistencyCheck | default "true" | quote }}
            - name: DRY_RUN
              value: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.dryRun | default "false" | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.globalDistributedCertificateManager.globalCertificateSync.logLevel | default "info" }}
            resources:
              {{- toYaml .Values.globalDistributedCertificateManager.globalCertificateSync.resources | nindent 14 }}
            volumeMounts:
            - name: sync-config
              mountPath: /etc/sync-config
              readOnly: true
            - name: global-ca-certs
              mountPath: /etc/global-ca
              readOnly: true
            - name: federation-certs
              mountPath: /etc/federation-certs
              readOnly: true
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting global certificate synchronization..."
              
              # Discover all certificate sources
              /usr/local/bin/certificate-sync discover \
                --config=/etc/sync-config/config.yaml \
                --ca-certs=/etc/global-ca \
                --output=/tmp/sources.json
              
              if [ $? -eq 0 ]; then
                echo "Certificate source discovery completed successfully"
                
                # Perform synchronization
                if [ "$DRY_RUN" = "false" ]; then
                  /usr/local/bin/certificate-sync sync \
                    --config=/etc/sync-config/config.yaml \
                    --sources=/tmp/sources.json \
                    --mode=$SYNC_MODE \
                    --conflict-resolution=$CONFLICT_RESOLUTION
                else
                  echo "Dry run mode: synchronization plan generated but not executed"
                  /usr/local/bin/certificate-sync sync \
                    --config=/etc/sync-config/config.yaml \
                    --sources=/tmp/sources.json \
                    --mode=$SYNC_MODE \
                    --conflict-resolution=$CONFLICT_RESOLUTION \
                    --dry-run
                fi
                
                # Perform consistency check
                if [ "$CONSISTENCY_CHECK" = "true" ]; then
                  /usr/local/bin/certificate-sync verify \
                    --config=/etc/sync-config/config.yaml \
                    --sources=/tmp/sources.json
                fi
                
              else
                echo "Certificate source discovery failed"
                exit 1
              fi
              
              echo "Global certificate synchronization completed"
          volumes:
          - name: sync-config
            configMap:
              name: {{ include "csr-controller.fullname" . }}-global-distributed-certificate-config
          - name: global-ca-certs
            secret:
              secretName: {{ include "csr-controller.fullname" . }}-global-ca-certs
          - name: federation-certs
            secret:
              secretName: {{ include "csr-controller.fullname" . }}-federation-certs

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "csr-controller.fullname" . }}-certificate-consistency-check
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: certificate-consistency-check
spec:
  schedule: {{ .Values.globalDistributedCertificateManager.consistencyCheck.schedule | default "0 */6 * * *" | quote }}
  concurrencyPolicy: {{ .Values.globalDistributedCertificateManager.consistencyCheck.concurrencyPolicy | default "Forbid" }}
  successfulJobsHistoryLimit: {{ .Values.globalDistributedCertificateManager.consistencyCheck.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.globalDistributedCertificateManager.consistencyCheck.failedJobsHistoryLimit | default 1 }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "csr-controller.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: certificate-consistency-check
        spec:
          serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
          securityContext:
            {{- toYaml .Values.globalDistributedCertificateManager.consistencyCheck.podSecurityContext | nindent 12 }}
          restartPolicy: OnFailure
          containers:
          - name: consistency-check
            image: "{{ .Values.globalDistributedCertificateManager.consistencyCheck.image.repository }}:{{ .Values.globalDistributedCertificateManager.consistencyCheck.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.globalDistributedCertificateManager.consistencyCheck.image.pullPolicy }}
            securityContext:
              {{- toYaml .Values.globalDistributedCertificateManager.consistencyCheck.securityContext | nindent 14 }}
            env:
            - name: CHECK_TYPE
              value: {{ .Values.globalDistributedCertificateManager.consistencyCheck.type | default "comprehensive" }}
            - name: AUTO_REPAIR
              value: {{ .Values.globalDistributedCertificateManager.consistencyCheck.autoRepair | default "true" | quote }}
            - name: REPAIR_THRESHOLD
              value: {{ .Values.globalDistributedCertificateManager.consistencyCheck.repairThreshold | default "10" | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.globalDistributedCertificateManager.consistencyCheck.logLevel | default "info" }}
            resources:
              {{- toYaml .Values.globalDistributedCertificateManager.consistencyCheck.resources | nindent 14 }}
            volumeMounts:
            - name: consistency-config
              mountPath: /etc/consistency-config
              readOnly: true
            - name: global-ca-certs
              mountPath: /etc/global-ca
              readOnly: true
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting certificate consistency check..."
              
              # Perform comprehensive consistency check
              /usr/local/bin/consistency-check verify \
                --config=/etc/consistency-config/config.yaml \
                --ca-certs=/etc/global-ca \
                --type=$CHECK_TYPE \
                --output=/tmp/consistency-report.json
              
              if [ $? -eq 0 ]; then
                echo "Consistency check completed successfully"
                
                # Check if repairs are needed
                INCONSISTENCIES=$(cat /tmp/consistency-report.json | jq '.inconsistencies | length')
                
                if [ "$INCONSISTENCIES" -gt 0 ] && [ "$AUTO_REPAIR" = "true" ] && [ "$INCONSISTENCIES" -le "$REPAIR_THRESHOLD" ]; then
                  echo "Found $INCONSISTENCIES inconsistencies, attempting automatic repair..."
                  
                  /usr/local/bin/consistency-check repair \
                    --config=/etc/consistency-config/config.yaml \
                    --report=/tmp/consistency-report.json \
                    --ca-certs=/etc/global-ca
                  
                  if [ $? -eq 0 ]; then
                    echo "Automatic repair completed successfully"
                  else
                    echo "Automatic repair failed, manual intervention required"
                    exit 1
                  fi
                elif [ "$INCONSISTENCIES" -gt "$REPAIR_THRESHOLD" ]; then
                  echo "Found $INCONSISTENCIES inconsistencies, exceeds repair threshold ($REPAIR_THRESHOLD)"
                  echo "Manual intervention required"
                  exit 1
                else
                  echo "No inconsistencies found or auto-repair disabled"
                fi
                
              else
                echo "Consistency check failed"
                exit 1
              fi
              
              echo "Certificate consistency check completed"
          volumes:
          - name: consistency-config
            configMap:
              name: {{ include "csr-controller.fullname" . }}-global-distributed-certificate-config
          - name: global-ca-certs
            secret:
              secretName: {{ include "csr-controller.fullname" . }}-global-ca-certs