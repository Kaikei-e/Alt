---
description: For Go projects, use the following rules
globs: "**/*.go"
alwaysApply: true
---

# Go - Security-First TDD Development Rules 2025

## Core Principles

You are an expert in Go, microservices architecture, clean backend development, and Test-Driven Development (TDD). Focus on writing secure, efficient, and maintainable code following Go idioms and best practices.

### Primary Goals
- **Security First**: Implement robust input validation and secure coding practices
- **Test-Driven Development**: Write tests before implementation
- **Performance**: Leverage Go's concurrency features effectively
- **Clean Architecture**: Follow Domain-Driven Design and SOLID principles
- **Observability**: Implement comprehensive logging, tracing, and metrics

## Code Style Guidelines

### Naming Conventions
```go
// Variables and functions: camelCase
userName := "Alice"
func getUserByID(id string) (*User, error)

// Exported types and functions: PascalCase
type UserService struct {}
func NewUserService() *UserService

// Constants: PascalCase or SCREAMING_SNAKE_CASE
const MaxRetries = 3
const DEFAULT_TIMEOUT = 30 * time.Second

// Interfaces: end with "er" suffix
type Reader interface {}
type UserRepository interface {}

// File names: snake_case
user_service.go
user_service_test.go
```

## Security Best Practices

### Input Validation
```go
import (
    "regexp"
    "unicode/utf8"
)

// Always validate and sanitize user input
func ValidateUserInput(input string) error {
    // Check length
    if len(input) == 0 || len(input) > 255 {
        return errors.New("input length must be between 1 and 255 characters")
    }

    // Check for valid UTF-8
    if !utf8.ValidString(input) {
        return errors.New("input must be valid UTF-8")
    }

    // Sanitize for specific patterns
    if matched, _ := regexp.MatchString(`[<>'"&]`, input); matched {
        return errors.New("input contains invalid characters")
    }

    return nil
}

// Use struct validation tags
type CreateUserRequest struct {
    Email    string `json:"email" validate:"required,email,max=255"`
    Username string `json:"username" validate:"required,alphanum,min=3,max=30"`
    Age      int    `json:"age" validate:"required,min=18,max=120"`
}
```

### SQL Injection Prevention
```go
// NEVER concatenate SQL strings
// BAD - vulnerable to SQL injection
query := fmt.Sprintf("SELECT * FROM users WHERE id = %s", userID)

// GOOD - use parameterized queries
query := "SELECT * FROM users WHERE id = $1"
err := db.QueryRow(query, userID).Scan(&user)

// Use query builders for complex queries
import "github.com/Masterminds/squirrel"

query, args, err := squirrel.
    Select("id", "username", "email").
    From("users").
    Where(squirrel.Eq{"status": "active"}).
    Limit(10).
    ToSql()
```

### Authentication & Authorization
```go
// Use JWT with proper validation
func ValidateJWT(tokenString string) (*Claims, error) {
    token, err := jwt.ParseWithClaims(tokenString, &Claims{}, func(token *jwt.Token) (interface{}, error) {
        // Verify signing algorithm
        if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
            return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
        }
        return jwtSecret, nil
    })

    if err != nil {
        return nil, err
    }

    if claims, ok := token.Claims.(*Claims); ok && token.Valid {
        // Additional validation
        if time.Now().Unix() > claims.ExpiresAt {
            return nil, errors.New("token expired")
        }
        return claims, nil
    }

    return nil, errors.New("invalid token")
}
```

### Cryptography
```go
// Use standard library or vetted packages
import (
    "crypto/rand"
    "crypto/subtle"
    "golang.org/x/crypto/bcrypt"
    "golang.org/x/crypto/nacl/box"
)

// Password hashing
func HashPassword(password string) (string, error) {
    // Use bcrypt with appropriate cost
    hash, err := bcrypt.GenerateFromPassword([]byte(password), 12)
    return string(hash), err
}

// Constant-time comparison for sensitive data
func SecureCompare(a, b []byte) bool {
    return subtle.ConstantTimeCompare(a, b) == 1
}
```

## Test-Driven Development

### Test Structure
```go
// Follow table-driven test pattern
func TestUserService_CreateUser(t *testing.T) {
    tests := []struct {
        name    string
        input   CreateUserRequest
        setup   func(*mocks.MockRepository)
        want    *User
        wantErr bool
    }{
        {
            name: "valid user creation",
            input: CreateUserRequest{
                Email:    "test@example.com",
                Username: "testuser",
            },
            setup: func(m *mocks.MockRepository) {
                m.EXPECT().
                    CreateUser(gomock.Any()).
                    Return(&User{ID: "123"}, nil)
            },
            want: &User{ID: "123"},
            wantErr: false,
        },
        {
            name: "duplicate email",
            input: CreateUserRequest{
                Email:    "existing@example.com",
                Username: "newuser",
            },
            setup: func(m *mocks.MockRepository) {
                m.EXPECT().
                    CreateUser(gomock.Any()).
                    Return(nil, ErrDuplicateEmail)
            },
            want:    nil,
            wantErr: true,
        },
    }

    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            // Arrange
            ctrl := gomock.NewController(t)
            defer ctrl.Finish()

            mockRepo := mocks.NewMockRepository(ctrl)
            tt.setup(mockRepo)

            service := NewUserService(mockRepo)

            // Act
            got, err := service.CreateUser(context.Background(), tt.input)

            // Assert
            if (err != nil) != tt.wantErr {
                t.Errorf("CreateUser() error = %v, wantErr %v", err, tt.wantErr)
                return
            }
            if !reflect.DeepEqual(got, tt.want) {
                t.Errorf("CreateUser() = %v, want %v", got, tt.want)
            }
        })
    }
}
```

### Integration Testing
```go
// Use testcontainers for database tests
func TestUserRepository_Integration(t *testing.T) {
    if testing.Short() {
        t.Skip("skipping integration test")
    }

    ctx := context.Background()

    // Start PostgreSQL container
    postgres, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{
        ContainerRequest: testcontainers.ContainerRequest{
            Image: "postgres:15-alpine",
            Env: map[string]string{
                "POSTGRES_PASSWORD": "test",
                "POSTGRES_DB":       "testdb",
            },
            ExposedPorts: []string{"5432/tcp"},
            WaitingFor:   wait.ForListeningPort("5432/tcp"),
        },
        Started: true,
    })
    require.NoError(t, err)
    defer postgres.Terminate(ctx)

    // Run migrations and tests
    // ...
}
```

### Benchmarking
```go
func BenchmarkUserService_GetUser(b *testing.B) {
    service := setupService()
    ctx := context.Background()

    b.ResetTimer()
    b.RunParallel(func(pb *testing.PB) {
        for pb.Next() {
            _, _ = service.GetUser(ctx, "user123")
        }
    })
}
```

## Error Handling

### Custom Error Types
```go
// Define domain-specific errors
type Error struct {
    Code    string
    Message string
    Err     error
}

func (e *Error) Error() string {
    if e.Err != nil {
        return fmt.Sprintf("%s: %s: %v", e.Code, e.Message, e.Err)
    }
    return fmt.Sprintf("%s: %s", e.Code, e.Message)
}

func (e *Error) Unwrap() error {
    return e.Err
}

// Sentinel errors
var (
    ErrNotFound      = &Error{Code: "NOT_FOUND", Message: "resource not found"}
    ErrUnauthorized  = &Error{Code: "UNAUTHORIZED", Message: "unauthorized access"}
    ErrInvalidInput  = &Error{Code: "INVALID_INPUT", Message: "invalid input provided"}
)

// Error wrapping
func GetUser(id string) (*User, error) {
    user, err := db.FindUser(id)
    if err != nil {
        if errors.Is(err, sql.ErrNoRows) {
            return nil, ErrNotFound
        }
        return nil, fmt.Errorf("failed to get user: %w", err)
    }
    return user, nil
}
```

### HTTP Error Responses
```go
type ErrorResponse struct {
    Error ErrorDetail `json:"error"`
}

type ErrorDetail struct {
    Code    string `json:"code"`
    Message string `json:"message"`
    Details any    `json:"details,omitempty"`
}

func WriteError(w http.ResponseWriter, err error) {
    var appErr *Error
    if errors.As(err, &appErr) {
        switch appErr.Code {
        case "NOT_FOUND":
            w.WriteHeader(http.StatusNotFound)
        case "UNAUTHORIZED":
            w.WriteHeader(http.StatusUnauthorized)
        case "INVALID_INPUT":
            w.WriteHeader(http.StatusBadRequest)
        default:
            w.WriteHeader(http.StatusInternalServerError)
        }

        json.NewEncoder(w).Encode(ErrorResponse{
            Error: ErrorDetail{
                Code:    appErr.Code,
                Message: appErr.Message,
            },
        })
        return
    }

    // Default error
    w.WriteHeader(http.StatusInternalServerError)
    json.NewEncoder(w).Encode(ErrorResponse{
        Error: ErrorDetail{
            Code:    "INTERNAL_ERROR",
            Message: "An unexpected error occurred",
        },
    })
}
```

## Concurrency Patterns

### Context Usage
```go
// Always accept context as first parameter
func ProcessUser(ctx context.Context, userID string) error {
    // Set timeout for operation
    ctx, cancel := context.WithTimeout(ctx, 30*time.Second)
    defer cancel()

    // Check context cancellation
    select {
    case <-ctx.Done():
        return ctx.Err()
    default:
    }

    // Pass context to all operations
    user, err := getUserFromDB(ctx, userID)
    if err != nil {
        return err
    }

    return processUserData(ctx, user)
}
```

### Worker Pool Pattern
```go
type Job struct {
    ID   string
    Data interface{}
}

type Result struct {
    JobID string
    Data  interface{}
    Err   error
}

func WorkerPool(ctx context.Context, jobs <-chan Job, numWorkers int) <-chan Result {
    results := make(chan Result)

    var wg sync.WaitGroup
    wg.Add(numWorkers)

    for i := 0; i < numWorkers; i++ {
        go func() {
            defer wg.Done()
            for {
                select {
                case job, ok := <-jobs:
                    if !ok {
                        return
                    }
                    result := processJob(ctx, job)
                    select {
                    case results <- result:
                    case <-ctx.Done():
                        return
                    }
                case <-ctx.Done():
                    return
                }
            }
        }()
    }

    go func() {
        wg.Wait()
        close(results)
    }()

    return results
}
```

### Rate Limiting
```go
import "golang.org/x/time/rate"

// Per-user rate limiting
type RateLimiter struct {
    visitors map[string]*rate.Limiter
    mu       sync.RWMutex
    rate     rate.Limit
    burst    int
}

func (rl *RateLimiter) GetLimiter(key string) *rate.Limiter {
    rl.mu.RLock()
    limiter, exists := rl.visitors[key]
    rl.mu.RUnlock()

    if !exists {
        rl.mu.Lock()
        limiter = rate.NewLimiter(rl.rate, rl.burst)
        rl.visitors[key] = limiter
        rl.mu.Unlock()
    }

    return limiter
}

func (rl *RateLimiter) RateLimitMiddleware(next http.HandlerFunc) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        limiter := rl.GetLimiter(r.RemoteAddr)
        if !limiter.Allow() {
            http.Error(w, "Too Many Requests", http.StatusTooManyRequests)
            return
        }
        next(w, r)
    }
}
```

## Database Patterns

### Connection Pool Management
```go
func NewDB(cfg *Config) (*sql.DB, error) {
    db, err := sql.Open("postgres", cfg.DatabaseURL)
    if err != nil {
        return nil, fmt.Errorf("failed to open database: %w", err)
    }

    // Configure connection pool
    db.SetMaxOpenConns(25)
    db.SetMaxIdleConns(5)
    db.SetConnMaxLifetime(5 * time.Minute)
    db.SetConnMaxIdleTime(10 * time.Minute)

    // Verify connection
    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()

    if err := db.PingContext(ctx); err != nil {
        return nil, fmt.Errorf("failed to ping database: %w", err)
    }

    return db, nil
}
```

### Transaction Management
```go
func (r *UserRepository) CreateUserWithProfile(ctx context.Context, user *User, profile *Profile) error {
    tx, err := r.db.BeginTx(ctx, nil)
    if err != nil {
        return fmt.Errorf("failed to begin transaction: %w", err)
    }
    defer tx.Rollback() // Will be no-op if committed

    // Create user
    userID, err := r.createUserTx(ctx, tx, user)
    if err != nil {
        return fmt.Errorf("failed to create user: %w", err)
    }

    // Create profile
    profile.UserID = userID
    if err := r.createProfileTx(ctx, tx, profile); err != nil {
        return fmt.Errorf("failed to create profile: %w", err)
    }

    // Commit transaction
    if err := tx.Commit(); err != nil {
        return fmt.Errorf("failed to commit transaction: %w", err)
    }

    return nil
}
```

## API Development

### RESTful Endpoints with Go 1.22+ ServeMux
```go
func NewRouter(h *Handlers) *http.ServeMux {
    mux := http.NewServeMux()

    // Middleware chain
    withAuth := Middleware(AuthMiddleware)
    withLogging := Middleware(LoggingMiddleware)
    withRateLimit := Middleware(RateLimitMiddleware)

    // User routes
    mux.HandleFunc("GET /api/v1/users/{id}", withLogging(h.GetUser))
    mux.HandleFunc("POST /api/v1/users", withLogging(withRateLimit(h.CreateUser)))
    mux.HandleFunc("PUT /api/v1/users/{id}", withLogging(withAuth(h.UpdateUser)))
    mux.HandleFunc("DELETE /api/v1/users/{id}", withLogging(withAuth(h.DeleteUser)))

    // Health check
    mux.HandleFunc("GET /health", h.HealthCheck)

    return mux
}

// Extract path parameters
func (h *Handlers) GetUser(w http.ResponseWriter, r *http.Request) {
    userID := r.PathValue("id")
    if userID == "" {
        WriteError(w, ErrInvalidInput)
        return
    }

    // Process request...
}
```

### Request/Response Handling
```go
// Generic JSON response helper
func WriteJSON(w http.ResponseWriter, status int, data any) error {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(status)

    if err := json.NewEncoder(w).Encode(data); err != nil {
        log.Printf("Failed to encode response: %v", err)
        return err
    }
    return nil
}

// Request decoding with validation
func DecodeAndValidate[T any](r *http.Request) (T, error) {
    var payload T

    // Limit request body size
    r.Body = http.MaxBytesReader(nil, r.Body, 1<<20) // 1MB

    decoder := json.NewDecoder(r.Body)
    decoder.DisallowUnknownFields()

    if err := decoder.Decode(&payload); err != nil {
        return payload, fmt.Errorf("invalid JSON: %w", err)
    }

    // Validate using struct tags
    if err := validate.Struct(payload); err != nil {
        return payload, fmt.Errorf("validation failed: %w", err)
    }

    return payload, nil
}
```

## Observability

### Structured Logging
```go
import "log/slog"

// Configure structured logging
func SetupLogger(env string) *slog.Logger {
    var handler slog.Handler

    switch env {
    case "production":
        handler = slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
            Level: slog.LevelInfo,
        })
    default:
        handler = slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{
            Level: slog.LevelDebug,
        })
    }

    return slog.New(handler)
}

// Log with context
func (s *UserService) CreateUser(ctx context.Context, req CreateUserRequest) (*User, error) {
    logger := slog.With(
        "operation", "CreateUser",
        "username", req.Username,
    )

    logger.Info("creating user")

    user, err := s.repo.CreateUser(ctx, req)
    if err != nil {
        logger.Error("failed to create user", "error", err)
        return nil, err
    }

    logger.Info("user created successfully", "userID", user.ID)
    return user, nil
}
```

### OpenTelemetry Integration
```go
import (
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/trace"
    "go.opentelemetry.io/otel/metric"
)

// Tracer setup
func InitTracer(serviceName string) (func(), error) {
    exporter, err := jaeger.New(jaeger.WithCollectorEndpoint())
    if err != nil {
        return nil, err
    }

    tp := trace.NewTracerProvider(
        trace.WithBatcher(exporter),
        trace.WithResource(resource.NewWithAttributes(
            semconv.SchemaURL,
            semconv.ServiceNameKey.String(serviceName),
        )),
    )

    otel.SetTracerProvider(tp)

    return func() {
        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
        defer cancel()
        tp.Shutdown(ctx)
    }, nil
}

// Trace operations
func (s *UserService) GetUser(ctx context.Context, id string) (*User, error) {
    ctx, span := otel.Tracer("user-service").Start(ctx, "GetUser")
    defer span.End()

    span.SetAttributes(
        attribute.String("user.id", id),
    )

    user, err := s.repo.GetUser(ctx, id)
    if err != nil {
        span.RecordError(err)
        return nil, err
    }

    return user, nil
}
```

### Metrics
```go
// Prometheus metrics
var (
    requestDuration = prometheus.NewHistogramVec(
        prometheus.HistogramOpts{
            Name: "http_request_duration_seconds",
            Help: "HTTP request latencies in seconds.",
        },
        []string{"method", "endpoint", "status"},
    )

    requestsTotal = prometheus.NewCounterVec(
        prometheus.CounterOpts{
            Name: "http_requests_total",
            Help: "Total number of HTTP requests.",
        },
        []string{"method", "endpoint", "status"},
    )
)

func MetricsMiddleware(next http.HandlerFunc) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        start := time.Now()

        wrapped := &responseWriter{ResponseWriter: w, statusCode: http.StatusOK}

        next(wrapped, r)

        duration := time.Since(start).Seconds()
        status := strconv.Itoa(wrapped.statusCode)

        requestDuration.WithLabelValues(r.Method, r.URL.Path, status).Observe(duration)
        requestsTotal.WithLabelValues(r.Method, r.URL.Path, status).Inc()
    }
}
```

## Performance Optimization

### Profiling
```go
import _ "net/http/pprof"

func main() {
    // Enable profiling endpoint in development
    if os.Getenv("ENABLE_PROFILING") == "true" {
        go func() {
            log.Println(http.ListenAndServe("localhost:6060", nil))
        }()
    }

    // Main application...
}

// CPU profiling in tests
func BenchmarkCriticalPath(b *testing.B) {
    if *cpuprofile != "" {
        f, _ := os.Create(*cpuprofile)
        pprof.StartCPUProfile(f)
        defer pprof.StopCPUProfile()
    }

    // Benchmark code...
}
```

### Memory Management
```go
// Object pooling for frequently allocated objects
var bufferPool = sync.Pool{
    New: func() interface{} {
        return new(bytes.Buffer)
    },
}

func ProcessData(data []byte) string {
    buf := bufferPool.Get().(*bytes.Buffer)
    defer func() {
        buf.Reset()
        bufferPool.Put(buf)
    }()

    buf.Write(data)
    // Process buffer...

    return buf.String()
}

// Preallocate slices
func GetUsers(ids []string) []*User {
    users := make([]*User, 0, len(ids)) // Preallocate capacity
    for _, id := range ids {
        if user, err := getUser(id); err == nil {
            users = append(users, user)
        }
    }
    return users
}
```

## Build and Deployment

### Makefile
```makefile
.PHONY: build test lint clean

# Variables
BINARY_NAME=api
GO_FILES=$(shell find . -name '*.go' -type f)

# Build
build:
	CGO_ENABLED=0 go build -ldflags="-s -w" -o $(BINARY_NAME) cmd/api/main.go

# Test
test:
	go test -v -race -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html

# Benchmark
bench:
	go test -bench=. -benchmem ./...

# Lint
lint:
	golangci-lint run --timeout=5m

# Security scan
security:
	gosec ./...
	go list -json -deps | nancy sleuth

# Format
fmt:
	gofmt -s -w .
	goimports -w .

# Clean
clean:
	go clean
	rm -f $(BINARY_NAME) coverage.out coverage.html
```

### Dockerfile
```dockerfile
# Build stage
FROM golang:1.24-alpine AS builder

RUN apk add --no-cache git

WORKDIR /app

COPY go.mod go.sum ./
RUN go mod download

COPY . .

RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-s -w" -o api cmd/api/main.go

# Final stage
FROM scratch

COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /app/api /api

EXPOSE 8080

ENTRYPOINT ["/api"]
```

## Code Review Checklist

Before committing code, ensure:
- [ ] All tests pass (`go test ./...`)
- [ ] No race conditions (`go test -race ./...`)
- [ ] Code is formatted (`gofmt -s -l .`)
- [ ] No linting issues (`golangci-lint run`)
- [ ] Security scan passes (`gosec ./...`)
- [ ] Test coverage > 80% (`go test -cover ./...`)
- [ ] Benchmarks show no regression
- [ ] All inputs are validated
- [ ] Errors are properly handled and wrapped
- [ ] Concurrent code is properly synchronized
- [ ] Context is propagated through call stack
- [ ] Metrics and logs are properly instrumented
- [ ] Documentation is updated
- [ ] No sensitive data in logs
