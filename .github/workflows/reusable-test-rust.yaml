name: Reusable Rust Test Workflow
on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      toolchain:
        required: false
        type: string
        default: "stable"
      upload-coverage:
        required: false
        type: boolean
        default: true
      coverage-flags:
        required: false
        type: string

jobs:
  test:
    runs-on: [self-hosted, macOS, ARM64]
    timeout-minutes: 30
    steps:
      - name: Configure logging
        if: runner.environment == 'self-hosted'
        run: |
          echo "::group::Masking Configuration"
          PARTS=($(echo $HOME | tr '/' ' '))
          for part in "${PARTS[@]}"; do
            [ ! -z "$part" ] && echo "::add-mask::$part"
          done
          echo "::endgroup::"

      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          profile: minimal

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ inputs.working-directory }}
        env:
          ACTIONS_STEP_DEBUG: false

      - name: Build (release)
        working-directory: ${{ inputs.working-directory }}
        run: cargo build --release

      - name: Run clippy
        working-directory: ${{ inputs.working-directory }}
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run unit tests
        working-directory: ${{ inputs.working-directory }}
        run: cargo test --all --verbose

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        working-directory: ${{ inputs.working-directory }}
        run: cargo tarpaulin --out Xml

      - name: Upload coverage to Codecov
        if: inputs.upload-coverage
        uses: codecov/codecov-action@v3
        with:
          file: ${{ inputs.working-directory }}/tarpaulin-report.xml
          flags: ${{ inputs.coverage-flags }}
          name: ${{ inputs.coverage-flags }}-coverage
          verbose: false