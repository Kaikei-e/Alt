name: Alt Frontend Playwright Workflow

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      node-version:
        required: false
        type: string
        default: "24"
      pnpm-version:
        required: false
        type: string
        default: "10"
      test-type:
        required: false
        type: string
        default: "playwright"
  workflow_dispatch:
    inputs:
      working-directory:
        description: 'Working directory for the test'
        required: true
        type: string
        default: "alt-frontend"
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: "24"
      pnpm-version:
        description: 'pnpm version to use'
        required: false
        type: string
        default: "10"
      test-type:
        description: 'Type of test to run'
        required: false
        type: string
        default: "playwright"

permissions:
  contents: read

jobs:
  e2e:
    runs-on: [self-hosted, linux, X64]
    timeout-minutes: 60

    strategy:
      matrix:
        shardIndex: [1, 2, 3]
        shardTotal: [3]
      fail-fast: false

    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    env:
      CI: true
      FORCE_COLOR: "1"
      # ブラウザをキャッシュ可能な場所へ（Linux: ~/.cache/ms-playwright でもOK）
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/playwright-browsers

    steps:
      - uses: actions/checkout@v4

      - name: Verify working directory
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory exists: $(test -d "${{ inputs.working-directory }}" && echo "yes" || echo "no")"
          ls -la ${{ inputs.working-directory }} || echo "Directory listing failed"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ inputs.pnpm-version }}
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: pnpm
          cache-dependency-path: ${{ inputs.working-directory }}/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # ブラウザバイナリをキャッシュ（Playwrightは“積極推奨ではない”が、自己ホスト環境なら有効なこと多い）
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-pw-browsers-${{ hashFiles(format('{0}/pnpm-lock.yaml', inputs.working-directory)) }}
          restore-keys: |
            ${{ runner.os }}-pw-browsers-

      - name: Install Playwright browsers
        run: |
          # Wait for any existing package manager processes to finish
          echo "Waiting for package manager locks to be released..."
          while sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || sudo lsof /var/lib/apt/lists/lock >/dev/null 2>&1; do
            echo "Lock detected, waiting 10 seconds..."
            sleep 10
          done

          # Install Playwright browsers with retry logic
          for attempt in 1 2 3; do
            echo "Attempt $attempt to install Playwright browsers..."
            if pnpm exec playwright install --with-deps; then
              echo "Successfully installed Playwright browsers"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "Failed to install after 3 attempts"
                exit 1
              fi
              echo "Installation failed, waiting 30 seconds before retry..."
              sleep 30
            fi
          done

      # シャーディングで高速化（要: playwright.config.ts で CI 時 reporter を 'blob' に）
      - name: Run Playwright (shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }})
        run: |
          pnpm exec playwright test \
            --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Upload shard blob report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pw-blob-${{ matrix.shardIndex }}
          path: blob-report
          if-no-files-found: ignore
          retention-days: 2

  merge-playwright-reports:
    needs: e2e
    runs-on: [self-hosted, linux, X64]

    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: pw-blob-*
          merge-multiple: true

      # blob を統合して HTML レポート生成（Playwright 公式の merge-reports）
      - name: Merge blob reports -> HTML
        run: pnpm exec playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload merged HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_id }}-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 7
