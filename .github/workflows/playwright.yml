name: Alt Frontend Playwright Workflow

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      node-version:
        required: false
        type: string
        default: "24"
      pnpm-version:
        required: false
        type: string
        default: "10"
      test-type:
        required: false
        type: string
        default: "playwright"
  workflow_dispatch:
    inputs:
      working-directory:
        description: 'Working directory for the test'
        required: true
        type: string
        default: "alt-frontend"
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: "24"
      pnpm-version:
        description: 'pnpm version to use'
        required: false
        type: string
        default: "10"
      test-type:
        description: 'Type of test to run'
        required: false
        type: string
        default: "playwright"

permissions:
  contents: read

jobs:
  e2e:
    runs-on: [self-hosted, linux, X64]
    timeout-minutes: 60

    env:
      CI: true
      FORCE_COLOR: "1"
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/playwright-browsers

    steps:
      - uses: actions/checkout@v4

      - name: Mask sensitive paths
        run: |
          echo "::add-mask::$HOME"
          echo "::add-mask::$(whoami)"
          RUNNER_BASE=$(pwd | cut -d'/' -f1-5)
          echo "::add-mask::$RUNNER_BASE"
          WORKSPACE_PATH=$(pwd | sed 's|/alt-frontend||')
          echo "::add-mask::$WORKSPACE_PATH"
          echo "::add-mask::$(echo $HOME | cut -d'/' -f1-3)"

      - name: Enable pnpm via Corepack
        run: |
          corepack enable
          corepack prepare pnpm@${{ inputs.pnpm-version }} --activate

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: pnpm
          cache-dependency-path: ${{ inputs.working-directory }}/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-pw-browsers-${{ hashFiles(format('{0}/pnpm-lock.yaml', inputs.working-directory)) }}
          restore-keys: |
            ${{ runner.os }}-pw-browsers-

      - name: Install Playwright browsers
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "Waiting for package manager locks to be released..."
          while sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || sudo lsof /var/lib/apt/lists/lock >/dev/null 2>&1; do
            echo "Lock detected, waiting 10 seconds..."
            sleep 10
          done

          for attempt in 1 2 3; do
            echo "Attempt $attempt to install Playwright browsers..."
            if pnpm exec playwright install --with-deps; then
              echo "Successfully installed Playwright browsers"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "Failed to install after 3 attempts"
                exit 1
              fi
              echo "Installation failed, waiting 30 seconds before retry..."
              sleep 30
            fi
          done

      - name: Run Playwright tests
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "Running Playwright E2E tests..."
          pnpm exec playwright test --reporter=html,json,list

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_id }}
          path: ${{ inputs.working-directory }}/playwright-report
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ github.run_id }}
          path: ${{ inputs.working-directory }}/test-results
          retention-days: 3
          if-no-files-found: ignore
