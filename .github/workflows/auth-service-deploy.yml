# .github/workflows/auth-service-deploy.yml
name: Deploy Auth Service

permissions:
  contents: read
  deployments: write

on:
  push:
    branches: [main]
    paths: ['auth-service/**']
  pull_request:
    branches: [main]
    paths: ['auth-service/**']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: alt/auth-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests
      run: |
        cd auth-service
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: auth-service/coverage.html

    - name: Check coverage threshold
      run: |
        cd auth-service
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage $COVERAGE% is below 80% threshold"
          exit 1
        fi

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'auth-service'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: auth-service
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.14.0

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config

    - name: Deploy to staging with Helm
      run: |
        cd k8s-manifests

        # Extract image tag from built image
        IMAGE_TAG=$(echo "${{ needs.build.outputs.image }}" | cut -d':' -f2)

        # Deploy auth-service with Helm
        helm upgrade --install auth-service ../charts/auth-service \
          -n alt-staging \
          -f ../charts/auth-service/values-staging.yaml \
          --set image.tag="$IMAGE_TAG" \
          --set image.repository="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" \
          --create-namespace \
          --wait --timeout=300s

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/auth-service -n alt-staging --timeout=300s

    - name: Run health check
      run: |
        kubectl run health-check --image=curlimages/curl:8.4.0 --rm -i --restart=Never -- \
          curl -f http://auth-service.alt-staging.svc.cluster.local:8080/health

  deploy-production:
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.14.0

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

    - name: Deploy to production with Helm
      run: |
        cd k8s-manifests

        # Extract image tag from built image
        IMAGE_TAG=$(echo "${{ needs.build.outputs.image }}" | cut -d':' -f2)

        # Deploy auth-service to production with Helm
        helm upgrade --install auth-service ../charts/auth-service \
          -n alt-auth \
          -f ../charts/auth-service/values-production.yaml \
          --set image.tag="$IMAGE_TAG" \
          --set image.repository="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" \
          --create-namespace \
          --wait --timeout=600s

    - name: Verify production deployment
      run: |
        kubectl rollout status deployment/auth-service -n alt-auth --timeout=300s

    - name: Run production health check
      run: |
        kubectl run health-check-prod --image=curlimages/curl:8.4.0 --rm -i --restart=Never -n alt-auth -- \
          curl -f http://auth-service.alt-auth.svc.cluster.local:8080/health

    - name: Post-deployment verification
      run: |
        echo "üîç Verifying deployment..."

        # Check Helm release status
        helm status auth-service -n alt-auth

        # Check pod status
        kubectl get pods -n alt-auth -l app.kubernetes.io/name=auth-service

        # Check service endpoints
        kubectl get endpoints -n alt-auth auth-service

        echo "‚úÖ Production deployment completed successfully"