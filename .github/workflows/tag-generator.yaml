name: Tag Generator Tests

on:
  push:
    branches: [ main, master ]
    paths:
      - 'tag-generator/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'tag-generator/**'
  workflow_dispatch:

# 同一ブランチ/PR の古い実行をキャンセル
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read

jobs:
  determine-runner-integration:
    name: Determine which runner to use for integration tests
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.set-runner.outputs.runner }}
      runner-json: ${{ steps.format-runner.outputs.runner-json }}
    steps:
      - name: Determine which runner to use
        id: set-runner
        uses: benjaminmichaelis/get-soonest-available-runner@v1.1.0
        with:
          primary-runner: "m222"
          fallback-runner: "ubuntu-latest"
          min-available-runners: 1
          github-token: ${{ secrets.RUNNER_TOKEN }}
      - name: Format runner output
        id: format-runner
        run: |
          RUNNER="${{ steps.set-runner.outputs.runner }}"
          if [ "$RUNNER" = "m222" ]; then
            # セルフホストランナーの場合はラベルの配列として出力
            echo 'runner-json=["self-hosted", "macOS", "ARM64"]' >> $GITHUB_OUTPUT
          else
            # ubuntu-latestの場合は文字列として出力
            echo 'runner-json="ubuntu-latest"' >> $GITHUB_OUTPUT
          fi

  test:
    needs: determine-runner-integration
    runs-on: ${{ fromJSON(needs.determine-runner-integration.outputs.runner-json) }}
    strategy:
      matrix:
        python: ["3.13"]
    defaults:
      run:
        working-directory: tag-generator/app

    steps:
    - name: Configure logging
      if: runner.environment == 'self-hosted'
      run: |
        # GitHubのログ機能を使って、特定のセクションを非表示に
        echo "::group::Masking Configuration"

        # ここでマスキング設定（この部分は折りたたまれる）
        PARTS=($(echo $HOME | tr '/' ' '))
        for part in "${PARTS[@]}"; do
          [ ! -z "$part" ] && echo "::add-mask::$part"
        done

        echo "::endgroup::"

        # 以降のコマンドでデバッグ出力を抑制
        echo "::debug::Masking completed"
      working-directory: .  # デフォルトの working-directory を上書き

    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: |
          tag-generator/app/pyproject.toml
          tag-generator/app/uv.lock
      env:
        # キャッシュの詳細ログを抑制
        ACTIONS_STEP_DEBUG: false

    - name: Install dependencies
      run: |
        uv sync --frozen

    - name: Run tests
      run: |
        uv run python -m pytest test_unit.py -v --junit-xml=tests/results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-test-results
        path: tag-generator/app/tests/results.xml
        retention-days: 5