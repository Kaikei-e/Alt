name: Reusable Python Test Workflow
permissions:
  contents: read
  actions: read
on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      python-version:
        required: false
        type: string
        default: "3.13"
      test-command:
        required: false
        type: string
        default: "uv run python -m pytest test_unit.py -v --junit-xml=tests/results.xml"

jobs:
  test:
    runs-on: [self-hosted, macOS, ARM64]
    timeout-minutes: 30
    env:
      # ツールキャッシュディレクトリを明示的に設定
      AGENT_TOOLSDIRECTORY: $RUNNER_TEMP/hostedtoolcache
    steps:
      - name: Configure logging
        if: runner.environment == 'self-hosted'
        run: |
          echo "::group::Masking Configuration"
          PARTS=($(echo $HOME | tr '/' ' '))
          for part in "${PARTS[@]}"; do
            [ ! -z "$part" ] && echo "::add-mask::$part"
          done
          echo "::endgroup::"

      - name: Setup environment
        run: |
          # デバッグ情報
          echo "Current user: $(whoami)"
          echo "Home directory: $HOME"
          echo "Runner temp: ${{ runner.temp }}"
          echo "GitHub workspace: ${{ github.workspace }}"

          # 必要なディレクトリを作成
          mkdir -p "$RUNNER_TEMP/hostedtoolcache"
          mkdir -p "$RUNNER_TEMP/pip-cache"
          mkdir -p "$RUNNER_TEMP/uv-cache"

      - uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: |
          # pipをアップグレード
          python -m pip install --upgrade pip --user

          # uvをインストール
          python -m pip install --user uv

          # PATHを更新
          export PATH="$HOME/.local/bin:$PATH"

          # 依存関係をインストール
          if [ -f "requirements.txt" ]; then
            python -m pip install -r requirements.txt --user
          fi

          # pytestをインストール
          python -m pip install --user pytest pytest-cov

          # テストディレクトリを作成
          mkdir -p tests

      - name: Run tests
        working-directory: ${{ inputs.working-directory }}
        run: |
          # PATHを更新
          export PATH="$HOME/.local/bin:$PATH"

          # テストを実行
          python -m pytest test_unit.py -v --junit-xml=tests/results.xml || true

          # 結果を確認
          if [ ! -f "tests/results.xml" ]; then
            mkdir -p tests
            echo '<?xml version="1.0" encoding="UTF-8"?><testsuites></testsuites>' > tests/results.xml
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-test-results-${{ github.run_id }}
          path: ${{ inputs.working-directory }}/tests/
          retention-days: 5
          if-no-files-found: warn