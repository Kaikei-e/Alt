name: Reusable Go Test Workflow
permissions:
  contents: read
  actions: read
on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      go-version:
        required: false
        type: string
        default: "1.24"
      upload-coverage:
        required: false
        type: boolean
        default: true
      coverage-flags:
        required: false
        type: string

jobs:
  test:
    runs-on: [self-hosted, macOS, ARM64]
    timeout-minutes: 30
    steps:
      - name: Configure logging
        if: runner.environment == 'self-hosted'
        run: |
          echo "::group::Masking Configuration"
          PARTS=($(echo $HOME | tr '/' ' '))
          for part in "${PARTS[@]}"; do
            [ ! -z "$part" ] && echo "::add-mask::$part"
          done
          echo "::endgroup::"

      - name: Clean workspace
        if: runner.environment == 'self-hosted'
        run: |
          # キャッシュディレクトリの権限を修正
          sudo chown -R $(whoami):staff ~/go || true
          sudo chown -R $(whoami):staff ~/.cache || true
          # 古いキャッシュをクリーンアップ（オプション）
          find ~/go/pkg/mod -type d -name ".git" -exec rm -rf {} + 2>/dev/null || true
          find ~/.cache/go-build -type f -atime +7 -delete 2>/dev/null || true

      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
          cache: false  # 手動でキャッシュを管理

      - name: Manual Go cache handling
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-test-${{ hashFiles(format('{0}/go.sum', inputs.working-directory)) }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-go-test-${{ hashFiles(format('{0}/go.sum', inputs.working-directory)) }}-
            ${{ runner.os }}-go-test-
        env:
          ACTIONS_STEP_DEBUG: false
        continue-on-error: true  # キャッシュエラーでも継続

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: |
          go mod download
          go mod tidy

      - name: Run go vet
        working-directory: ${{ inputs.working-directory }}
        run: go vet ./...

      - name: Run tests with coverage
        working-directory: ${{ inputs.working-directory }}
        run: go test -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        if: inputs.upload-coverage
        uses: codecov/codecov-action@v3
        with:
          file: ${{ inputs.working-directory }}/coverage.out
          flags: ${{ inputs.coverage-flags }}
          name: ${{ inputs.coverage-flags }}-coverage
          verbose: false

      - name: Post-job cleanup
        if: always() && runner.environment == 'self-hosted'
        run: |
          # ジョブ終了後のクリーンアップ
          go clean -cache || true
          go clean -modcache || true