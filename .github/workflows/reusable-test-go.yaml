name: Reusable Go Test Workflow

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      go-version:
        required: false
        type: string
        default: ""
      coverage-flags:
        required: false
        type: string
        default: ""
      use-oidc:
        required: false
        type: boolean
        default: false
      use-local-persistent-cache:
        required: false
        type: boolean
        default: false
      upload-coverage:
        required: false
        type: boolean
        default: true
      sparse-checkout:
        required: false
        type: string
        default: 'alt-backend'  # 呼び出し側で 'search-indexer' 等に上書き推奨

  workflow_dispatch:

# 最小権限（OIDCを使うかは呼び出し側で決める。使うときは親ジョブで id-token: write を付与）
permissions:
  contents: read

jobs:
  test-go:
    runs-on: [self-hosted, linux, X64]
    timeout-minutes: 30

    defaults:
      run:
        shell: bash

    steps:
      - name: Configure logging (mask)
        if: runner.environment == 'self-hosted'
        run: |
          echo "::group::Masking Configuration"
          # Mask HOME parts
          for part in $(echo "$HOME" | tr '/' ' '); do
            [ -n "$part" ] && echo "::add-mask::$part"
          done
          # Mask user/host (Linux用。macOSコマンドは一応エラー無視)
          echo "::add-mask::$(whoami)"
          echo "::add-mask::$(hostname)"
          echo "::add-mask::$(hostname -s || true)"
          (scutil --get ComputerName || true)    | xargs -I{} echo "::add-mask::{}"
          (scutil --get LocalHostName || true)   | xargs -I{} echo "::add-mask::{}"
          echo "::add-mask::${{ runner.temp }}"
          echo "::add-mask::${{ github.workspace }}"
          echo "::endgroup::"

      - name: Checkout (sparse)
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
          sparse-checkout: |
            ${{ inputs.sparse-checkout }}
          sparse-checkout-cone-mode: true
        # このアクションは $GITHUB_WORKSPACE (= ${{ github.workspace }}) 配下にチェックアウトする

      - name: Set up Go (with built-in cache)
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          go-version-file: ${{ inputs.go-version == '' && format('{0}/go.mod', inputs.working-directory) || '' }}
          check-latest: true
          cache: true   # go modules とビルド出力を標準機能でキャッシュ

      # ===== キャッシュ戦略 =====
      # 1) ローカル永続キャッシュ（sudo不要でHOME配下に固定）
      - name: Configure local persistent caches (HOME)
        if: ${{ inputs.use-local-persistent-cache }}
        run: |
          mkdir -p "$HOME/.cache/go-build" "$HOME/go/pkg/mod"
          echo "GOCACHE=$HOME/.cache/go-build" >> "$GITHUB_ENV"
          echo "GOMODCACHE=$HOME/go/pkg/mod"   >> "$GITHUB_ENV"

      # 2) ランナーがエフェメラル等でHOME永続化できない場合は、GitHub Cacheを併用
      - name: Restore Go module cache (GitHub Cache)
        if: ${{ !inputs.use-local-persistent-cache }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles(format('{0}/go.sum', inputs.working-directory)) }}
          restore-keys: |
            go-${{ runner.os }}-

      - name: Go env (diagnostics)
        run: |
          go env
          echo "GOCACHE=${GOCACHE:-$(go env GOCACHE)}"
          echo "GOMODCACHE=${GOMODCACHE:-$(go env GOMODCACHE)}"
          echo "github.workspace=${{ github.workspace }}"
          ls -la "${{ github.workspace }}/${{ inputs.working-directory }}" || true

      - name: Test
        working-directory: ${{ github.workspace }}/${{ inputs.working-directory }}
        env:
          CGO_ENABLED: "1"
        run: |
          go test ./... -count=1 -race -covermode=atomic -coverprofile=coverage.out

      # === Codecov: OIDC か token を選択 ===
      - name: Upload coverage to Codecov (OIDC)
        if: ${{ always() && inputs.upload-coverage && inputs.use-oidc }}
        uses: codecov/codecov-action@v5
        with:
          use_oidc: true
          files: ${{ github.workspace }}/${{ inputs.working-directory }}/coverage.out
          flags: ${{ inputs.coverage-flags }}
          name: ${{ inputs.coverage-flags }}-coverage
          verbose: false

      - name: Upload coverage to Codecov (token)
        if: ${{ always() && inputs.upload-coverage && !inputs.use-oidc }}
        uses: codecov/codecov-action@v5
        with:
          files: ${{ github.workspace }}/${{ inputs.working-directory }}/coverage.out
          flags: ${{ inputs.coverage-flags }}
          name: ${{ inputs.coverage-flags }}-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: false

      - name: Cleanup (self-hosted)
        if: always() && runner.environment == 'self-hosted'
        run: |
          go clean -testcache
