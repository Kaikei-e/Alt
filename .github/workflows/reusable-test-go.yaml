name: Reusable Go Test Workflow

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      go-version:
        required: false
        type: string
        default: ""
      coverage-flags:
        required: false
        type: string
        default: ""
      use-local-persistent-cache:
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write

jobs:
  test-go:
    # self-hosted ランナー想定
    runs-on: self-hosted

    steps:
      - name: Checkout (sparse)
        uses: actions/checkout@v5
        with:
          # alt-backend だけをチェックアウトして無駄を削減
          sparse-checkout: |
            alt-backend
          sparse-checkout-cone-mode: true
          fetch-depth: 1
      # ^ v5はNode 24ランタイムで、Runner v2.327.1+ が必須。後述の注記を確認。

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          # go-version を指定しない場合、go-version-file を見る
          go-version: ${{ inputs.go-version }}
          go-version-file: ${{ inputs.go-version == '' && format('{0}/go.mod', inputs.working-directory) || '' }}
          check-latest: true

      # ===== キャッシュ戦略 =====
      # 1) ローカル永続キャッシュ（最速、ネット往復ゼロ）
      - name: Configure local persistent caches
        if: ${{ inputs.use-local-persistent-cache }}
        run: |
          mkdir -p /var/cache/gha/go-build /var/cache/gha/go-mod
          echo "GOCACHE=/var/cache/gha/go-build" >> $GITHUB_ENV
          echo "GOMODCACHE=/var/cache/gha/go-mod" >> $GITHUB_ENV

      # 2) GitHub Cache（ランナーがエフェメラルな場合）
      - name: Restore Go module cache (GitHub Cache)
        if: ${{ !inputs.use-local-persistent-cache }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles(format('{0}/go.sum', inputs.working-directory)) }}
          restore-keys: |
            go-${{ runner.os }}-

      - name: Go env (diagnostics)
        run: |
          go env
          echo "GOCACHE=${GOCACHE:-$(go env GOCACHE)}"
          echo "GOMODCACHE=${GOMODCACHE:-$(go env GOMODCACHE)}"

      - name: Test
        working-directory: ${{ inputs.working-directory }}
        env:
          # GOCACHE/GOMODCACHEは上記いずれかが設定
          CGO_ENABLED: "1"
        run: |
          go test ./... -count=1 -race -covermode=atomic -coverprofile=coverage.out

      - name: Upload coverage to Codecov (v5)
        if: always()
        uses: codecov/codecov-action@v5
        with:
          # v5は files（複数可）
          files: ${{ inputs.working-directory }}/coverage.out
          flags: ${{ inputs.coverage-flags }}
          name: ${{ inputs.coverage-flags }}-coverage
          verbose: false
          # public repo + OIDC なら token不要。private なら下行を有効化:
          # token: ${{ secrets.CODECOV_TOKEN }}

      - name: Cleanup (self-hosted)
        if: always() && runner.environment == 'self-hosted'
        run: |
          # ローカル永続キャッシュは残す。ビルドアーチファクトだけ掃除
          go clean -testcache
