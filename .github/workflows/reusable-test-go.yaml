name: Reusable Go Test Workflow

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      go-version:
        required: false
        type: string
        default: "1.24.3"
      upload-coverage:
        required: false
        type: boolean
        default: true
      coverage-flags:
        required: false
        type: string

jobs:
  test:
    runs-on: [self-hosted, linux, X64]
    timeout-minutes: 30

    steps:
      - name: Configure logging
        if: runner.environment == 'self-hosted'
        run: |
          echo "::group::Masking Configuration"

          # Mask HOME directory parts
          PARTS=($(echo $HOME | tr '/' ' '))
          for part in "${PARTS[@]}"; do
            [ ! -z "$part" ] && echo "::add-mask::$part"
          done

          # Mask machine name and user info
          echo "::add-mask::$(whoami)"
          echo "::add-mask::$(hostname)"
          echo "::add-mask::$(hostname -s)"
          echo "::add-mask::$(scutil --get ComputerName 2>/dev/null || echo '')"
          echo "::add-mask::$(scutil --get LocalHostName 2>/dev/null || echo '')"

          # Mask runner workspace paths
          echo "::add-mask::${{ runner.temp }}"
          echo "::add-mask::${{ github.workspace }}"

          echo "::endgroup::"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
          cache: false  # 手動キャッシュ管理

      - name: Configure GOCACHE
        run: echo "GOCACHE=$RUNNER_TEMP/go-cache" >> $GITHUB_ENV

      - name: Restore Go module cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles('go.sum') }}

      - name: Restore Go build cache
        uses: actions/cache@v3
        with:
          path: ${{ env.GOCACHE }}
          key: go-build-${{ runner.os }}-${{ hashFiles('go.sum') }}

      - name: Mask home path in logs
        if: runner.environment == 'self-hosted'
        run: |
          echo "::group::Masking HOME"
          MASKED="${HOME//'/'/'\/'}"
          echo "::add-mask::$MASKED"
          echo "::endgroup::"

      - name: Restore Go module cache
        uses: actions/cache@v3
        id: cache-mod
        with:
          path: ~/.cache/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles(format('{0}/go.sum', inputs.working-directory)) }}
          restore-keys: |
            go-mod-${{ runner.os }}-
        continue-on-error: true

      - name: Restore Go build cache
        uses: actions/cache@v3
        id: cache-build
        with:
          path: ${{ env.GOCACHE }}
          key: go-build-${{ runner.os }}-${{ hashFiles(format('{0}/go.sum', inputs.working-directory)) }}
          restore-keys: |
            go-build-${{ runner.os }}-
        continue-on-error: true

      - name: Clean workspace (self-hosted)
        if: runner.environment == 'self-hosted'
        run: |
          sudo chown -R $(whoami):$(whoami) ~/go ~/.cache/go-build || true
          find ~/.cache/go-build -type f -mtime +7 -delete || true

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: |
          go mod download
          go mod tidy

      - name: Run go vet
        working-directory: ${{ inputs.working-directory }}
        run: go vet ./...
        # vetエラーは必須修正なので停止

      - name: Run tests with coverage
        working-directory: ${{ inputs.working-directory }}
        run: go test -v -coverprofile=coverage.out ./...
        # -v オプションで詳細ログを出力

      - name: Save updated Go caches
        if: steps.cache-mod.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cache/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles(format('{0}/go.sum', inputs.working-directory)) }}

      - name: Save updated build cache
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: ${{ env.GOCACHE }}
          key: go-build-${{ runner.os }}-${{ hashFiles(format('{0}/go.sum', inputs.working-directory)) }}

      - name: Post-job cleanup
        if: always() && runner.environment == 'self-hosted'
        run: |
          go clean -cache
          go clean -modcache
