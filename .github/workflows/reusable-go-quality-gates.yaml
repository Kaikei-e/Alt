name: Reusable Go Quality Gates Workflow
permissions:
  contents: read

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      go-version:
        required: false
        type: string
        default: "1.24"
      coverage-flags:
        required: false
        type: string
      run-security-audit:
        required: false
        type: boolean
        default: true
      build-artifact-name:
        required: false
        type: string
      build-artifact-path:
        required: false
        type: string

jobs:
  quality-check:
    runs-on: [self-hosted, linux, X64]
    timeout-minutes: 30
    env:
      GOPROXY: "https://proxy.golang.org,direct"
      GOSUMDB: "sum.golang.org"

    steps:
      - name: Mask Configuration
        if: runner.environment == 'self-hosted'
        run: |
          echo "::group::Masking Configuration"
          for part in $(echo $HOME | tr '/' ' '); do
            [ -n "$part" ] && echo "::add-mask::$part"
          done
          echo "::endgroup::"

      - uses: actions/checkout@v4

      - name: Set up Go with module cache
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}                    # モジュールキャッシュ自動化 :contentReference[oaicite:7]{index=7}

      - name: Speed up Go build & module cache
        uses: magnetikonline/action-golang-cache@v5  # ビルドキャッシュ含むモジュールキャッシュ :contentReference[oaicite:8]{index=8}

      - name: Lint code with golangci-lint
        uses: golangci/golangci-lint-action@v8       # プリビルド済みバイナリで高速実行 :contentReference[oaicite:9]{index=9}

      - name: Install gosec binary
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.22.5  # Docker不要 :contentReference[oaicite:10]{index=10}

      - name: Security scan with gosec
        run: gosec -fmt sarif -out gosec-results.sarif ./...            # SARIF 出力 :contentReference[oaicite:11]{index=11}

      - name: Upload Gosec SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

      - name: Vulnerability check with govulncheck
        uses: golang/govulncheck-action@v1                          # 非 Docker ベースで実行 :contentReference[oaicite:12]{index=12}

      - name: Run tests with race detection
        run: go test -race ./...

      - name: Generate coverage report
        run: go test -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage.out
          flags: ${{ inputs.coverage-flags }}
          name: ${{ inputs.coverage-flags }}-coverage
          verbose: false

      - name: Build application
        run: go build -v ./...

      - name: Upload build artifact
        if: ${{ inputs.build-artifact-name != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build-artifact-name }}
          path: ${{ inputs.build-artifact-path }}
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          go clean -cache -modcache
          rm -rf gosec-results.sarif coverage.out

  security-audit:
    name: Security Audit
    if: inputs.run-security-audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
          cache-dependency-path: ${{ inputs.working-directory }}/go.sum

      - name: Download dependencies
        run: go mod download

      - name: Run Gosec Security Scanner
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.22.5 && \
             gosec -fmt sarif -out gosec-results.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

      - name: Run vulnerability check
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: ${{ inputs.go-version }}
