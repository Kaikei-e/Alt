name: Reusable Go Quality Gates Workflow
permissions:
  contents: read
on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      go-version:
        required: false
        type: string
        default: "1.24"
      coverage-flags:
        required: false
        type: string
      run-security-audit:
        required: false
        type: boolean
        default: true
      build-artifact-name:
        required: false
        type: string
      build-artifact-path:
        required: false
        type: string

jobs:
  quality-check:
    name: Quality Gates
    runs-on: [self-hosted, linux, X64]
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Configure logging
        if: runner.environment == 'self-hosted'
        run: |
          echo "::group::Masking Configuration"
          PARTS=($(echo $HOME | tr '/' ' '))
          for part in "${PARTS[@]}"; do
            [ ! -z "$part" ] && echo "::add-mask::$part"
          done
          echo "::endgroup::"

      - name: Clean and setup Go environment
        if: runner.environment == 'self-hosted'
        run: |
          # Go キャッシュをクリーンアップ
          echo "Cleaning Go caches..."
          go clean -cache || true
          go clean -modcache || true

          # 新しいキャッシュディレクトリを設定
          export GOCACHE="${{ runner.temp }}/go-cache"
          export GOMODCACHE="${{ runner.temp }}/go-mod"
          mkdir -p "$GOCACHE" "$GOMODCACHE"

          # 環境変数を設定
          echo "GOCACHE=$GOCACHE" >> $GITHUB_ENV
          echo "GOMODCACHE=$GOMODCACHE" >> $GITHUB_ENV

          # 権限を修正（書き込み可能に）
          chmod -R 755 "$GOCACHE" "$GOMODCACHE" || true

      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
          cache: false  # カスタムキャッシュを使用

      - name: Manual Go cache handling
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.temp }}/go-cache
            ${{ runner.temp }}/go-mod
          key: ${{ runner.os }}-go-quality-${{ hashFiles(format('{0}/go.sum', inputs.working-directory)) }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-go-quality-
        env:
          ACTIONS_STEP_DEBUG: false
        continue-on-error: true

      - name: Install development tools
        working-directory: ${{ inputs.working-directory }}
        env:
          # ensure module downloads are fast and secure
          GOPROXY: "https://proxy.golang.org,direct"
          GOSUMDB: "sum.golang.org"
          # install tools into the runner's temp folder
          GOBIN: "${{ runner.temp }}/go-tools"
        run: |
          mkdir -p "$GOBIN"
          echo "$GOBIN" >> $GITHUB_PATH

          echo "Installing mockgen and goimports..."
          # correct mockgen import path and pin to v1.6.0
          go install github.com/golang/mock/mockgen@v1.6.0
          # official goimports installer
          go install golang.org/x/tools/cmd/goimports@latest

          echo "Installing gosec..."
          # pin gosec to v2.22.5 for reproducibility
          go install github.com/securego/gosec/v2/cmd/gosec@v2.22.5

          echo "Verifying installations:"

      - name: Verify tool paths
        run: |
          which mockgen
          which goimports
          which gosec

      - name: Download dependencies
        working-directory: ${{ inputs.working-directory }}
        run: |
          # 権限を確保しながらダウンロード
          go mod download
          go mod verify

          # ダウンロード後に権限を修正
          chmod -R u+w "${{ runner.temp }}/go-mod" || true

      - name: Verify go.mod is tidy
        working-directory: ${{ inputs.working-directory }}
        run: |
          go mod tidy
          if [ ! -z "$(git status --porcelain go.mod go.sum)" ]; then
            echo "go.mod or go.sum is not tidy"
            git diff go.mod go.sum
            exit 1
          fi

      - name: Generate mocks
        working-directory: ${{ inputs.working-directory }}
        run: |
          make mocks || echo "Mock generation skipped or failed"

      - name: Format code
        working-directory: ${{ inputs.working-directory }}
        run: |
          make format || goimports -w .

      - name: Lint code
        working-directory: ${{ inputs.working-directory }}
        run: |
          # golangci-lintの設定
          export GOLANGCI_LINT_CACHE="${{ runner.temp }}/golangci-lint-cache"
          mkdir -p "$GOLANGCI_LINT_CACHE"

          make lint || golangci-lint run --timeout=5m

      - name: Security scan
        working-directory: ${{ inputs.working-directory }}
        run: |
          make security || gosec -fmt sarif -out gosec-results.sarif ./...

      - name: Run tests with race detection
        working-directory: ${{ inputs.working-directory }}
        run: |
          make test-race || go test -race ./...

      - name: Generate coverage report
        working-directory: ${{ inputs.working-directory }}
        run: |
          make coverage || go test -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ inputs.working-directory }}/coverage.out
          flags: ${{ inputs.coverage-flags }}
          name: ${{ inputs.coverage-flags }}-coverage
          verbose: false

      - name: Build application
        working-directory: ${{ inputs.working-directory }}
        run: |
          make build || go build -v ./...

      - name: Upload build artifacts
        if: inputs.build-artifact-name != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build-artifact-name }}
          path: ${{ inputs.build-artifact-path }}
          retention-days: 7

      - name: Cleanup
        if: always()
        continue-on-error: true  # エラーでも続行
        run: |
          echo "Cleaning up temporary files..."

          # Goのクリーンコマンドを使用（より安全）
          go clean -cache || true
          go clean -modcache || true

          # 権限を修正してから削除を試みる
          if [ -d "${{ runner.temp }}/go-mod" ]; then
            chmod -R u+w "${{ runner.temp }}/go-mod" 2>/dev/null || true
            rm -rf "${{ runner.temp }}/go-mod" || echo "Failed to remove go-mod"
          fi

          if [ -d "${{ runner.temp }}/go-cache" ]; then
            chmod -R u+w "${{ runner.temp }}/go-cache" 2>/dev/null || true
            rm -rf "${{ runner.temp }}/go-cache" || echo "Failed to remove go-cache"
          fi

          if [ -d "${{ runner.temp }}/go-tools" ]; then
            chmod -R u+w "${{ runner.temp }}/go-tools" 2>/dev/null || true
            rm -rf "${{ runner.temp }}/go-tools" || echo "Failed to remove go-tools"
          fi

          echo "Cleanup completed (with possible errors ignored)"

  security-audit:
    name: Security Audit
    if: inputs.run-security-audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
          cache-dependency-path: ${{ inputs.working-directory }}/go.sum

      - name: Download dependencies
        working-directory: ${{ inputs.working-directory }}
        run: go mod download

      - name: Install Gosec Security Scanner
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scanner
        working-directory: ${{ inputs.working-directory }}
        run: gosec -fmt sarif -out gosec-results.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ inputs.working-directory }}/gosec-results.sarif

      - name: Run vulnerability check
        working-directory: ${{ inputs.working-directory }}
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...