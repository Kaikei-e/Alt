name: Reusable Go Quality Gates

on:
  workflow_call:
    inputs:
      working-directory:
        description: "Target Go module directory (monorepo friendly)"
        required: true
        type: string
      go-version:
        description: "Go version (empty = derive from go.mod)"
        required: false
        type: string
        default: ""
      lint-only-new:
        description: "Show only new lint issues on PRs"
        required: false
        type: boolean
        default: true

# 最小権限 + SARIF アップロード用の権限
permissions:
  contents: read                         # checkout 用
  security-events: write                 # SARIF を Code Scanning にアップロードするのに必須
  id-token: write                        # OIDC を使うツールがある場合に備えて（将来拡張）

jobs:
  quality:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      # --- Checkout & Go setup ---
      - name: Checkout (sparse)
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            ${{ inputs.working-directory }}
          sparse-checkout-cone-mode: true
          fetch-depth: 1  # 変更差分だけで十分

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          go-version-file: ${{ inputs.go-version == '' && format('{0}/go.mod', inputs.working-directory) || '' }}
          check-latest: true

      - name: Go env (diag)
        run: |
          go env
          echo "pwd=$(pwd)"
          echo "module dir=${{ inputs.working-directory }}"

      # --- Baseline quality gates (速い順に) ---
      - name: fmt check
        working-directory: ${{ inputs.working-directory }}
        run: |
          files=$(gofmt -l . | grep -v '^$' || true)
          if [ -n "$files" ]; then
            echo "::error title=gofmt::Run 'gofmt -w' on these files:\n$files"
            exit 1
          fi

      - name: go vet
        working-directory: ${{ inputs.working-directory }}
        run: go vet ./...

      # --- Lint (golangci-lint v2系 / アクション v8) ---
      # v8 の公式アクション推奨。v2 では out-format が変わったため、注釈はProblem Matcherに任せる。
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
          working-directory: ${{ inputs.working-directory }}
          only-new-issues: ${{ inputs.lint-only-new }}
          # 追加で引数を渡す場合（例：--timeout=5m）
          # args: --timeout=5m

      # --- Security: gosec → SARIF で Code Scanning に載せる ---
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec (SARIF)
        working-directory: ${{ inputs.working-directory }}
        run: |
          mkdir -p ./_reports
          gosec -fmt sarif -out ./_reports/gosec.sarif ./...

      - name: Upload SARIF (gosec)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ inputs.working-directory }}/_reports/gosec.sarif
          category: gosec

      # --- Security: govulncheck → SARIF（Code Scanning 連携） ---
      - name: Govulncheck (SARIF)
        uses: golang/govulncheck-action@v1
        with:
          # go-version / caching は setup-go に追従
          working-directory: ${{ inputs.working-directory }}
          format: sarif
          output-file: _reports/govulncheck.sarif
          # exit-code は format=sarif の場合でも脆弱性検知で fail させたいなら下記を有効化
          # fail-on-vuln: true

      - name: Upload SARIF (govulncheck)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ inputs.working-directory }}/_reports/govulncheck.sarif
          category: govulncheck
