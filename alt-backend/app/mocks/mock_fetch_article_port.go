// Code generated by MockGen. DO NOT EDIT.
// Source: fetch_article_port.go
//
// Generated by this command:
//
//	mockgen -source=fetch_article_port.go -destination=../../mocks/mock_fetch_article_port.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFetchArticlePort is a mock of FetchArticlePort interface.
type MockFetchArticlePort struct {
	ctrl     *gomock.Controller
	recorder *MockFetchArticlePortMockRecorder
	isgomock struct{}
}

// MockFetchArticlePortMockRecorder is the mock recorder for MockFetchArticlePort.
type MockFetchArticlePortMockRecorder struct {
	mock *MockFetchArticlePort
}

// NewMockFetchArticlePort creates a new mock instance.
func NewMockFetchArticlePort(ctrl *gomock.Controller) *MockFetchArticlePort {
	mock := &MockFetchArticlePort{ctrl: ctrl}
	mock.recorder = &MockFetchArticlePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchArticlePort) EXPECT() *MockFetchArticlePortMockRecorder {
	return m.recorder
}

// FetchArticleContents mocks base method.
func (m *MockFetchArticlePort) FetchArticleContents(ctx context.Context, articleURL string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchArticleContents", ctx, articleURL)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchArticleContents indicates an expected call of FetchArticleContents.
func (mr *MockFetchArticlePortMockRecorder) FetchArticleContents(ctx, articleURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchArticleContents", reflect.TypeOf((*MockFetchArticlePort)(nil).FetchArticleContents), ctx, articleURL)
}
