// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/search_indexer_port/search_indexer_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/search_indexer_port/search_indexer_port.go -destination=./alt-backend/app/mocks/mock_search_indexer_port.go -package=mocks SearchIndexerPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSearchIndexerPort is a mock of SearchIndexerPort interface.
type MockSearchIndexerPort struct {
	ctrl     *gomock.Controller
	recorder *MockSearchIndexerPortMockRecorder
	isgomock struct{}
}

// MockSearchIndexerPortMockRecorder is the mock recorder for MockSearchIndexerPort.
type MockSearchIndexerPortMockRecorder struct {
	mock *MockSearchIndexerPort
}

// NewMockSearchIndexerPort creates a new mock instance.
func NewMockSearchIndexerPort(ctrl *gomock.Controller) *MockSearchIndexerPort {
	mock := &MockSearchIndexerPort{ctrl: ctrl}
	mock.recorder = &MockSearchIndexerPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchIndexerPort) EXPECT() *MockSearchIndexerPortMockRecorder {
	return m.recorder
}

// SearchArticles mocks base method.
func (m *MockSearchIndexerPort) SearchArticles(ctx context.Context, query string, userID string) ([]domain.SearchIndexerArticleHit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArticles", ctx, query, userID)
	ret0, _ := ret[0].([]domain.SearchIndexerArticleHit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArticles indicates an expected call of SearchArticles.
func (mr *MockSearchIndexerPortMockRecorder) SearchArticles(ctx, query, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArticles", reflect.TypeOf((*MockSearchIndexerPort)(nil).SearchArticles), ctx, query, userID)
}
