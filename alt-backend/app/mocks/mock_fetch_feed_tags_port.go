// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/fetch_feed_tags_port/fetch_feed_tags_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/fetch_feed_tags_port/fetch_feed_tags_port.go -destination=./alt-backend/app/mocks/mock_fetch_feed_tags_port.go -package=mocks FetchFeedTagsPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockFetchFeedTagsPort is a mock of FetchFeedTagsPort interface.
type MockFetchFeedTagsPort struct {
	ctrl     *gomock.Controller
	recorder *MockFetchFeedTagsPortMockRecorder
	isgomock struct{}
}

// MockFetchFeedTagsPortMockRecorder is the mock recorder for MockFetchFeedTagsPort.
type MockFetchFeedTagsPortMockRecorder struct {
	mock *MockFetchFeedTagsPort
}

// NewMockFetchFeedTagsPort creates a new mock instance.
func NewMockFetchFeedTagsPort(ctrl *gomock.Controller) *MockFetchFeedTagsPort {
	mock := &MockFetchFeedTagsPort{ctrl: ctrl}
	mock.recorder = &MockFetchFeedTagsPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchFeedTagsPort) EXPECT() *MockFetchFeedTagsPortMockRecorder {
	return m.recorder
}

// FetchFeedTags mocks base method.
func (m *MockFetchFeedTagsPort) FetchFeedTags(ctx context.Context, feedID string, cursor *time.Time, limit int) ([]*domain.FeedTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeedTags", ctx, feedID, cursor, limit)
	ret0, _ := ret[0].([]*domain.FeedTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeedTags indicates an expected call of FetchFeedTags.
func (mr *MockFetchFeedTagsPortMockRecorder) FetchFeedTags(ctx, feedID, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeedTags", reflect.TypeOf((*MockFetchFeedTagsPort)(nil).FetchFeedTags), ctx, feedID, cursor, limit)
}
