// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/image_fetch_port/image_fetch_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/image_fetch_port/image_fetch_port.go -destination=./alt-backend/app/mocks/mock_image_fetch_port.go -package=mocks ImageFetchPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockImageFetchPort is a mock of ImageFetchPort interface.
type MockImageFetchPort struct {
	ctrl     *gomock.Controller
	recorder *MockImageFetchPortMockRecorder
	isgomock struct{}
}

// MockImageFetchPortMockRecorder is the mock recorder for MockImageFetchPort.
type MockImageFetchPortMockRecorder struct {
	mock *MockImageFetchPort
}

// NewMockImageFetchPort creates a new mock instance.
func NewMockImageFetchPort(ctrl *gomock.Controller) *MockImageFetchPort {
	mock := &MockImageFetchPort{ctrl: ctrl}
	mock.recorder = &MockImageFetchPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageFetchPort) EXPECT() *MockImageFetchPortMockRecorder {
	return m.recorder
}

// FetchImage mocks base method.
func (m *MockImageFetchPort) FetchImage(ctx context.Context, imageURL *url.URL, options *domain.ImageFetchOptions) (*domain.ImageFetchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchImage", ctx, imageURL, options)
	ret0, _ := ret[0].(*domain.ImageFetchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchImage indicates an expected call of FetchImage.
func (mr *MockImageFetchPortMockRecorder) FetchImage(ctx, imageURL, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchImage", reflect.TypeOf((*MockImageFetchPort)(nil).FetchImage), ctx, imageURL, options)
}
