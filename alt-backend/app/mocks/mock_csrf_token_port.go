// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/csrf_token_port/csrf_token_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/csrf_token_port/csrf_token_port.go -destination=./alt-backend/app/mocks/mock_csrf_token_port.go -package=mocks CSRFTokenUsecase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCSRFTokenUsecase is a mock of CSRFTokenUsecase interface.
type MockCSRFTokenUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFTokenUsecaseMockRecorder
	isgomock struct{}
}

// MockCSRFTokenUsecaseMockRecorder is the mock recorder for MockCSRFTokenUsecase.
type MockCSRFTokenUsecaseMockRecorder struct {
	mock *MockCSRFTokenUsecase
}

// NewMockCSRFTokenUsecase creates a new mock instance.
func NewMockCSRFTokenUsecase(ctrl *gomock.Controller) *MockCSRFTokenUsecase {
	mock := &MockCSRFTokenUsecase{ctrl: ctrl}
	mock.recorder = &MockCSRFTokenUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFTokenUsecase) EXPECT() *MockCSRFTokenUsecaseMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockCSRFTokenUsecase) GenerateToken(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockCSRFTokenUsecaseMockRecorder) GenerateToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockCSRFTokenUsecase)(nil).GenerateToken), ctx)
}

// InvalidateToken mocks base method.
func (m *MockCSRFTokenUsecase) InvalidateToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateToken indicates an expected call of InvalidateToken.
func (mr *MockCSRFTokenUsecaseMockRecorder) InvalidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateToken", reflect.TypeOf((*MockCSRFTokenUsecase)(nil).InvalidateToken), ctx, token)
}

// ValidateToken mocks base method.
func (m *MockCSRFTokenUsecase) ValidateToken(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockCSRFTokenUsecaseMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockCSRFTokenUsecase)(nil).ValidateToken), ctx, token)
}

// MockCSRFTokenGateway is a mock of CSRFTokenGateway interface.
type MockCSRFTokenGateway struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFTokenGatewayMockRecorder
	isgomock struct{}
}

// MockCSRFTokenGatewayMockRecorder is the mock recorder for MockCSRFTokenGateway.
type MockCSRFTokenGatewayMockRecorder struct {
	mock *MockCSRFTokenGateway
}

// NewMockCSRFTokenGateway creates a new mock instance.
func NewMockCSRFTokenGateway(ctrl *gomock.Controller) *MockCSRFTokenGateway {
	mock := &MockCSRFTokenGateway{ctrl: ctrl}
	mock.recorder = &MockCSRFTokenGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFTokenGateway) EXPECT() *MockCSRFTokenGatewayMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockCSRFTokenGateway) GenerateToken(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockCSRFTokenGatewayMockRecorder) GenerateToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockCSRFTokenGateway)(nil).GenerateToken), ctx)
}

// InvalidateToken mocks base method.
func (m *MockCSRFTokenGateway) InvalidateToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateToken indicates an expected call of InvalidateToken.
func (mr *MockCSRFTokenGatewayMockRecorder) InvalidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateToken", reflect.TypeOf((*MockCSRFTokenGateway)(nil).InvalidateToken), ctx, token)
}

// ValidateToken mocks base method.
func (m *MockCSRFTokenGateway) ValidateToken(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockCSRFTokenGatewayMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockCSRFTokenGateway)(nil).ValidateToken), ctx, token)
}

// MockCSRFTokenDriver is a mock of CSRFTokenDriver interface.
type MockCSRFTokenDriver struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFTokenDriverMockRecorder
	isgomock struct{}
}

// MockCSRFTokenDriverMockRecorder is the mock recorder for MockCSRFTokenDriver.
type MockCSRFTokenDriverMockRecorder struct {
	mock *MockCSRFTokenDriver
}

// NewMockCSRFTokenDriver creates a new mock instance.
func NewMockCSRFTokenDriver(ctrl *gomock.Controller) *MockCSRFTokenDriver {
	mock := &MockCSRFTokenDriver{ctrl: ctrl}
	mock.recorder = &MockCSRFTokenDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFTokenDriver) EXPECT() *MockCSRFTokenDriverMockRecorder {
	return m.recorder
}

// DeleteToken mocks base method.
func (m *MockCSRFTokenDriver) DeleteToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockCSRFTokenDriverMockRecorder) DeleteToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockCSRFTokenDriver)(nil).DeleteToken), ctx, token)
}

// GenerateRandomToken mocks base method.
func (m *MockCSRFTokenDriver) GenerateRandomToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomToken indicates an expected call of GenerateRandomToken.
func (mr *MockCSRFTokenDriverMockRecorder) GenerateRandomToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomToken", reflect.TypeOf((*MockCSRFTokenDriver)(nil).GenerateRandomToken))
}

// GetToken mocks base method.
func (m *MockCSRFTokenDriver) GetToken(ctx context.Context, token string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, token)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockCSRFTokenDriverMockRecorder) GetToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockCSRFTokenDriver)(nil).GetToken), ctx, token)
}

// StoreToken mocks base method.
func (m *MockCSRFTokenDriver) StoreToken(ctx context.Context, token string, expiration time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreToken", ctx, token, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreToken indicates an expected call of StoreToken.
func (mr *MockCSRFTokenDriverMockRecorder) StoreToken(ctx, token, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreToken", reflect.TypeOf((*MockCSRFTokenDriver)(nil).StoreToken), ctx, token, expiration)
}
