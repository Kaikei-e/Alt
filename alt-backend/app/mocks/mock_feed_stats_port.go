// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/feed_stats_port/feed_amout_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/feed_stats_port/feed_amout_port.go -destination=./alt-backend/app/mocks/mock_feed_stats_port.go -package=mocks FeedAmountPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeedAmountPort is a mock of FeedAmountPort interface.
type MockFeedAmountPort struct {
	ctrl     *gomock.Controller
	recorder *MockFeedAmountPortMockRecorder
	isgomock struct{}
}

// MockFeedAmountPortMockRecorder is the mock recorder for MockFeedAmountPort.
type MockFeedAmountPortMockRecorder struct {
	mock *MockFeedAmountPort
}

// NewMockFeedAmountPort creates a new mock instance.
func NewMockFeedAmountPort(ctrl *gomock.Controller) *MockFeedAmountPort {
	mock := &MockFeedAmountPort{ctrl: ctrl}
	mock.recorder = &MockFeedAmountPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedAmountPort) EXPECT() *MockFeedAmountPortMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFeedAmountPort) Execute(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockFeedAmountPortMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFeedAmountPort)(nil).Execute), ctx)
}
