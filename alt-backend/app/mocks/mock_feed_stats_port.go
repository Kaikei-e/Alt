// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/feed_stats_port/feed_stats_ports.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/feed_stats_port/feed_stats_ports.go -destination=./alt-backend/app/mocks/mock_feed_stats_port.go -package=mocks FeedAmountPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeedAmountPort is a mock of FeedAmountPort interface.
type MockFeedAmountPort struct {
	ctrl     *gomock.Controller
	recorder *MockFeedAmountPortMockRecorder
	isgomock struct{}
}

// MockFeedAmountPortMockRecorder is the mock recorder for MockFeedAmountPort.
type MockFeedAmountPortMockRecorder struct {
	mock *MockFeedAmountPort
}

// NewMockFeedAmountPort creates a new mock instance.
func NewMockFeedAmountPort(ctrl *gomock.Controller) *MockFeedAmountPort {
	mock := &MockFeedAmountPort{ctrl: ctrl}
	mock.recorder = &MockFeedAmountPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedAmountPort) EXPECT() *MockFeedAmountPortMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFeedAmountPort) Execute(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockFeedAmountPortMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFeedAmountPort)(nil).Execute), ctx)
}

// MockUnsummarizedArticlesCountPort is a mock of UnsummarizedArticlesCountPort interface.
type MockUnsummarizedArticlesCountPort struct {
	ctrl     *gomock.Controller
	recorder *MockUnsummarizedArticlesCountPortMockRecorder
	isgomock struct{}
}

// MockUnsummarizedArticlesCountPortMockRecorder is the mock recorder for MockUnsummarizedArticlesCountPort.
type MockUnsummarizedArticlesCountPortMockRecorder struct {
	mock *MockUnsummarizedArticlesCountPort
}

// NewMockUnsummarizedArticlesCountPort creates a new mock instance.
func NewMockUnsummarizedArticlesCountPort(ctrl *gomock.Controller) *MockUnsummarizedArticlesCountPort {
	mock := &MockUnsummarizedArticlesCountPort{ctrl: ctrl}
	mock.recorder = &MockUnsummarizedArticlesCountPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsummarizedArticlesCountPort) EXPECT() *MockUnsummarizedArticlesCountPortMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUnsummarizedArticlesCountPort) Execute(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockUnsummarizedArticlesCountPortMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUnsummarizedArticlesCountPort)(nil).Execute), ctx)
}

// MockSummarizedArticlesCountPort is a mock of SummarizedArticlesCountPort interface.
type MockSummarizedArticlesCountPort struct {
	ctrl     *gomock.Controller
	recorder *MockSummarizedArticlesCountPortMockRecorder
	isgomock struct{}
}

// MockSummarizedArticlesCountPortMockRecorder is the mock recorder for MockSummarizedArticlesCountPort.
type MockSummarizedArticlesCountPortMockRecorder struct {
	mock *MockSummarizedArticlesCountPort
}

// NewMockSummarizedArticlesCountPort creates a new mock instance.
func NewMockSummarizedArticlesCountPort(ctrl *gomock.Controller) *MockSummarizedArticlesCountPort {
	mock := &MockSummarizedArticlesCountPort{ctrl: ctrl}
	mock.recorder = &MockSummarizedArticlesCountPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummarizedArticlesCountPort) EXPECT() *MockSummarizedArticlesCountPortMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSummarizedArticlesCountPort) Execute(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSummarizedArticlesCountPortMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSummarizedArticlesCountPort)(nil).Execute), ctx)
}

// MockTotalArticlesCountPort is a mock of TotalArticlesCountPort interface.
type MockTotalArticlesCountPort struct {
	ctrl     *gomock.Controller
	recorder *MockTotalArticlesCountPortMockRecorder
	isgomock struct{}
}

// MockTotalArticlesCountPortMockRecorder is the mock recorder for MockTotalArticlesCountPort.
type MockTotalArticlesCountPortMockRecorder struct {
	mock *MockTotalArticlesCountPort
}

// NewMockTotalArticlesCountPort creates a new mock instance.
func NewMockTotalArticlesCountPort(ctrl *gomock.Controller) *MockTotalArticlesCountPort {
	mock := &MockTotalArticlesCountPort{ctrl: ctrl}
	mock.recorder = &MockTotalArticlesCountPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTotalArticlesCountPort) EXPECT() *MockTotalArticlesCountPortMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTotalArticlesCountPort) Execute(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockTotalArticlesCountPortMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTotalArticlesCountPort)(nil).Execute), ctx)
}
