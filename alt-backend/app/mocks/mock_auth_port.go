// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/auth_port/auth_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/auth_port/auth_port.go -destination=./alt-backend/app/mocks/mock_auth_port.go -package=mocks AuthClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	auth_port "alt/port/auth_port"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
	isgomock struct{}
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// GenerateCSRFToken mocks base method.
func (m *MockAuthClient) GenerateCSRFToken(ctx context.Context, sessionToken string) (*auth_port.CSRFTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCSRFToken", ctx, sessionToken)
	ret0, _ := ret[0].(*auth_port.CSRFTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCSRFToken indicates an expected call of GenerateCSRFToken.
func (mr *MockAuthClientMockRecorder) GenerateCSRFToken(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCSRFToken", reflect.TypeOf((*MockAuthClient)(nil).GenerateCSRFToken), ctx, sessionToken)
}

// HealthCheck mocks base method.
func (m *MockAuthClient) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockAuthClientMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockAuthClient)(nil).HealthCheck), ctx)
}

// ValidateCSRFToken mocks base method.
func (m *MockAuthClient) ValidateCSRFToken(ctx context.Context, token, sessionToken string) (*auth_port.CSRFValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCSRFToken", ctx, token, sessionToken)
	ret0, _ := ret[0].(*auth_port.CSRFValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCSRFToken indicates an expected call of ValidateCSRFToken.
func (mr *MockAuthClientMockRecorder) ValidateCSRFToken(ctx, token, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCSRFToken", reflect.TypeOf((*MockAuthClient)(nil).ValidateCSRFToken), ctx, token, sessionToken)
}

// ValidateSession mocks base method.
func (m *MockAuthClient) ValidateSession(ctx context.Context, sessionToken, tenantID string) (*auth_port.SessionValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSession", ctx, sessionToken, tenantID)
	ret0, _ := ret[0].(*auth_port.SessionValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSession indicates an expected call of ValidateSession.
func (mr *MockAuthClientMockRecorder) ValidateSession(ctx, sessionToken, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSession", reflect.TypeOf((*MockAuthClient)(nil).ValidateSession), ctx, sessionToken, tenantID)
}

// MockLegacyCSRFService is a mock of LegacyCSRFService interface.
type MockLegacyCSRFService struct {
	ctrl     *gomock.Controller
	recorder *MockLegacyCSRFServiceMockRecorder
	isgomock struct{}
}

// MockLegacyCSRFServiceMockRecorder is the mock recorder for MockLegacyCSRFService.
type MockLegacyCSRFServiceMockRecorder struct {
	mock *MockLegacyCSRFService
}

// NewMockLegacyCSRFService creates a new mock instance.
func NewMockLegacyCSRFService(ctrl *gomock.Controller) *MockLegacyCSRFService {
	mock := &MockLegacyCSRFService{ctrl: ctrl}
	mock.recorder = &MockLegacyCSRFServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLegacyCSRFService) EXPECT() *MockLegacyCSRFServiceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockLegacyCSRFService) GenerateToken(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockLegacyCSRFServiceMockRecorder) GenerateToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockLegacyCSRFService)(nil).GenerateToken), ctx)
}

// Middleware mocks base method.
func (m *MockLegacyCSRFService) Middleware() func(func(any) error) func(any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware")
	ret0, _ := ret[0].(func(func(any) error) func(any) error)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockLegacyCSRFServiceMockRecorder) Middleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockLegacyCSRFService)(nil).Middleware))
}

// ValidateToken mocks base method.
func (m *MockLegacyCSRFService) ValidateToken(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockLegacyCSRFServiceMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockLegacyCSRFService)(nil).ValidateToken), ctx, token)
}
