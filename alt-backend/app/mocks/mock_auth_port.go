// Code generated by MockGen. DO NOT EDIT.
// Source: alt/port/auth_port (interfaces: AuthPort)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_auth_port.go -package=mocks alt/port/auth_port AuthPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthPort is a mock of AuthPort interface.
type MockAuthPort struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPortMockRecorder
	isgomock struct{}
}

// MockAuthPortMockRecorder is the mock recorder for MockAuthPort.
type MockAuthPortMockRecorder struct {
	mock *MockAuthPort
}

// NewMockAuthPort creates a new mock instance.
func NewMockAuthPort(ctrl *gomock.Controller) *MockAuthPort {
	mock := &MockAuthPort{ctrl: ctrl}
	mock.recorder = &MockAuthPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPort) EXPECT() *MockAuthPortMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockAuthPort) GetUserByID(ctx context.Context, userID string) (*domain.UserContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*domain.UserContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthPortMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthPort)(nil).GetUserByID), ctx, userID)
}

// RefreshSession mocks base method.
func (m *MockAuthPort) RefreshSession(ctx context.Context, sessionToken string) (*domain.UserContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSession", ctx, sessionToken)
	ret0, _ := ret[0].(*domain.UserContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshSession indicates an expected call of RefreshSession.
func (mr *MockAuthPortMockRecorder) RefreshSession(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSession", reflect.TypeOf((*MockAuthPort)(nil).RefreshSession), ctx, sessionToken)
}

// ValidateSession mocks base method.
func (m *MockAuthPort) ValidateSession(ctx context.Context, sessionToken string) (*domain.UserContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSession", ctx, sessionToken)
	ret0, _ := ret[0].(*domain.UserContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSession indicates an expected call of ValidateSession.
func (mr *MockAuthPortMockRecorder) ValidateSession(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSession", reflect.TypeOf((*MockAuthPort)(nil).ValidateSession), ctx, sessionToken)
}
