// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/feed_status_port/update_feed_status_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/feed_status_port/update_feed_status_port.go -destination=./alt-backend/app/mocks/mock_feed_status_port.go -package=mocks UpdateFeedStatusPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUpdateFeedStatusPort is a mock of UpdateFeedStatusPort interface.
type MockUpdateFeedStatusPort struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateFeedStatusPortMockRecorder
	isgomock struct{}
}

// MockUpdateFeedStatusPortMockRecorder is the mock recorder for MockUpdateFeedStatusPort.
type MockUpdateFeedStatusPortMockRecorder struct {
	mock *MockUpdateFeedStatusPort
}

// NewMockUpdateFeedStatusPort creates a new mock instance.
func NewMockUpdateFeedStatusPort(ctrl *gomock.Controller) *MockUpdateFeedStatusPort {
	mock := &MockUpdateFeedStatusPort{ctrl: ctrl}
	mock.recorder = &MockUpdateFeedStatusPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateFeedStatusPort) EXPECT() *MockUpdateFeedStatusPortMockRecorder {
	return m.recorder
}

// UpdateFeedStatus mocks base method.
func (m *MockUpdateFeedStatusPort) UpdateFeedStatus(ctx context.Context, feedURL url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeedStatus", ctx, feedURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeedStatus indicates an expected call of UpdateFeedStatus.
func (mr *MockUpdateFeedStatusPortMockRecorder) UpdateFeedStatus(ctx, feedURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeedStatus", reflect.TypeOf((*MockUpdateFeedStatusPort)(nil).UpdateFeedStatus), ctx, feedURL)
}
