// Code generated by MockGen. DO NOT EDIT.
// Source: register_port.go
//
// Generated by this command:
//
//	mockgen -source=register_port.go -destination=../../mocks/mock_register_favorite_feed_port.go -package=mocks RegisterFavoriteFeedPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegisterFavoriteFeedPort is a mock of RegisterFavoriteFeedPort interface.
type MockRegisterFavoriteFeedPort struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterFavoriteFeedPortMockRecorder
	isgomock struct{}
}

// MockRegisterFavoriteFeedPortMockRecorder is the mock recorder for MockRegisterFavoriteFeedPort.
type MockRegisterFavoriteFeedPortMockRecorder struct {
	mock *MockRegisterFavoriteFeedPort
}

// NewMockRegisterFavoriteFeedPort creates a new mock instance.
func NewMockRegisterFavoriteFeedPort(ctrl *gomock.Controller) *MockRegisterFavoriteFeedPort {
	mock := &MockRegisterFavoriteFeedPort{ctrl: ctrl}
	mock.recorder = &MockRegisterFavoriteFeedPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterFavoriteFeedPort) EXPECT() *MockRegisterFavoriteFeedPortMockRecorder {
	return m.recorder
}

// RegisterFavoriteFeed mocks base method.
func (m *MockRegisterFavoriteFeedPort) RegisterFavoriteFeed(ctx context.Context, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFavoriteFeed", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterFavoriteFeed indicates an expected call of RegisterFavoriteFeed.
func (mr *MockRegisterFavoriteFeedPortMockRecorder) RegisterFavoriteFeed(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFavoriteFeed", reflect.TypeOf((*MockRegisterFavoriteFeedPort)(nil).RegisterFavoriteFeed), ctx, url)
}
