// Code generated by MockGen. DO NOT EDIT.
// Source: ./port/fetch_articles_port/fetch_articles_port.go
//
// Generated by this command:
//
//	mockgen -source=./port/fetch_articles_port/fetch_articles_port.go -destination=./mocks/mock_fetch_articles_port.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockFetchArticlesPort is a mock of FetchArticlesPort interface.
type MockFetchArticlesPort struct {
	ctrl     *gomock.Controller
	recorder *MockFetchArticlesPortMockRecorder
	isgomock struct{}
}

// MockFetchArticlesPortMockRecorder is the mock recorder for MockFetchArticlesPort.
type MockFetchArticlesPortMockRecorder struct {
	mock *MockFetchArticlesPort
}

// NewMockFetchArticlesPort creates a new mock instance.
func NewMockFetchArticlesPort(ctrl *gomock.Controller) *MockFetchArticlesPort {
	mock := &MockFetchArticlesPort{ctrl: ctrl}
	mock.recorder = &MockFetchArticlesPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchArticlesPort) EXPECT() *MockFetchArticlesPortMockRecorder {
	return m.recorder
}

// FetchArticlesWithCursor mocks base method.
func (m *MockFetchArticlesPort) FetchArticlesWithCursor(ctx context.Context, cursor *time.Time, limit int) ([]*domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchArticlesWithCursor", ctx, cursor, limit)
	ret0, _ := ret[0].([]*domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchArticlesWithCursor indicates an expected call of FetchArticlesWithCursor.
func (mr *MockFetchArticlesPortMockRecorder) FetchArticlesWithCursor(ctx, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchArticlesWithCursor", reflect.TypeOf((*MockFetchArticlesPort)(nil).FetchArticlesWithCursor), ctx, cursor, limit)
}
