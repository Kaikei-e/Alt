// Code generated by MockGen. DO NOT EDIT.
// Source: ./port/feed_url_to_id_port/feed_url_to_id_port.go
//
// Generated by this command:
//
//	mockgen -source=./port/feed_url_to_id_port/feed_url_to_id_port.go -destination=./mocks/mock_feed_url_to_id_port.go -package=mocks FeedURLToIDPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeedURLToIDPort is a mock of FeedURLToIDPort interface.
type MockFeedURLToIDPort struct {
	ctrl     *gomock.Controller
	recorder *MockFeedURLToIDPortMockRecorder
	isgomock struct{}
}

// MockFeedURLToIDPortMockRecorder is the mock recorder for MockFeedURLToIDPort.
type MockFeedURLToIDPortMockRecorder struct {
	mock *MockFeedURLToIDPort
}

// NewMockFeedURLToIDPort creates a new mock instance.
func NewMockFeedURLToIDPort(ctrl *gomock.Controller) *MockFeedURLToIDPort {
	mock := &MockFeedURLToIDPort{ctrl: ctrl}
	mock.recorder = &MockFeedURLToIDPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedURLToIDPort) EXPECT() *MockFeedURLToIDPortMockRecorder {
	return m.recorder
}

// GetFeedIDByURL mocks base method.
func (m *MockFeedURLToIDPort) GetFeedIDByURL(ctx context.Context, feedURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedIDByURL", ctx, feedURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedIDByURL indicates an expected call of GetFeedIDByURL.
func (mr *MockFeedURLToIDPortMockRecorder) GetFeedIDByURL(ctx, feedURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedIDByURL", reflect.TypeOf((*MockFeedURLToIDPort)(nil).GetFeedIDByURL), ctx, feedURL)
}
