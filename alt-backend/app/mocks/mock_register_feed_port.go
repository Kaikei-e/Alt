// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/register_feed_port/register_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/register_feed_port/register_port.go -destination=./alt-backend/app/mocks/mock_register_feed_port.go -package=mocks RegisterFeedPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegisterFeedPort is a mock of RegisterFeedPort interface.
type MockRegisterFeedPort struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterFeedPortMockRecorder
	isgomock struct{}
}

// MockRegisterFeedPortMockRecorder is the mock recorder for MockRegisterFeedPort.
type MockRegisterFeedPortMockRecorder struct {
	mock *MockRegisterFeedPort
}

// NewMockRegisterFeedPort creates a new mock instance.
func NewMockRegisterFeedPort(ctrl *gomock.Controller) *MockRegisterFeedPort {
	mock := &MockRegisterFeedPort{ctrl: ctrl}
	mock.recorder = &MockRegisterFeedPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterFeedPort) EXPECT() *MockRegisterFeedPortMockRecorder {
	return m.recorder
}

// RegisterRSSFeedLink mocks base method.
func (m *MockRegisterFeedPort) RegisterRSSFeedLink(ctx context.Context, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRSSFeedLink", ctx, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRSSFeedLink indicates an expected call of RegisterRSSFeedLink.
func (mr *MockRegisterFeedPortMockRecorder) RegisterRSSFeedLink(ctx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRSSFeedLink", reflect.TypeOf((*MockRegisterFeedPort)(nil).RegisterRSSFeedLink), ctx, link)
}
