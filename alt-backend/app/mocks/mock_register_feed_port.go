// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/register_feed_port/register_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/register_feed_port/register_port.go -destination=./alt-backend/app/mocks/mock_register_feed_port.go -package=mocks RegisterFeedLinkPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegisterFeedLinkPort is a mock of RegisterFeedLinkPort interface.
type MockRegisterFeedLinkPort struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterFeedLinkPortMockRecorder
	isgomock struct{}
}

// MockRegisterFeedLinkPortMockRecorder is the mock recorder for MockRegisterFeedLinkPort.
type MockRegisterFeedLinkPortMockRecorder struct {
	mock *MockRegisterFeedLinkPort
}

// NewMockRegisterFeedLinkPort creates a new mock instance.
func NewMockRegisterFeedLinkPort(ctrl *gomock.Controller) *MockRegisterFeedLinkPort {
	mock := &MockRegisterFeedLinkPort{ctrl: ctrl}
	mock.recorder = &MockRegisterFeedLinkPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterFeedLinkPort) EXPECT() *MockRegisterFeedLinkPortMockRecorder {
	return m.recorder
}

// RegisterRSSFeedLink mocks base method.
func (m *MockRegisterFeedLinkPort) RegisterRSSFeedLink(ctx context.Context, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRSSFeedLink", ctx, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRSSFeedLink indicates an expected call of RegisterRSSFeedLink.
func (mr *MockRegisterFeedLinkPortMockRecorder) RegisterRSSFeedLink(ctx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRSSFeedLink", reflect.TypeOf((*MockRegisterFeedLinkPort)(nil).RegisterRSSFeedLink), ctx, link)
}

// MockRegisterFeedsPort is a mock of RegisterFeedsPort interface.
type MockRegisterFeedsPort struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterFeedsPortMockRecorder
	isgomock struct{}
}

// MockRegisterFeedsPortMockRecorder is the mock recorder for MockRegisterFeedsPort.
type MockRegisterFeedsPortMockRecorder struct {
	mock *MockRegisterFeedsPort
}

// NewMockRegisterFeedsPort creates a new mock instance.
func NewMockRegisterFeedsPort(ctrl *gomock.Controller) *MockRegisterFeedsPort {
	mock := &MockRegisterFeedsPort{ctrl: ctrl}
	mock.recorder = &MockRegisterFeedsPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterFeedsPort) EXPECT() *MockRegisterFeedsPortMockRecorder {
	return m.recorder
}

// RegisterFeeds mocks base method.
func (m *MockRegisterFeedsPort) RegisterFeeds(ctx context.Context, feeds []*domain.FeedItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFeeds", ctx, feeds)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterFeeds indicates an expected call of RegisterFeeds.
func (mr *MockRegisterFeedsPortMockRecorder) RegisterFeeds(ctx, feeds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFeeds", reflect.TypeOf((*MockRegisterFeedsPort)(nil).RegisterFeeds), ctx, feeds)
}
