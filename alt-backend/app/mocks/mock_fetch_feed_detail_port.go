// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/fetch_feed_detail_port/fetch_summary_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/fetch_feed_detail_port/fetch_summary_port.go -destination=./alt-backend/app/mocks/mock_fetch_feed_detail_port.go -package=mocks FetchFeedDetailsPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFetchFeedDetailsPort is a mock of FetchFeedDetailsPort interface.
type MockFetchFeedDetailsPort struct {
	ctrl     *gomock.Controller
	recorder *MockFetchFeedDetailsPortMockRecorder
	isgomock struct{}
}

// MockFetchFeedDetailsPortMockRecorder is the mock recorder for MockFetchFeedDetailsPort.
type MockFetchFeedDetailsPortMockRecorder struct {
	mock *MockFetchFeedDetailsPort
}

// NewMockFetchFeedDetailsPort creates a new mock instance.
func NewMockFetchFeedDetailsPort(ctrl *gomock.Controller) *MockFetchFeedDetailsPort {
	mock := &MockFetchFeedDetailsPort{ctrl: ctrl}
	mock.recorder = &MockFetchFeedDetailsPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchFeedDetailsPort) EXPECT() *MockFetchFeedDetailsPortMockRecorder {
	return m.recorder
}

// FetchFeedDetails mocks base method.
func (m *MockFetchFeedDetailsPort) FetchFeedDetails(ctx context.Context, feedURL *url.URL) (*domain.FeedSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeedDetails", ctx, feedURL)
	ret0, _ := ret[0].(*domain.FeedSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeedDetails indicates an expected call of FetchFeedDetails.
func (mr *MockFetchFeedDetailsPortMockRecorder) FetchFeedDetails(ctx, feedURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeedDetails", reflect.TypeOf((*MockFetchFeedDetailsPort)(nil).FetchFeedDetails), ctx, feedURL)
}
