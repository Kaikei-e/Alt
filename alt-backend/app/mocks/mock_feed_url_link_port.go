// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/feed_url_link_port/feed_url_link_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/feed_url_link_port/feed_url_link_port.go -destination=./alt-backend/app/mocks/mock_feed_url_link_port.go -package=mocks FeedURLLinkPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "alt/driver/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeedURLLinkPort is a mock of FeedURLLinkPort interface.
type MockFeedURLLinkPort struct {
	ctrl     *gomock.Controller
	recorder *MockFeedURLLinkPortMockRecorder
	isgomock struct{}
}

// MockFeedURLLinkPortMockRecorder is the mock recorder for MockFeedURLLinkPort.
type MockFeedURLLinkPortMockRecorder struct {
	mock *MockFeedURLLinkPort
}

// NewMockFeedURLLinkPort creates a new mock instance.
func NewMockFeedURLLinkPort(ctrl *gomock.Controller) *MockFeedURLLinkPort {
	mock := &MockFeedURLLinkPort{ctrl: ctrl}
	mock.recorder = &MockFeedURLLinkPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedURLLinkPort) EXPECT() *MockFeedURLLinkPortMockRecorder {
	return m.recorder
}

// GetFeedURLsByArticleIDs mocks base method.
func (m *MockFeedURLLinkPort) GetFeedURLsByArticleIDs(ctx context.Context, articleIDs []string) ([]models.FeedAndArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedURLsByArticleIDs", ctx, articleIDs)
	ret0, _ := ret[0].([]models.FeedAndArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedURLsByArticleIDs indicates an expected call of GetFeedURLsByArticleIDs.
func (mr *MockFeedURLLinkPortMockRecorder) GetFeedURLsByArticleIDs(ctx, articleIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedURLsByArticleIDs", reflect.TypeOf((*MockFeedURLLinkPort)(nil).GetFeedURLsByArticleIDs), ctx, articleIDs)
}
