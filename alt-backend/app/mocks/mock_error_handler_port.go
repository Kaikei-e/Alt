// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/error_handler_port/error_handler_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/error_handler_port/error_handler_port.go -destination=./alt-backend/app/mocks/mock_error_handler_port.go -package=mocks ErrorHandlerPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	error_handler_port "alt/port/error_handler_port"
	context "context"
	slog "log/slog"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockErrorHandlerPort is a mock of ErrorHandlerPort interface.
type MockErrorHandlerPort struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerPortMockRecorder
	isgomock struct{}
}

// MockErrorHandlerPortMockRecorder is the mock recorder for MockErrorHandlerPort.
type MockErrorHandlerPortMockRecorder struct {
	mock *MockErrorHandlerPort
}

// NewMockErrorHandlerPort creates a new mock instance.
func NewMockErrorHandlerPort(ctrl *gomock.Controller) *MockErrorHandlerPort {
	mock := &MockErrorHandlerPort{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandlerPort) EXPECT() *MockErrorHandlerPortMockRecorder {
	return m.recorder
}

// CreateDatabaseError mocks base method.
func (m *MockErrorHandlerPort) CreateDatabaseError(message string, cause error, arg2 map[string]any) error_handler_port.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseError", message, cause, arg2)
	ret0, _ := ret[0].(error_handler_port.AppError)
	return ret0
}

// CreateDatabaseError indicates an expected call of CreateDatabaseError.
func (mr *MockErrorHandlerPortMockRecorder) CreateDatabaseError(message, cause, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseError", reflect.TypeOf((*MockErrorHandlerPort)(nil).CreateDatabaseError), message, cause, arg2)
}

// CreateExternalAPIError mocks base method.
func (m *MockErrorHandlerPort) CreateExternalAPIError(message string, cause error, arg2 map[string]any) error_handler_port.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExternalAPIError", message, cause, arg2)
	ret0, _ := ret[0].(error_handler_port.AppError)
	return ret0
}

// CreateExternalAPIError indicates an expected call of CreateExternalAPIError.
func (mr *MockErrorHandlerPortMockRecorder) CreateExternalAPIError(message, cause, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalAPIError", reflect.TypeOf((*MockErrorHandlerPort)(nil).CreateExternalAPIError), message, cause, arg2)
}

// CreateRateLimitError mocks base method.
func (m *MockErrorHandlerPort) CreateRateLimitError(message string, cause error, arg2 map[string]any) error_handler_port.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateLimitError", message, cause, arg2)
	ret0, _ := ret[0].(error_handler_port.AppError)
	return ret0
}

// CreateRateLimitError indicates an expected call of CreateRateLimitError.
func (mr *MockErrorHandlerPortMockRecorder) CreateRateLimitError(message, cause, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimitError", reflect.TypeOf((*MockErrorHandlerPort)(nil).CreateRateLimitError), message, cause, arg2)
}

// CreateTimeoutError mocks base method.
func (m *MockErrorHandlerPort) CreateTimeoutError(message string, cause error, arg2 map[string]any) error_handler_port.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeoutError", message, cause, arg2)
	ret0, _ := ret[0].(error_handler_port.AppError)
	return ret0
}

// CreateTimeoutError indicates an expected call of CreateTimeoutError.
func (mr *MockErrorHandlerPortMockRecorder) CreateTimeoutError(message, cause, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeoutError", reflect.TypeOf((*MockErrorHandlerPort)(nil).CreateTimeoutError), message, cause, arg2)
}

// CreateValidationError mocks base method.
func (m *MockErrorHandlerPort) CreateValidationError(message string, arg1 map[string]any) error_handler_port.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValidationError", message, arg1)
	ret0, _ := ret[0].(error_handler_port.AppError)
	return ret0
}

// CreateValidationError indicates an expected call of CreateValidationError.
func (mr *MockErrorHandlerPortMockRecorder) CreateValidationError(message, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValidationError", reflect.TypeOf((*MockErrorHandlerPort)(nil).CreateValidationError), message, arg1)
}

// HandleError mocks base method.
func (m *MockErrorHandlerPort) HandleError(ctx context.Context, err error, operation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleError", ctx, err, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleError indicates an expected call of HandleError.
func (mr *MockErrorHandlerPortMockRecorder) HandleError(ctx, err, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockErrorHandlerPort)(nil).HandleError), ctx, err, operation)
}

// LogError mocks base method.
func (m *MockErrorHandlerPort) LogError(ctx context.Context, logger *slog.Logger, err error, operation string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", ctx, logger, err, operation)
}

// LogError indicates an expected call of LogError.
func (mr *MockErrorHandlerPortMockRecorder) LogError(ctx, logger, err, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockErrorHandlerPort)(nil).LogError), ctx, logger, err, operation)
}
