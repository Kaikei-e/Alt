// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/config_port/config_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/config_port/config_port.go -destination=./alt-backend/app/mocks/mock_config_port.go -package=mocks ConfigPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	config_port "alt/port/config_port"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigPort is a mock of ConfigPort interface.
type MockConfigPort struct {
	ctrl     *gomock.Controller
	recorder *MockConfigPortMockRecorder
	isgomock struct{}
}

// MockConfigPortMockRecorder is the mock recorder for MockConfigPort.
type MockConfigPortMockRecorder struct {
	mock *MockConfigPort
}

// NewMockConfigPort creates a new mock instance.
func NewMockConfigPort(ctrl *gomock.Controller) *MockConfigPort {
	mock := &MockConfigPort{ctrl: ctrl}
	mock.recorder = &MockConfigPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigPort) EXPECT() *MockConfigPortMockRecorder {
	return m.recorder
}

// GetCacheConfig mocks base method.
func (m *MockConfigPort) GetCacheConfig() config_port.CacheConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheConfig")
	ret0, _ := ret[0].(config_port.CacheConfig)
	return ret0
}

// GetCacheConfig indicates an expected call of GetCacheConfig.
func (mr *MockConfigPortMockRecorder) GetCacheConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheConfig", reflect.TypeOf((*MockConfigPort)(nil).GetCacheConfig))
}

// GetDatabaseConfig mocks base method.
func (m *MockConfigPort) GetDatabaseConfig() config_port.DatabaseConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseConfig")
	ret0, _ := ret[0].(config_port.DatabaseConfig)
	return ret0
}

// GetDatabaseConfig indicates an expected call of GetDatabaseConfig.
func (mr *MockConfigPortMockRecorder) GetDatabaseConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseConfig", reflect.TypeOf((*MockConfigPort)(nil).GetDatabaseConfig))
}

// GetLoggingConfig mocks base method.
func (m *MockConfigPort) GetLoggingConfig() config_port.LoggingConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingConfig")
	ret0, _ := ret[0].(config_port.LoggingConfig)
	return ret0
}

// GetLoggingConfig indicates an expected call of GetLoggingConfig.
func (mr *MockConfigPortMockRecorder) GetLoggingConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfig", reflect.TypeOf((*MockConfigPort)(nil).GetLoggingConfig))
}

// GetRateLimitConfig mocks base method.
func (m *MockConfigPort) GetRateLimitConfig() config_port.RateLimitConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitConfig")
	ret0, _ := ret[0].(config_port.RateLimitConfig)
	return ret0
}

// GetRateLimitConfig indicates an expected call of GetRateLimitConfig.
func (mr *MockConfigPortMockRecorder) GetRateLimitConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitConfig", reflect.TypeOf((*MockConfigPort)(nil).GetRateLimitConfig))
}

// GetServerPort mocks base method.
func (m *MockConfigPort) GetServerPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetServerPort indicates an expected call of GetServerPort.
func (mr *MockConfigPortMockRecorder) GetServerPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerPort", reflect.TypeOf((*MockConfigPort)(nil).GetServerPort))
}

// GetServerTimeouts mocks base method.
func (m *MockConfigPort) GetServerTimeouts() config_port.ServerTimeouts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerTimeouts")
	ret0, _ := ret[0].(config_port.ServerTimeouts)
	return ret0
}

// GetServerTimeouts indicates an expected call of GetServerTimeouts.
func (mr *MockConfigPortMockRecorder) GetServerTimeouts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerTimeouts", reflect.TypeOf((*MockConfigPort)(nil).GetServerTimeouts))
}
