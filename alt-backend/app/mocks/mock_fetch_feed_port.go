// Code generated by MockGen. DO NOT EDIT.
// Source: fetch_port.go
//
// Generated by this command:
//
//	mockgen -source=fetch_port.go -destination=../../mocks/mock_fetch_feed_port.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockFetchSingleFeedPort is a mock of FetchSingleFeedPort interface.
type MockFetchSingleFeedPort struct {
	ctrl     *gomock.Controller
	recorder *MockFetchSingleFeedPortMockRecorder
	isgomock struct{}
}

// MockFetchSingleFeedPortMockRecorder is the mock recorder for MockFetchSingleFeedPort.
type MockFetchSingleFeedPortMockRecorder struct {
	mock *MockFetchSingleFeedPort
}

// NewMockFetchSingleFeedPort creates a new mock instance.
func NewMockFetchSingleFeedPort(ctrl *gomock.Controller) *MockFetchSingleFeedPort {
	mock := &MockFetchSingleFeedPort{ctrl: ctrl}
	mock.recorder = &MockFetchSingleFeedPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchSingleFeedPort) EXPECT() *MockFetchSingleFeedPortMockRecorder {
	return m.recorder
}

// FetchSingleFeed mocks base method.
func (m *MockFetchSingleFeedPort) FetchSingleFeed(ctx context.Context) (*domain.RSSFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSingleFeed", ctx)
	ret0, _ := ret[0].(*domain.RSSFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSingleFeed indicates an expected call of FetchSingleFeed.
func (mr *MockFetchSingleFeedPortMockRecorder) FetchSingleFeed(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSingleFeed", reflect.TypeOf((*MockFetchSingleFeedPort)(nil).FetchSingleFeed), ctx)
}

// MockFetchFeedsPort is a mock of FetchFeedsPort interface.
type MockFetchFeedsPort struct {
	ctrl     *gomock.Controller
	recorder *MockFetchFeedsPortMockRecorder
	isgomock struct{}
}

// MockFetchFeedsPortMockRecorder is the mock recorder for MockFetchFeedsPort.
type MockFetchFeedsPortMockRecorder struct {
	mock *MockFetchFeedsPort
}

// NewMockFetchFeedsPort creates a new mock instance.
func NewMockFetchFeedsPort(ctrl *gomock.Controller) *MockFetchFeedsPort {
	mock := &MockFetchFeedsPort{ctrl: ctrl}
	mock.recorder = &MockFetchFeedsPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchFeedsPort) EXPECT() *MockFetchFeedsPortMockRecorder {
	return m.recorder
}

// FetchFavoriteFeedsListCursor mocks base method.
func (m *MockFetchFeedsPort) FetchFavoriteFeedsListCursor(ctx context.Context, cursor *time.Time, limit int) ([]*domain.FeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFavoriteFeedsListCursor", ctx, cursor, limit)
	ret0, _ := ret[0].([]*domain.FeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFavoriteFeedsListCursor indicates an expected call of FetchFavoriteFeedsListCursor.
func (mr *MockFetchFeedsPortMockRecorder) FetchFavoriteFeedsListCursor(ctx, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFavoriteFeedsListCursor", reflect.TypeOf((*MockFetchFeedsPort)(nil).FetchFavoriteFeedsListCursor), ctx, cursor, limit)
}

// FetchFeeds mocks base method.
func (m *MockFetchFeedsPort) FetchFeeds(ctx context.Context, link string) ([]*domain.FeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeeds", ctx, link)
	ret0, _ := ret[0].([]*domain.FeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeeds indicates an expected call of FetchFeeds.
func (mr *MockFetchFeedsPortMockRecorder) FetchFeeds(ctx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeeds", reflect.TypeOf((*MockFetchFeedsPort)(nil).FetchFeeds), ctx, link)
}

// FetchFeedsList mocks base method.
func (m *MockFetchFeedsPort) FetchFeedsList(ctx context.Context) ([]*domain.FeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeedsList", ctx)
	ret0, _ := ret[0].([]*domain.FeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeedsList indicates an expected call of FetchFeedsList.
func (mr *MockFetchFeedsPortMockRecorder) FetchFeedsList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeedsList", reflect.TypeOf((*MockFetchFeedsPort)(nil).FetchFeedsList), ctx)
}

// FetchFeedsListCursor mocks base method.
func (m *MockFetchFeedsPort) FetchFeedsListCursor(ctx context.Context, cursor *time.Time, limit int) ([]*domain.FeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeedsListCursor", ctx, cursor, limit)
	ret0, _ := ret[0].([]*domain.FeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeedsListCursor indicates an expected call of FetchFeedsListCursor.
func (mr *MockFetchFeedsPortMockRecorder) FetchFeedsListCursor(ctx, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeedsListCursor", reflect.TypeOf((*MockFetchFeedsPort)(nil).FetchFeedsListCursor), ctx, cursor, limit)
}

// FetchFeedsListLimit mocks base method.
func (m *MockFetchFeedsPort) FetchFeedsListLimit(ctx context.Context, offset int) ([]*domain.FeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeedsListLimit", ctx, offset)
	ret0, _ := ret[0].([]*domain.FeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeedsListLimit indicates an expected call of FetchFeedsListLimit.
func (mr *MockFetchFeedsPortMockRecorder) FetchFeedsListLimit(ctx, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeedsListLimit", reflect.TypeOf((*MockFetchFeedsPort)(nil).FetchFeedsListLimit), ctx, offset)
}

// FetchFeedsListPage mocks base method.
func (m *MockFetchFeedsPort) FetchFeedsListPage(ctx context.Context, page int) ([]*domain.FeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeedsListPage", ctx, page)
	ret0, _ := ret[0].([]*domain.FeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeedsListPage indicates an expected call of FetchFeedsListPage.
func (mr *MockFetchFeedsPortMockRecorder) FetchFeedsListPage(ctx, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeedsListPage", reflect.TypeOf((*MockFetchFeedsPort)(nil).FetchFeedsListPage), ctx, page)
}

// FetchReadFeedsListCursor mocks base method.
func (m *MockFetchFeedsPort) FetchReadFeedsListCursor(ctx context.Context, cursor *time.Time, limit int) ([]*domain.FeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchReadFeedsListCursor", ctx, cursor, limit)
	ret0, _ := ret[0].([]*domain.FeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchReadFeedsListCursor indicates an expected call of FetchReadFeedsListCursor.
func (mr *MockFetchFeedsPortMockRecorder) FetchReadFeedsListCursor(ctx, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchReadFeedsListCursor", reflect.TypeOf((*MockFetchFeedsPort)(nil).FetchReadFeedsListCursor), ctx, cursor, limit)
}

// FetchUnreadFeedsListCursor mocks base method.
func (m *MockFetchFeedsPort) FetchUnreadFeedsListCursor(ctx context.Context, cursor *time.Time, limit int) ([]*domain.FeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUnreadFeedsListCursor", ctx, cursor, limit)
	ret0, _ := ret[0].([]*domain.FeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUnreadFeedsListCursor indicates an expected call of FetchUnreadFeedsListCursor.
func (mr *MockFetchFeedsPortMockRecorder) FetchUnreadFeedsListCursor(ctx, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUnreadFeedsListCursor", reflect.TypeOf((*MockFetchFeedsPort)(nil).FetchUnreadFeedsListCursor), ctx, cursor, limit)
}
