// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/fetch_feed_port/fetch_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/fetch_feed_port/fetch_port.go -destination=./alt-backend/app/mocks/mock_fetch_feed_port.go -package=mocks FetchSingleFeedPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFetchSingleFeedPort is a mock of FetchSingleFeedPort interface.
type MockFetchSingleFeedPort struct {
	ctrl     *gomock.Controller
	recorder *MockFetchSingleFeedPortMockRecorder
	isgomock struct{}
}

// MockFetchSingleFeedPortMockRecorder is the mock recorder for MockFetchSingleFeedPort.
type MockFetchSingleFeedPortMockRecorder struct {
	mock *MockFetchSingleFeedPort
}

// NewMockFetchSingleFeedPort creates a new mock instance.
func NewMockFetchSingleFeedPort(ctrl *gomock.Controller) *MockFetchSingleFeedPort {
	mock := &MockFetchSingleFeedPort{ctrl: ctrl}
	mock.recorder = &MockFetchSingleFeedPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchSingleFeedPort) EXPECT() *MockFetchSingleFeedPortMockRecorder {
	return m.recorder
}

// FetchSingleFeed mocks base method.
func (m *MockFetchSingleFeedPort) FetchSingleFeed() (*domain.RSSFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSingleFeed")
	ret0, _ := ret[0].(*domain.RSSFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSingleFeed indicates an expected call of FetchSingleFeed.
func (mr *MockFetchSingleFeedPortMockRecorder) FetchSingleFeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSingleFeed", reflect.TypeOf((*MockFetchSingleFeedPort)(nil).FetchSingleFeed))
}
