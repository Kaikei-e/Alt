// Code generated by MockGen. DO NOT EDIT.
// Source: gateway/feed_url_link_gateway/feed_url_link_gateway.go
//
// Generated by this command:
//
//	mockgen -source=gateway/feed_url_link_gateway/feed_url_link_gateway.go -destination=mocks/mock_feed_url_link_driver.go -package=mocks FeedURLLinkDriver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "alt/driver/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeedURLLinkDriver is a mock of FeedURLLinkDriver interface.
type MockFeedURLLinkDriver struct {
	ctrl     *gomock.Controller
	recorder *MockFeedURLLinkDriverMockRecorder
	isgomock struct{}
}

// MockFeedURLLinkDriverMockRecorder is the mock recorder for MockFeedURLLinkDriver.
type MockFeedURLLinkDriverMockRecorder struct {
	mock *MockFeedURLLinkDriver
}

// NewMockFeedURLLinkDriver creates a new mock instance.
func NewMockFeedURLLinkDriver(ctrl *gomock.Controller) *MockFeedURLLinkDriver {
	mock := &MockFeedURLLinkDriver{ctrl: ctrl}
	mock.recorder = &MockFeedURLLinkDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedURLLinkDriver) EXPECT() *MockFeedURLLinkDriverMockRecorder {
	return m.recorder
}

// GetFeedURLsByArticleIDs mocks base method.
func (m *MockFeedURLLinkDriver) GetFeedURLsByArticleIDs(ctx context.Context, articleIDs []string) ([]models.FeedAndArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedURLsByArticleIDs", ctx, articleIDs)
	ret0, _ := ret[0].([]models.FeedAndArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedURLsByArticleIDs indicates an expected call of GetFeedURLsByArticleIDs.
func (mr *MockFeedURLLinkDriverMockRecorder) GetFeedURLsByArticleIDs(ctx, articleIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedURLsByArticleIDs", reflect.TypeOf((*MockFeedURLLinkDriver)(nil).GetFeedURLsByArticleIDs), ctx, articleIDs)
}
