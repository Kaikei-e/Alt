// Code generated by MockGen. DO NOT EDIT.
// Source: ./alt-backend/app/port/feed_search_port/search_by_title_port.go
//
// Generated by this command:
//
//	mockgen -source=./alt-backend/app/port/feed_search_port/search_by_title_port.go -destination=./alt-backend/app/mocks/mock_feed_search_port.go -package=mocks SearchByTitlePort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "alt/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSearchByTitlePort is a mock of SearchByTitlePort interface.
type MockSearchByTitlePort struct {
	ctrl     *gomock.Controller
	recorder *MockSearchByTitlePortMockRecorder
	isgomock struct{}
}

// MockSearchByTitlePortMockRecorder is the mock recorder for MockSearchByTitlePort.
type MockSearchByTitlePortMockRecorder struct {
	mock *MockSearchByTitlePort
}

// NewMockSearchByTitlePort creates a new mock instance.
func NewMockSearchByTitlePort(ctrl *gomock.Controller) *MockSearchByTitlePort {
	mock := &MockSearchByTitlePort{ctrl: ctrl}
	mock.recorder = &MockSearchByTitlePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchByTitlePort) EXPECT() *MockSearchByTitlePortMockRecorder {
	return m.recorder
}

// SearchByTitle mocks base method.
func (m *MockSearchByTitlePort) SearchByTitle(ctx context.Context, query string) ([]*domain.FeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByTitle", ctx, query)
	ret0, _ := ret[0].([]*domain.FeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByTitle indicates an expected call of SearchByTitle.
func (mr *MockSearchByTitlePortMockRecorder) SearchByTitle(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByTitle", reflect.TypeOf((*MockSearchByTitlePort)(nil).SearchByTitle), ctx, query)
}
