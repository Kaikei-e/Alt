// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mocks_test.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
	isgomock struct{}
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// GenerateCSRFToken mocks base method.
func (m *MockAuthClient) GenerateCSRFToken(ctx context.Context, sessionToken string) (*CSRFTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCSRFToken", ctx, sessionToken)
	ret0, _ := ret[0].(*CSRFTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCSRFToken indicates an expected call of GenerateCSRFToken.
func (mr *MockAuthClientMockRecorder) GenerateCSRFToken(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCSRFToken", reflect.TypeOf((*MockAuthClient)(nil).GenerateCSRFToken), ctx, sessionToken)
}

// HealthCheck mocks base method.
func (m *MockAuthClient) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockAuthClientMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockAuthClient)(nil).HealthCheck), ctx)
}

// ValidateCSRFToken mocks base method.
func (m *MockAuthClient) ValidateCSRFToken(ctx context.Context, token, sessionToken string) (*CSRFValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCSRFToken", ctx, token, sessionToken)
	ret0, _ := ret[0].(*CSRFValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCSRFToken indicates an expected call of ValidateCSRFToken.
func (mr *MockAuthClientMockRecorder) ValidateCSRFToken(ctx, token, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCSRFToken", reflect.TypeOf((*MockAuthClient)(nil).ValidateCSRFToken), ctx, token, sessionToken)
}

// ValidateSession mocks base method.
func (m *MockAuthClient) ValidateSession(ctx context.Context, sessionToken, tenantID string) (*SessionValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSession", ctx, sessionToken, tenantID)
	ret0, _ := ret[0].(*SessionValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSession indicates an expected call of ValidateSession.
func (mr *MockAuthClientMockRecorder) ValidateSession(ctx, sessionToken, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSession", reflect.TypeOf((*MockAuthClient)(nil).ValidateSession), ctx, sessionToken, tenantID)
}

// ValidateSessionWithCookie mocks base method.
func (m *MockAuthClient) ValidateSessionWithCookie(ctx context.Context, cookieHeader string) (*SessionValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSessionWithCookie", ctx, cookieHeader)
	ret0, _ := ret[0].(*SessionValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSessionWithCookie indicates an expected call of ValidateSessionWithCookie.
func (mr *MockAuthClientMockRecorder) ValidateSessionWithCookie(ctx, cookieHeader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSessionWithCookie", reflect.TypeOf((*MockAuthClient)(nil).ValidateSessionWithCookie), ctx, cookieHeader)
}
