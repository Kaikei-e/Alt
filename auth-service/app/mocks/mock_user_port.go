// Code generated by MockGen. DO NOT EDIT.
// Source: user_port.go
//
// Generated by this command:
//
//	mockgen -source=user_port.go -destination=../mocks/mock_user_port.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	domain "auth-service/app/domain"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
	isgomock struct{}
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserUsecase) CreateUser(ctx context.Context, req *domain.CreateUserRequest) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUsecaseMockRecorder) CreateUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUsecase)(nil).CreateUser), ctx, req)
}

// DeleteUser mocks base method.
func (m *MockUserUsecase) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserUsecaseMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserUsecase)(nil).DeleteUser), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockUserUsecase) GetUserByEmail(ctx context.Context, email string, tenantID uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email, tenantID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserUsecaseMockRecorder) GetUserByEmail(ctx, email, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserUsecase)(nil).GetUserByEmail), ctx, email, tenantID)
}

// GetUserByID mocks base method.
func (m *MockUserUsecase) GetUserByID(ctx context.Context, userID uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserUsecaseMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserUsecase)(nil).GetUserByID), ctx, userID)
}

// GetUserByKratosID mocks base method.
func (m *MockUserUsecase) GetUserByKratosID(ctx context.Context, kratosID uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByKratosID", ctx, kratosID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByKratosID indicates an expected call of GetUserByKratosID.
func (mr *MockUserUsecaseMockRecorder) GetUserByKratosID(ctx, kratosID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByKratosID", reflect.TypeOf((*MockUserUsecase)(nil).GetUserByKratosID), ctx, kratosID)
}

// GetUserProfile mocks base method.
func (m *MockUserUsecase) GetUserProfile(ctx context.Context, userID uuid.UUID) (*domain.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, userID)
	ret0, _ := ret[0].(*domain.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserUsecaseMockRecorder) GetUserProfile(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserUsecase)(nil).GetUserProfile), ctx, userID)
}

// ListUsersByTenant mocks base method.
func (m *MockUserUsecase) ListUsersByTenant(ctx context.Context, tenantID uuid.UUID, limit, offset int) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByTenant", ctx, tenantID, limit, offset)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByTenant indicates an expected call of ListUsersByTenant.
func (mr *MockUserUsecaseMockRecorder) ListUsersByTenant(ctx, tenantID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByTenant", reflect.TypeOf((*MockUserUsecase)(nil).ListUsersByTenant), ctx, tenantID, limit, offset)
}

// UpdateUserProfile mocks base method.
func (m *MockUserUsecase) UpdateUserProfile(ctx context.Context, userID uuid.UUID, profile *domain.UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, userID, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserUsecaseMockRecorder) UpdateUserProfile(ctx, userID, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserUsecase)(nil).UpdateUserProfile), ctx, userID, profile)
}

// MockUserGateway is a mock of UserGateway interface.
type MockUserGateway struct {
	ctrl     *gomock.Controller
	recorder *MockUserGatewayMockRecorder
	isgomock struct{}
}

// MockUserGatewayMockRecorder is the mock recorder for MockUserGateway.
type MockUserGatewayMockRecorder struct {
	mock *MockUserGateway
}

// NewMockUserGateway creates a new mock instance.
func NewMockUserGateway(ctrl *gomock.Controller) *MockUserGateway {
	mock := &MockUserGateway{ctrl: ctrl}
	mock.recorder = &MockUserGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGateway) EXPECT() *MockUserGatewayMockRecorder {
	return m.recorder
}

// CountUsersByTenant mocks base method.
func (m *MockUserGateway) CountUsersByTenant(ctx context.Context, tenantID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersByTenant", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsersByTenant indicates an expected call of CountUsersByTenant.
func (mr *MockUserGatewayMockRecorder) CountUsersByTenant(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersByTenant", reflect.TypeOf((*MockUserGateway)(nil).CountUsersByTenant), ctx, tenantID)
}

// Create mocks base method.
func (m *MockUserGateway) Create(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserGatewayMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserGateway)(nil).Create), ctx, user)
}

// CreateUser mocks base method.
func (m *MockUserGateway) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserGatewayMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserGateway)(nil).CreateUser), ctx, user)
}

// CreateUserInvitation mocks base method.
func (m *MockUserGateway) CreateUserInvitation(ctx context.Context, tenantID uuid.UUID, req any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserInvitation", ctx, tenantID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserInvitation indicates an expected call of CreateUserInvitation.
func (mr *MockUserGatewayMockRecorder) CreateUserInvitation(ctx, tenantID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserInvitation", reflect.TypeOf((*MockUserGateway)(nil).CreateUserInvitation), ctx, tenantID, req)
}

// DeleteUser mocks base method.
func (m *MockUserGateway) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserGatewayMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserGateway)(nil).DeleteUser), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockUserGateway) GetUserByEmail(ctx context.Context, email string, tenantID uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email, tenantID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserGatewayMockRecorder) GetUserByEmail(ctx, email, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserGateway)(nil).GetUserByEmail), ctx, email, tenantID)
}

// GetUserByID mocks base method.
func (m *MockUserGateway) GetUserByID(ctx context.Context, userID uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserGatewayMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserGateway)(nil).GetUserByID), ctx, userID)
}

// GetUserByKratosID mocks base method.
func (m *MockUserGateway) GetUserByKratosID(ctx context.Context, kratosID uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByKratosID", ctx, kratosID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByKratosID indicates an expected call of GetUserByKratosID.
func (mr *MockUserGatewayMockRecorder) GetUserByKratosID(ctx, kratosID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByKratosID", reflect.TypeOf((*MockUserGateway)(nil).GetUserByKratosID), ctx, kratosID)
}

// HashPassword mocks base method.
func (m *MockUserGateway) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockUserGatewayMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockUserGateway)(nil).HashPassword), password)
}

// ListUsersByTenant mocks base method.
func (m *MockUserGateway) ListUsersByTenant(ctx context.Context, tenantID uuid.UUID, limit, offset int) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByTenant", ctx, tenantID, limit, offset)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByTenant indicates an expected call of ListUsersByTenant.
func (mr *MockUserGatewayMockRecorder) ListUsersByTenant(ctx, tenantID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByTenant", reflect.TypeOf((*MockUserGateway)(nil).ListUsersByTenant), ctx, tenantID, limit, offset)
}

// UpdateUser mocks base method.
func (m *MockUserGateway) UpdateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserGatewayMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserGateway)(nil).UpdateUser), ctx, user)
}

// MockUserRepositoryPort is a mock of UserRepositoryPort interface.
type MockUserRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryPortMockRecorder
	isgomock struct{}
}

// MockUserRepositoryPortMockRecorder is the mock recorder for MockUserRepositoryPort.
type MockUserRepositoryPortMockRecorder struct {
	mock *MockUserRepositoryPort
}

// NewMockUserRepositoryPort creates a new mock instance.
func NewMockUserRepositoryPort(ctrl *gomock.Controller) *MockUserRepositoryPort {
	mock := &MockUserRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryPort) EXPECT() *MockUserRepositoryPortMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryPort) Create(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryPortMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryPort)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUserRepositoryPort) Delete(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryPortMockRecorder) Delete(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepositoryPort)(nil).Delete), ctx, userID)
}

// GetByEmail mocks base method.
func (m *MockUserRepositoryPort) GetByEmail(ctx context.Context, email string, tenantID uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email, tenantID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryPortMockRecorder) GetByEmail(ctx, email, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepositoryPort)(nil).GetByEmail), ctx, email, tenantID)
}

// GetByID mocks base method.
func (m *MockUserRepositoryPort) GetByID(ctx context.Context, userID uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryPortMockRecorder) GetByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepositoryPort)(nil).GetByID), ctx, userID)
}

// GetByKratosID mocks base method.
func (m *MockUserRepositoryPort) GetByKratosID(ctx context.Context, kratosID uuid.UUID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKratosID", ctx, kratosID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKratosID indicates an expected call of GetByKratosID.
func (mr *MockUserRepositoryPortMockRecorder) GetByKratosID(ctx, kratosID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKratosID", reflect.TypeOf((*MockUserRepositoryPort)(nil).GetByKratosID), ctx, kratosID)
}

// ListByTenant mocks base method.
func (m *MockUserRepositoryPort) ListByTenant(ctx context.Context, tenantID uuid.UUID, limit, offset int) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTenant", ctx, tenantID, limit, offset)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTenant indicates an expected call of ListByTenant.
func (mr *MockUserRepositoryPortMockRecorder) ListByTenant(ctx, tenantID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTenant", reflect.TypeOf((*MockUserRepositoryPort)(nil).ListByTenant), ctx, tenantID, limit, offset)
}

// Update mocks base method.
func (m *MockUserRepositoryPort) Update(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryPortMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryPort)(nil).Update), ctx, user)
}
