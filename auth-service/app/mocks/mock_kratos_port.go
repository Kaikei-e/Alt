// Code generated by MockGen. DO NOT EDIT.
// Source: kratos_port.go
//
// Generated by this command:
//
//	mockgen -source=kratos_port.go -destination=../mocks/mock_kratos_port.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	domain "auth-service/app/domain"
	context "context"
	http "net/http"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockKratosClient is a mock of KratosClient interface.
type MockKratosClient struct {
	ctrl     *gomock.Controller
	recorder *MockKratosClientMockRecorder
	isgomock struct{}
}

// MockKratosClientMockRecorder is the mock recorder for MockKratosClient.
type MockKratosClientMockRecorder struct {
	mock *MockKratosClient
}

// NewMockKratosClient creates a new mock instance.
func NewMockKratosClient(ctrl *gomock.Controller) *MockKratosClient {
	mock := &MockKratosClient{ctrl: ctrl}
	mock.recorder = &MockKratosClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKratosClient) EXPECT() *MockKratosClientMockRecorder {
	return m.recorder
}

// AdminCreateIdentity mocks base method.
func (m *MockKratosClient) AdminCreateIdentity(ctx context.Context, identity *domain.KratosIdentity) (*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCreateIdentity", ctx, identity)
	ret0, _ := ret[0].(*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateIdentity indicates an expected call of AdminCreateIdentity.
func (mr *MockKratosClientMockRecorder) AdminCreateIdentity(ctx, identity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateIdentity", reflect.TypeOf((*MockKratosClient)(nil).AdminCreateIdentity), ctx, identity)
}

// AdminDeleteIdentity mocks base method.
func (m *MockKratosClient) AdminDeleteIdentity(ctx context.Context, identityID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDeleteIdentity", ctx, identityID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDeleteIdentity indicates an expected call of AdminDeleteIdentity.
func (mr *MockKratosClientMockRecorder) AdminDeleteIdentity(ctx, identityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDeleteIdentity", reflect.TypeOf((*MockKratosClient)(nil).AdminDeleteIdentity), ctx, identityID)
}

// AdminUpdateIdentity mocks base method.
func (m *MockKratosClient) AdminUpdateIdentity(ctx context.Context, identityID string, identity *domain.KratosIdentity) (*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateIdentity", ctx, identityID, identity)
	ret0, _ := ret[0].(*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateIdentity indicates an expected call of AdminUpdateIdentity.
func (mr *MockKratosClientMockRecorder) AdminUpdateIdentity(ctx, identityID, identity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateIdentity", reflect.TypeOf((*MockKratosClient)(nil).AdminUpdateIdentity), ctx, identityID, identity)
}

// CreateIdentity mocks base method.
func (m *MockKratosClient) CreateIdentity(ctx context.Context, traits map[string]any, schemaID string) (*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentity", ctx, traits, schemaID)
	ret0, _ := ret[0].(*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentity indicates an expected call of CreateIdentity.
func (mr *MockKratosClientMockRecorder) CreateIdentity(ctx, traits, schemaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentity", reflect.TypeOf((*MockKratosClient)(nil).CreateIdentity), ctx, traits, schemaID)
}

// CreateLoginFlow mocks base method.
func (m *MockKratosClient) CreateLoginFlow(ctx context.Context, tenantID uuid.UUID, refresh bool, returnTo string) (*domain.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginFlow", ctx, tenantID, refresh, returnTo)
	ret0, _ := ret[0].(*domain.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoginFlow indicates an expected call of CreateLoginFlow.
func (mr *MockKratosClientMockRecorder) CreateLoginFlow(ctx, tenantID, refresh, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginFlow", reflect.TypeOf((*MockKratosClient)(nil).CreateLoginFlow), ctx, tenantID, refresh, returnTo)
}

// CreateLogoutFlow mocks base method.
func (m *MockKratosClient) CreateLogoutFlow(ctx context.Context, sessionToken string, tenantID uuid.UUID, returnTo string) (*domain.LogoutFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogoutFlow", ctx, sessionToken, tenantID, returnTo)
	ret0, _ := ret[0].(*domain.LogoutFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogoutFlow indicates an expected call of CreateLogoutFlow.
func (mr *MockKratosClientMockRecorder) CreateLogoutFlow(ctx, sessionToken, tenantID, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogoutFlow", reflect.TypeOf((*MockKratosClient)(nil).CreateLogoutFlow), ctx, sessionToken, tenantID, returnTo)
}

// CreateRecoveryFlow mocks base method.
func (m *MockKratosClient) CreateRecoveryFlow(ctx context.Context, tenantID uuid.UUID, returnTo string) (*domain.RecoveryFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryFlow", ctx, tenantID, returnTo)
	ret0, _ := ret[0].(*domain.RecoveryFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecoveryFlow indicates an expected call of CreateRecoveryFlow.
func (mr *MockKratosClientMockRecorder) CreateRecoveryFlow(ctx, tenantID, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryFlow", reflect.TypeOf((*MockKratosClient)(nil).CreateRecoveryFlow), ctx, tenantID, returnTo)
}

// CreateRegistrationFlow mocks base method.
func (m *MockKratosClient) CreateRegistrationFlow(ctx context.Context, tenantID uuid.UUID, returnTo string) (*domain.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationFlow", ctx, tenantID, returnTo)
	ret0, _ := ret[0].(*domain.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationFlow indicates an expected call of CreateRegistrationFlow.
func (mr *MockKratosClientMockRecorder) CreateRegistrationFlow(ctx, tenantID, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationFlow", reflect.TypeOf((*MockKratosClient)(nil).CreateRegistrationFlow), ctx, tenantID, returnTo)
}

// CreateSession mocks base method.
func (m *MockKratosClient) CreateSession(ctx context.Context, identityID, sessionToken string) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, identityID, sessionToken)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockKratosClientMockRecorder) CreateSession(ctx, identityID, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockKratosClient)(nil).CreateSession), ctx, identityID, sessionToken)
}

// CreateSettingsFlow mocks base method.
func (m *MockKratosClient) CreateSettingsFlow(ctx context.Context, sessionToken string, tenantID uuid.UUID, returnTo string) (*domain.SettingsFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSettingsFlow", ctx, sessionToken, tenantID, returnTo)
	ret0, _ := ret[0].(*domain.SettingsFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSettingsFlow indicates an expected call of CreateSettingsFlow.
func (mr *MockKratosClientMockRecorder) CreateSettingsFlow(ctx, sessionToken, tenantID, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSettingsFlow", reflect.TypeOf((*MockKratosClient)(nil).CreateSettingsFlow), ctx, sessionToken, tenantID, returnTo)
}

// CreateVerificationFlow mocks base method.
func (m *MockKratosClient) CreateVerificationFlow(ctx context.Context, tenantID uuid.UUID, returnTo string) (*domain.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerificationFlow", ctx, tenantID, returnTo)
	ret0, _ := ret[0].(*domain.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerificationFlow indicates an expected call of CreateVerificationFlow.
func (mr *MockKratosClientMockRecorder) CreateVerificationFlow(ctx, tenantID, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerificationFlow", reflect.TypeOf((*MockKratosClient)(nil).CreateVerificationFlow), ctx, tenantID, returnTo)
}

// DeleteIdentity mocks base method.
func (m *MockKratosClient) DeleteIdentity(ctx context.Context, identityID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentity", ctx, identityID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentity indicates an expected call of DeleteIdentity.
func (mr *MockKratosClientMockRecorder) DeleteIdentity(ctx, identityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentity", reflect.TypeOf((*MockKratosClient)(nil).DeleteIdentity), ctx, identityID)
}

// GetIdentity mocks base method.
func (m *MockKratosClient) GetIdentity(ctx context.Context, identityID string) (*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", ctx, identityID)
	ret0, _ := ret[0].(*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockKratosClientMockRecorder) GetIdentity(ctx, identityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockKratosClient)(nil).GetIdentity), ctx, identityID)
}

// GetLoginFlow mocks base method.
func (m *MockKratosClient) GetLoginFlow(ctx context.Context, flowID string) (*domain.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginFlow indicates an expected call of GetLoginFlow.
func (mr *MockKratosClientMockRecorder) GetLoginFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginFlow", reflect.TypeOf((*MockKratosClient)(nil).GetLoginFlow), ctx, flowID)
}

// GetRecoveryFlow mocks base method.
func (m *MockKratosClient) GetRecoveryFlow(ctx context.Context, flowID string) (*domain.RecoveryFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.RecoveryFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryFlow indicates an expected call of GetRecoveryFlow.
func (mr *MockKratosClientMockRecorder) GetRecoveryFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryFlow", reflect.TypeOf((*MockKratosClient)(nil).GetRecoveryFlow), ctx, flowID)
}

// GetRegistrationFlow mocks base method.
func (m *MockKratosClient) GetRegistrationFlow(ctx context.Context, flowID string) (*domain.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationFlow indicates an expected call of GetRegistrationFlow.
func (mr *MockKratosClientMockRecorder) GetRegistrationFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationFlow", reflect.TypeOf((*MockKratosClient)(nil).GetRegistrationFlow), ctx, flowID)
}

// GetSession mocks base method.
func (m *MockKratosClient) GetSession(ctx context.Context, sessionToken string) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionToken)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockKratosClientMockRecorder) GetSession(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockKratosClient)(nil).GetSession), ctx, sessionToken)
}

// GetSettingsFlow mocks base method.
func (m *MockKratosClient) GetSettingsFlow(ctx context.Context, flowID string) (*domain.SettingsFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingsFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.SettingsFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingsFlow indicates an expected call of GetSettingsFlow.
func (mr *MockKratosClientMockRecorder) GetSettingsFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsFlow", reflect.TypeOf((*MockKratosClient)(nil).GetSettingsFlow), ctx, flowID)
}

// GetVerificationFlow mocks base method.
func (m *MockKratosClient) GetVerificationFlow(ctx context.Context, flowID string) (*domain.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationFlow indicates an expected call of GetVerificationFlow.
func (mr *MockKratosClientMockRecorder) GetVerificationFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationFlow", reflect.TypeOf((*MockKratosClient)(nil).GetVerificationFlow), ctx, flowID)
}

// Health mocks base method.
func (m *MockKratosClient) Health(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockKratosClientMockRecorder) Health(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockKratosClient)(nil).Health), ctx)
}

// ListIdentities mocks base method.
func (m *MockKratosClient) ListIdentities(ctx context.Context, page, perPage int) ([]*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentities", ctx, page, perPage)
	ret0, _ := ret[0].([]*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentities indicates an expected call of ListIdentities.
func (mr *MockKratosClientMockRecorder) ListIdentities(ctx, page, perPage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentities", reflect.TypeOf((*MockKratosClient)(nil).ListIdentities), ctx, page, perPage)
}

// ListSessions mocks base method.
func (m *MockKratosClient) ListSessions(ctx context.Context, identityID string) ([]*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessions", ctx, identityID)
	ret0, _ := ret[0].([]*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessions indicates an expected call of ListSessions.
func (mr *MockKratosClientMockRecorder) ListSessions(ctx, identityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessions", reflect.TypeOf((*MockKratosClient)(nil).ListSessions), ctx, identityID)
}

// ParseSessionFromCookie mocks base method.
func (m *MockKratosClient) ParseSessionFromCookie(cookies []*http.Cookie) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSessionFromCookie", cookies)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSessionFromCookie indicates an expected call of ParseSessionFromCookie.
func (mr *MockKratosClientMockRecorder) ParseSessionFromCookie(cookies any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSessionFromCookie", reflect.TypeOf((*MockKratosClient)(nil).ParseSessionFromCookie), cookies)
}

// ParseSessionFromRequest mocks base method.
func (m *MockKratosClient) ParseSessionFromRequest(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSessionFromRequest", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSessionFromRequest indicates an expected call of ParseSessionFromRequest.
func (mr *MockKratosClientMockRecorder) ParseSessionFromRequest(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSessionFromRequest", reflect.TypeOf((*MockKratosClient)(nil).ParseSessionFromRequest), r)
}

// Ready mocks base method.
func (m *MockKratosClient) Ready(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockKratosClientMockRecorder) Ready(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockKratosClient)(nil).Ready), ctx)
}

// RevokeSession mocks base method.
func (m *MockKratosClient) RevokeSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSession indicates an expected call of RevokeSession.
func (mr *MockKratosClientMockRecorder) RevokeSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSession", reflect.TypeOf((*MockKratosClient)(nil).RevokeSession), ctx, sessionID)
}

// SubmitLoginFlow mocks base method.
func (m *MockKratosClient) SubmitLoginFlow(ctx context.Context, flowID string, body map[string]any) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitLoginFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitLoginFlow indicates an expected call of SubmitLoginFlow.
func (mr *MockKratosClientMockRecorder) SubmitLoginFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitLoginFlow", reflect.TypeOf((*MockKratosClient)(nil).SubmitLoginFlow), ctx, flowID, body)
}

// SubmitLogoutFlow mocks base method.
func (m *MockKratosClient) SubmitLogoutFlow(ctx context.Context, token, returnTo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitLogoutFlow", ctx, token, returnTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitLogoutFlow indicates an expected call of SubmitLogoutFlow.
func (mr *MockKratosClientMockRecorder) SubmitLogoutFlow(ctx, token, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitLogoutFlow", reflect.TypeOf((*MockKratosClient)(nil).SubmitLogoutFlow), ctx, token, returnTo)
}

// SubmitRecoveryFlow mocks base method.
func (m *MockKratosClient) SubmitRecoveryFlow(ctx context.Context, flowID string, body map[string]any) (*domain.RecoveryFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRecoveryFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.RecoveryFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRecoveryFlow indicates an expected call of SubmitRecoveryFlow.
func (mr *MockKratosClientMockRecorder) SubmitRecoveryFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRecoveryFlow", reflect.TypeOf((*MockKratosClient)(nil).SubmitRecoveryFlow), ctx, flowID, body)
}

// SubmitRegistrationFlow mocks base method.
func (m *MockKratosClient) SubmitRegistrationFlow(ctx context.Context, flowID string, body map[string]any) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRegistrationFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRegistrationFlow indicates an expected call of SubmitRegistrationFlow.
func (mr *MockKratosClientMockRecorder) SubmitRegistrationFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRegistrationFlow", reflect.TypeOf((*MockKratosClient)(nil).SubmitRegistrationFlow), ctx, flowID, body)
}

// SubmitSettingsFlow mocks base method.
func (m *MockKratosClient) SubmitSettingsFlow(ctx context.Context, flowID, sessionToken string, body map[string]any) (*domain.SettingsFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitSettingsFlow", ctx, flowID, sessionToken, body)
	ret0, _ := ret[0].(*domain.SettingsFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitSettingsFlow indicates an expected call of SubmitSettingsFlow.
func (mr *MockKratosClientMockRecorder) SubmitSettingsFlow(ctx, flowID, sessionToken, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitSettingsFlow", reflect.TypeOf((*MockKratosClient)(nil).SubmitSettingsFlow), ctx, flowID, sessionToken, body)
}

// SubmitVerificationFlow mocks base method.
func (m *MockKratosClient) SubmitVerificationFlow(ctx context.Context, flowID string, body map[string]any) (*domain.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitVerificationFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitVerificationFlow indicates an expected call of SubmitVerificationFlow.
func (mr *MockKratosClientMockRecorder) SubmitVerificationFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitVerificationFlow", reflect.TypeOf((*MockKratosClient)(nil).SubmitVerificationFlow), ctx, flowID, body)
}

// UpdateIdentity mocks base method.
func (m *MockKratosClient) UpdateIdentity(ctx context.Context, identityID string, traits map[string]any) (*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentity", ctx, identityID, traits)
	ret0, _ := ret[0].(*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentity indicates an expected call of UpdateIdentity.
func (mr *MockKratosClientMockRecorder) UpdateIdentity(ctx, identityID, traits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentity", reflect.TypeOf((*MockKratosClient)(nil).UpdateIdentity), ctx, identityID, traits)
}

// Version mocks base method.
func (m *MockKratosClient) Version(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockKratosClientMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKratosClient)(nil).Version), ctx)
}

// WhoAmI mocks base method.
func (m *MockKratosClient) WhoAmI(ctx context.Context, sessionToken string) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI", ctx, sessionToken)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoAmI indicates an expected call of WhoAmI.
func (mr *MockKratosClientMockRecorder) WhoAmI(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockKratosClient)(nil).WhoAmI), ctx, sessionToken)
}

// MockKratosAdminClient is a mock of KratosAdminClient interface.
type MockKratosAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockKratosAdminClientMockRecorder
	isgomock struct{}
}

// MockKratosAdminClientMockRecorder is the mock recorder for MockKratosAdminClient.
type MockKratosAdminClientMockRecorder struct {
	mock *MockKratosAdminClient
}

// NewMockKratosAdminClient creates a new mock instance.
func NewMockKratosAdminClient(ctrl *gomock.Controller) *MockKratosAdminClient {
	mock := &MockKratosAdminClient{ctrl: ctrl}
	mock.recorder = &MockKratosAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKratosAdminClient) EXPECT() *MockKratosAdminClientMockRecorder {
	return m.recorder
}

// CreateIdentity mocks base method.
func (m *MockKratosAdminClient) CreateIdentity(ctx context.Context, traits map[string]any, schemaID string) (*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentity", ctx, traits, schemaID)
	ret0, _ := ret[0].(*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentity indicates an expected call of CreateIdentity.
func (mr *MockKratosAdminClientMockRecorder) CreateIdentity(ctx, traits, schemaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentity", reflect.TypeOf((*MockKratosAdminClient)(nil).CreateIdentity), ctx, traits, schemaID)
}

// CreateSession mocks base method.
func (m *MockKratosAdminClient) CreateSession(ctx context.Context, identityID string) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, identityID)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockKratosAdminClientMockRecorder) CreateSession(ctx, identityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockKratosAdminClient)(nil).CreateSession), ctx, identityID)
}

// DeleteIdentity mocks base method.
func (m *MockKratosAdminClient) DeleteIdentity(ctx context.Context, identityID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentity", ctx, identityID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentity indicates an expected call of DeleteIdentity.
func (mr *MockKratosAdminClientMockRecorder) DeleteIdentity(ctx, identityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentity", reflect.TypeOf((*MockKratosAdminClient)(nil).DeleteIdentity), ctx, identityID)
}

// GetIdentity mocks base method.
func (m *MockKratosAdminClient) GetIdentity(ctx context.Context, identityID string) (*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", ctx, identityID)
	ret0, _ := ret[0].(*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockKratosAdminClientMockRecorder) GetIdentity(ctx, identityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockKratosAdminClient)(nil).GetIdentity), ctx, identityID)
}

// GetLoginFlow mocks base method.
func (m *MockKratosAdminClient) GetLoginFlow(ctx context.Context, flowID string) (*domain.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginFlow indicates an expected call of GetLoginFlow.
func (mr *MockKratosAdminClientMockRecorder) GetLoginFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginFlow", reflect.TypeOf((*MockKratosAdminClient)(nil).GetLoginFlow), ctx, flowID)
}

// GetRecoveryFlow mocks base method.
func (m *MockKratosAdminClient) GetRecoveryFlow(ctx context.Context, flowID string) (*domain.RecoveryFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.RecoveryFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryFlow indicates an expected call of GetRecoveryFlow.
func (mr *MockKratosAdminClientMockRecorder) GetRecoveryFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryFlow", reflect.TypeOf((*MockKratosAdminClient)(nil).GetRecoveryFlow), ctx, flowID)
}

// GetRegistrationFlow mocks base method.
func (m *MockKratosAdminClient) GetRegistrationFlow(ctx context.Context, flowID string) (*domain.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationFlow indicates an expected call of GetRegistrationFlow.
func (mr *MockKratosAdminClientMockRecorder) GetRegistrationFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationFlow", reflect.TypeOf((*MockKratosAdminClient)(nil).GetRegistrationFlow), ctx, flowID)
}

// GetSession mocks base method.
func (m *MockKratosAdminClient) GetSession(ctx context.Context, sessionID string) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionID)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockKratosAdminClientMockRecorder) GetSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockKratosAdminClient)(nil).GetSession), ctx, sessionID)
}

// GetSettingsFlow mocks base method.
func (m *MockKratosAdminClient) GetSettingsFlow(ctx context.Context, flowID string) (*domain.SettingsFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingsFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.SettingsFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingsFlow indicates an expected call of GetSettingsFlow.
func (mr *MockKratosAdminClientMockRecorder) GetSettingsFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsFlow", reflect.TypeOf((*MockKratosAdminClient)(nil).GetSettingsFlow), ctx, flowID)
}

// GetVerificationFlow mocks base method.
func (m *MockKratosAdminClient) GetVerificationFlow(ctx context.Context, flowID string) (*domain.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationFlow indicates an expected call of GetVerificationFlow.
func (mr *MockKratosAdminClientMockRecorder) GetVerificationFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationFlow", reflect.TypeOf((*MockKratosAdminClient)(nil).GetVerificationFlow), ctx, flowID)
}

// Health mocks base method.
func (m *MockKratosAdminClient) Health(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockKratosAdminClientMockRecorder) Health(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockKratosAdminClient)(nil).Health), ctx)
}

// ListIdentities mocks base method.
func (m *MockKratosAdminClient) ListIdentities(ctx context.Context, page, perPage int) ([]*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentities", ctx, page, perPage)
	ret0, _ := ret[0].([]*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentities indicates an expected call of ListIdentities.
func (mr *MockKratosAdminClientMockRecorder) ListIdentities(ctx, page, perPage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentities", reflect.TypeOf((*MockKratosAdminClient)(nil).ListIdentities), ctx, page, perPage)
}

// ListSessions mocks base method.
func (m *MockKratosAdminClient) ListSessions(ctx context.Context, identityID string) ([]*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessions", ctx, identityID)
	ret0, _ := ret[0].([]*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessions indicates an expected call of ListSessions.
func (mr *MockKratosAdminClientMockRecorder) ListSessions(ctx, identityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessions", reflect.TypeOf((*MockKratosAdminClient)(nil).ListSessions), ctx, identityID)
}

// Ready mocks base method.
func (m *MockKratosAdminClient) Ready(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockKratosAdminClientMockRecorder) Ready(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockKratosAdminClient)(nil).Ready), ctx)
}

// RevokeSession mocks base method.
func (m *MockKratosAdminClient) RevokeSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSession indicates an expected call of RevokeSession.
func (mr *MockKratosAdminClientMockRecorder) RevokeSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSession", reflect.TypeOf((*MockKratosAdminClient)(nil).RevokeSession), ctx, sessionID)
}

// UpdateIdentity mocks base method.
func (m *MockKratosAdminClient) UpdateIdentity(ctx context.Context, identityID string, traits map[string]any) (*domain.KratosIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentity", ctx, identityID, traits)
	ret0, _ := ret[0].(*domain.KratosIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentity indicates an expected call of UpdateIdentity.
func (mr *MockKratosAdminClientMockRecorder) UpdateIdentity(ctx, identityID, traits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentity", reflect.TypeOf((*MockKratosAdminClient)(nil).UpdateIdentity), ctx, identityID, traits)
}

// Version mocks base method.
func (m *MockKratosAdminClient) Version(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockKratosAdminClientMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKratosAdminClient)(nil).Version), ctx)
}

// MockKratosPublicClient is a mock of KratosPublicClient interface.
type MockKratosPublicClient struct {
	ctrl     *gomock.Controller
	recorder *MockKratosPublicClientMockRecorder
	isgomock struct{}
}

// MockKratosPublicClientMockRecorder is the mock recorder for MockKratosPublicClient.
type MockKratosPublicClientMockRecorder struct {
	mock *MockKratosPublicClient
}

// NewMockKratosPublicClient creates a new mock instance.
func NewMockKratosPublicClient(ctrl *gomock.Controller) *MockKratosPublicClient {
	mock := &MockKratosPublicClient{ctrl: ctrl}
	mock.recorder = &MockKratosPublicClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKratosPublicClient) EXPECT() *MockKratosPublicClientMockRecorder {
	return m.recorder
}

// CreateLoginFlow mocks base method.
func (m *MockKratosPublicClient) CreateLoginFlow(ctx context.Context, refresh bool, returnTo string) (*domain.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginFlow", ctx, refresh, returnTo)
	ret0, _ := ret[0].(*domain.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoginFlow indicates an expected call of CreateLoginFlow.
func (mr *MockKratosPublicClientMockRecorder) CreateLoginFlow(ctx, refresh, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).CreateLoginFlow), ctx, refresh, returnTo)
}

// CreateLogoutFlow mocks base method.
func (m *MockKratosPublicClient) CreateLogoutFlow(ctx context.Context, sessionToken, returnTo string) (*domain.LogoutFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogoutFlow", ctx, sessionToken, returnTo)
	ret0, _ := ret[0].(*domain.LogoutFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogoutFlow indicates an expected call of CreateLogoutFlow.
func (mr *MockKratosPublicClientMockRecorder) CreateLogoutFlow(ctx, sessionToken, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogoutFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).CreateLogoutFlow), ctx, sessionToken, returnTo)
}

// CreateRecoveryFlow mocks base method.
func (m *MockKratosPublicClient) CreateRecoveryFlow(ctx context.Context, returnTo string) (*domain.RecoveryFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryFlow", ctx, returnTo)
	ret0, _ := ret[0].(*domain.RecoveryFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecoveryFlow indicates an expected call of CreateRecoveryFlow.
func (mr *MockKratosPublicClientMockRecorder) CreateRecoveryFlow(ctx, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).CreateRecoveryFlow), ctx, returnTo)
}

// CreateRegistrationFlow mocks base method.
func (m *MockKratosPublicClient) CreateRegistrationFlow(ctx context.Context, returnTo string) (*domain.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationFlow", ctx, returnTo)
	ret0, _ := ret[0].(*domain.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationFlow indicates an expected call of CreateRegistrationFlow.
func (mr *MockKratosPublicClientMockRecorder) CreateRegistrationFlow(ctx, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).CreateRegistrationFlow), ctx, returnTo)
}

// CreateSettingsFlow mocks base method.
func (m *MockKratosPublicClient) CreateSettingsFlow(ctx context.Context, sessionToken, returnTo string) (*domain.SettingsFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSettingsFlow", ctx, sessionToken, returnTo)
	ret0, _ := ret[0].(*domain.SettingsFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSettingsFlow indicates an expected call of CreateSettingsFlow.
func (mr *MockKratosPublicClientMockRecorder) CreateSettingsFlow(ctx, sessionToken, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSettingsFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).CreateSettingsFlow), ctx, sessionToken, returnTo)
}

// CreateVerificationFlow mocks base method.
func (m *MockKratosPublicClient) CreateVerificationFlow(ctx context.Context, returnTo string) (*domain.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerificationFlow", ctx, returnTo)
	ret0, _ := ret[0].(*domain.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerificationFlow indicates an expected call of CreateVerificationFlow.
func (mr *MockKratosPublicClientMockRecorder) CreateVerificationFlow(ctx, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerificationFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).CreateVerificationFlow), ctx, returnTo)
}

// GetLoginFlow mocks base method.
func (m *MockKratosPublicClient) GetLoginFlow(ctx context.Context, flowID string) (*domain.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginFlow indicates an expected call of GetLoginFlow.
func (mr *MockKratosPublicClientMockRecorder) GetLoginFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).GetLoginFlow), ctx, flowID)
}

// GetRecoveryFlow mocks base method.
func (m *MockKratosPublicClient) GetRecoveryFlow(ctx context.Context, flowID string) (*domain.RecoveryFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.RecoveryFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryFlow indicates an expected call of GetRecoveryFlow.
func (mr *MockKratosPublicClientMockRecorder) GetRecoveryFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).GetRecoveryFlow), ctx, flowID)
}

// GetRegistrationFlow mocks base method.
func (m *MockKratosPublicClient) GetRegistrationFlow(ctx context.Context, flowID string) (*domain.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationFlow indicates an expected call of GetRegistrationFlow.
func (mr *MockKratosPublicClientMockRecorder) GetRegistrationFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).GetRegistrationFlow), ctx, flowID)
}

// GetSettingsFlow mocks base method.
func (m *MockKratosPublicClient) GetSettingsFlow(ctx context.Context, flowID string) (*domain.SettingsFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingsFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.SettingsFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingsFlow indicates an expected call of GetSettingsFlow.
func (mr *MockKratosPublicClientMockRecorder) GetSettingsFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).GetSettingsFlow), ctx, flowID)
}

// GetVerificationFlow mocks base method.
func (m *MockKratosPublicClient) GetVerificationFlow(ctx context.Context, flowID string) (*domain.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationFlow", ctx, flowID)
	ret0, _ := ret[0].(*domain.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationFlow indicates an expected call of GetVerificationFlow.
func (mr *MockKratosPublicClientMockRecorder) GetVerificationFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).GetVerificationFlow), ctx, flowID)
}

// Health mocks base method.
func (m *MockKratosPublicClient) Health(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockKratosPublicClientMockRecorder) Health(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockKratosPublicClient)(nil).Health), ctx)
}

// Ready mocks base method.
func (m *MockKratosPublicClient) Ready(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockKratosPublicClientMockRecorder) Ready(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockKratosPublicClient)(nil).Ready), ctx)
}

// SubmitLoginFlow mocks base method.
func (m *MockKratosPublicClient) SubmitLoginFlow(ctx context.Context, flowID string, body map[string]any) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitLoginFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitLoginFlow indicates an expected call of SubmitLoginFlow.
func (mr *MockKratosPublicClientMockRecorder) SubmitLoginFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitLoginFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).SubmitLoginFlow), ctx, flowID, body)
}

// SubmitLogoutFlow mocks base method.
func (m *MockKratosPublicClient) SubmitLogoutFlow(ctx context.Context, token, returnTo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitLogoutFlow", ctx, token, returnTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitLogoutFlow indicates an expected call of SubmitLogoutFlow.
func (mr *MockKratosPublicClientMockRecorder) SubmitLogoutFlow(ctx, token, returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitLogoutFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).SubmitLogoutFlow), ctx, token, returnTo)
}

// SubmitRecoveryFlow mocks base method.
func (m *MockKratosPublicClient) SubmitRecoveryFlow(ctx context.Context, flowID string, body map[string]any) (*domain.RecoveryFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRecoveryFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.RecoveryFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRecoveryFlow indicates an expected call of SubmitRecoveryFlow.
func (mr *MockKratosPublicClientMockRecorder) SubmitRecoveryFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRecoveryFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).SubmitRecoveryFlow), ctx, flowID, body)
}

// SubmitRegistrationFlow mocks base method.
func (m *MockKratosPublicClient) SubmitRegistrationFlow(ctx context.Context, flowID string, body map[string]any) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRegistrationFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRegistrationFlow indicates an expected call of SubmitRegistrationFlow.
func (mr *MockKratosPublicClientMockRecorder) SubmitRegistrationFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRegistrationFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).SubmitRegistrationFlow), ctx, flowID, body)
}

// SubmitSettingsFlow mocks base method.
func (m *MockKratosPublicClient) SubmitSettingsFlow(ctx context.Context, flowID, sessionToken string, body map[string]any) (*domain.SettingsFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitSettingsFlow", ctx, flowID, sessionToken, body)
	ret0, _ := ret[0].(*domain.SettingsFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitSettingsFlow indicates an expected call of SubmitSettingsFlow.
func (mr *MockKratosPublicClientMockRecorder) SubmitSettingsFlow(ctx, flowID, sessionToken, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitSettingsFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).SubmitSettingsFlow), ctx, flowID, sessionToken, body)
}

// SubmitVerificationFlow mocks base method.
func (m *MockKratosPublicClient) SubmitVerificationFlow(ctx context.Context, flowID string, body map[string]any) (*domain.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitVerificationFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitVerificationFlow indicates an expected call of SubmitVerificationFlow.
func (mr *MockKratosPublicClientMockRecorder) SubmitVerificationFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitVerificationFlow", reflect.TypeOf((*MockKratosPublicClient)(nil).SubmitVerificationFlow), ctx, flowID, body)
}

// Version mocks base method.
func (m *MockKratosPublicClient) Version(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockKratosPublicClientMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKratosPublicClient)(nil).Version), ctx)
}

// WhoAmI mocks base method.
func (m *MockKratosPublicClient) WhoAmI(ctx context.Context, sessionToken string) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI", ctx, sessionToken)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoAmI indicates an expected call of WhoAmI.
func (mr *MockKratosPublicClientMockRecorder) WhoAmI(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockKratosPublicClient)(nil).WhoAmI), ctx, sessionToken)
}
