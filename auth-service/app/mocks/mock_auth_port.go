// Code generated by MockGen. DO NOT EDIT.
// Source: auth_port.go
//
// Generated by this command:
//
//	mockgen -source=auth_port.go -destination=../mocks/mock_auth_port.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	domain "auth-service/app/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
	isgomock struct{}
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// CompleteLogin mocks base method.
func (m *MockAuthUsecase) CompleteLogin(ctx context.Context, flowID string, body any) (*domain.SessionContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteLogin", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.SessionContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteLogin indicates an expected call of CompleteLogin.
func (mr *MockAuthUsecaseMockRecorder) CompleteLogin(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteLogin", reflect.TypeOf((*MockAuthUsecase)(nil).CompleteLogin), ctx, flowID, body)
}

// CompleteRegistration mocks base method.
func (m *MockAuthUsecase) CompleteRegistration(ctx context.Context, flowID string, body any) (*domain.SessionContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRegistration", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.SessionContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteRegistration indicates an expected call of CompleteRegistration.
func (mr *MockAuthUsecaseMockRecorder) CompleteRegistration(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRegistration", reflect.TypeOf((*MockAuthUsecase)(nil).CompleteRegistration), ctx, flowID, body)
}

// GenerateCSRFToken mocks base method.
func (m *MockAuthUsecase) GenerateCSRFToken(ctx context.Context, sessionID string) (*domain.CSRFToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCSRFToken", ctx, sessionID)
	ret0, _ := ret[0].(*domain.CSRFToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCSRFToken indicates an expected call of GenerateCSRFToken.
func (mr *MockAuthUsecaseMockRecorder) GenerateCSRFToken(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCSRFToken", reflect.TypeOf((*MockAuthUsecase)(nil).GenerateCSRFToken), ctx, sessionID)
}

// InitiateLogin mocks base method.
func (m *MockAuthUsecase) InitiateLogin(ctx context.Context) (*domain.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateLogin", ctx)
	ret0, _ := ret[0].(*domain.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateLogin indicates an expected call of InitiateLogin.
func (mr *MockAuthUsecaseMockRecorder) InitiateLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateLogin", reflect.TypeOf((*MockAuthUsecase)(nil).InitiateLogin), ctx)
}

// InitiateRegistration mocks base method.
func (m *MockAuthUsecase) InitiateRegistration(ctx context.Context) (*domain.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateRegistration", ctx)
	ret0, _ := ret[0].(*domain.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateRegistration indicates an expected call of InitiateRegistration.
func (mr *MockAuthUsecaseMockRecorder) InitiateRegistration(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateRegistration", reflect.TypeOf((*MockAuthUsecase)(nil).InitiateRegistration), ctx)
}

// Logout mocks base method.
func (m *MockAuthUsecase) Logout(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthUsecaseMockRecorder) Logout(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthUsecase)(nil).Logout), ctx, sessionID)
}

// RefreshSession mocks base method.
func (m *MockAuthUsecase) RefreshSession(ctx context.Context, sessionID string) (*domain.SessionContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSession", ctx, sessionID)
	ret0, _ := ret[0].(*domain.SessionContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshSession indicates an expected call of RefreshSession.
func (mr *MockAuthUsecaseMockRecorder) RefreshSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSession", reflect.TypeOf((*MockAuthUsecase)(nil).RefreshSession), ctx, sessionID)
}

// ValidateCSRFToken mocks base method.
func (m *MockAuthUsecase) ValidateCSRFToken(ctx context.Context, token, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCSRFToken", ctx, token, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCSRFToken indicates an expected call of ValidateCSRFToken.
func (mr *MockAuthUsecaseMockRecorder) ValidateCSRFToken(ctx, token, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCSRFToken", reflect.TypeOf((*MockAuthUsecase)(nil).ValidateCSRFToken), ctx, token, sessionID)
}

// ValidateSession mocks base method.
func (m *MockAuthUsecase) ValidateSession(ctx context.Context, sessionToken string) (*domain.SessionContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSession", ctx, sessionToken)
	ret0, _ := ret[0].(*domain.SessionContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSession indicates an expected call of ValidateSession.
func (mr *MockAuthUsecaseMockRecorder) ValidateSession(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSession", reflect.TypeOf((*MockAuthUsecase)(nil).ValidateSession), ctx, sessionToken)
}

// MockAuthGateway is a mock of AuthGateway interface.
type MockAuthGateway struct {
	ctrl     *gomock.Controller
	recorder *MockAuthGatewayMockRecorder
	isgomock struct{}
}

// MockAuthGatewayMockRecorder is the mock recorder for MockAuthGateway.
type MockAuthGatewayMockRecorder struct {
	mock *MockAuthGateway
}

// NewMockAuthGateway creates a new mock instance.
func NewMockAuthGateway(ctrl *gomock.Controller) *MockAuthGateway {
	mock := &MockAuthGateway{ctrl: ctrl}
	mock.recorder = &MockAuthGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthGateway) EXPECT() *MockAuthGatewayMockRecorder {
	return m.recorder
}

// CreateLoginFlow mocks base method.
func (m *MockAuthGateway) CreateLoginFlow(ctx context.Context) (*domain.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginFlow", ctx)
	ret0, _ := ret[0].(*domain.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoginFlow indicates an expected call of CreateLoginFlow.
func (mr *MockAuthGatewayMockRecorder) CreateLoginFlow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginFlow", reflect.TypeOf((*MockAuthGateway)(nil).CreateLoginFlow), ctx)
}

// CreateRegistrationFlow mocks base method.
func (m *MockAuthGateway) CreateRegistrationFlow(ctx context.Context) (*domain.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationFlow", ctx)
	ret0, _ := ret[0].(*domain.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationFlow indicates an expected call of CreateRegistrationFlow.
func (mr *MockAuthGatewayMockRecorder) CreateRegistrationFlow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationFlow", reflect.TypeOf((*MockAuthGateway)(nil).CreateRegistrationFlow), ctx)
}

// GetSession mocks base method.
func (m *MockAuthGateway) GetSession(ctx context.Context, sessionToken string) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionToken)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockAuthGatewayMockRecorder) GetSession(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockAuthGateway)(nil).GetSession), ctx, sessionToken)
}

// RevokeSession mocks base method.
func (m *MockAuthGateway) RevokeSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSession indicates an expected call of RevokeSession.
func (mr *MockAuthGatewayMockRecorder) RevokeSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSession", reflect.TypeOf((*MockAuthGateway)(nil).RevokeSession), ctx, sessionID)
}

// SubmitLoginFlow mocks base method.
func (m *MockAuthGateway) SubmitLoginFlow(ctx context.Context, flowID string, body any) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitLoginFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitLoginFlow indicates an expected call of SubmitLoginFlow.
func (mr *MockAuthGatewayMockRecorder) SubmitLoginFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitLoginFlow", reflect.TypeOf((*MockAuthGateway)(nil).SubmitLoginFlow), ctx, flowID, body)
}

// SubmitRegistrationFlow mocks base method.
func (m *MockAuthGateway) SubmitRegistrationFlow(ctx context.Context, flowID string, body any) (*domain.KratosSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRegistrationFlow", ctx, flowID, body)
	ret0, _ := ret[0].(*domain.KratosSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRegistrationFlow indicates an expected call of SubmitRegistrationFlow.
func (mr *MockAuthGatewayMockRecorder) SubmitRegistrationFlow(ctx, flowID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRegistrationFlow", reflect.TypeOf((*MockAuthGateway)(nil).SubmitRegistrationFlow), ctx, flowID, body)
}

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthRepository) CreateSession(ctx context.Context, session *domain.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthRepositoryMockRecorder) CreateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthRepository)(nil).CreateSession), ctx, session)
}

// DeleteCSRFToken mocks base method.
func (m *MockAuthRepository) DeleteCSRFToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSRFToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSRFToken indicates an expected call of DeleteCSRFToken.
func (mr *MockAuthRepositoryMockRecorder) DeleteCSRFToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSRFToken", reflect.TypeOf((*MockAuthRepository)(nil).DeleteCSRFToken), ctx, token)
}

// DeleteSession mocks base method.
func (m *MockAuthRepository) DeleteSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockAuthRepositoryMockRecorder) DeleteSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockAuthRepository)(nil).DeleteSession), ctx, sessionID)
}

// GetActiveSessionByUserID mocks base method.
func (m *MockAuthRepository) GetActiveSessionByUserID(ctx context.Context, userID string) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSessionByUserID", ctx, userID)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSessionByUserID indicates an expected call of GetActiveSessionByUserID.
func (mr *MockAuthRepositoryMockRecorder) GetActiveSessionByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSessionByUserID", reflect.TypeOf((*MockAuthRepository)(nil).GetActiveSessionByUserID), ctx, userID)
}

// GetCSRFToken mocks base method.
func (m *MockAuthRepository) GetCSRFToken(ctx context.Context, token string) (*domain.CSRFToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSRFToken", ctx, token)
	ret0, _ := ret[0].(*domain.CSRFToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSRFToken indicates an expected call of GetCSRFToken.
func (mr *MockAuthRepositoryMockRecorder) GetCSRFToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSRFToken", reflect.TypeOf((*MockAuthRepository)(nil).GetCSRFToken), ctx, token)
}

// GetSessionByKratosID mocks base method.
func (m *MockAuthRepository) GetSessionByKratosID(ctx context.Context, kratosSessionID string) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByKratosID", ctx, kratosSessionID)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByKratosID indicates an expected call of GetSessionByKratosID.
func (mr *MockAuthRepositoryMockRecorder) GetSessionByKratosID(ctx, kratosSessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByKratosID", reflect.TypeOf((*MockAuthRepository)(nil).GetSessionByKratosID), ctx, kratosSessionID)
}

// StoreCSRFToken mocks base method.
func (m *MockAuthRepository) StoreCSRFToken(ctx context.Context, token *domain.CSRFToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCSRFToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCSRFToken indicates an expected call of StoreCSRFToken.
func (mr *MockAuthRepositoryMockRecorder) StoreCSRFToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCSRFToken", reflect.TypeOf((*MockAuthRepository)(nil).StoreCSRFToken), ctx, token)
}

// UpdateSessionStatus mocks base method.
func (m *MockAuthRepository) UpdateSessionStatus(ctx context.Context, sessionID string, active bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionStatus", ctx, sessionID, active)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionStatus indicates an expected call of UpdateSessionStatus.
func (mr *MockAuthRepositoryMockRecorder) UpdateSessionStatus(ctx, sessionID, active any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionStatus", reflect.TypeOf((*MockAuthRepository)(nil).UpdateSessionStatus), ctx, sessionID, active)
}
