// Code generated by MockGen. DO NOT EDIT.
// Source: article_fetch_service.go
//
// Generated by this command:
//
//	mockgen -source=article_fetch_service.go -destination=../mocks/article_fetch_repositories_mock.go -package=mocks ArticleRepository,SyncStateRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "pre-processor-sidecar/models"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleRepository is a mock of ArticleRepository interface.
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
	isgomock struct{}
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository.
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance.
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleRepository) Create(ctx context.Context, article *models.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockArticleRepositoryMockRecorder) Create(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleRepository)(nil).Create), ctx, article)
}

// DeleteOld mocks base method.
func (m *MockArticleRepository) DeleteOld(ctx context.Context, olderThan time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOld", ctx, olderThan)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOld indicates an expected call of DeleteOld.
func (mr *MockArticleRepositoryMockRecorder) DeleteOld(ctx, olderThan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOld", reflect.TypeOf((*MockArticleRepository)(nil).DeleteOld), ctx, olderThan)
}

// FindByInoreaderID mocks base method.
func (m *MockArticleRepository) FindByInoreaderID(ctx context.Context, inoreaderID string) (*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByInoreaderID", ctx, inoreaderID)
	ret0, _ := ret[0].(*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByInoreaderID indicates an expected call of FindByInoreaderID.
func (mr *MockArticleRepositoryMockRecorder) FindByInoreaderID(ctx, inoreaderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByInoreaderID", reflect.TypeOf((*MockArticleRepository)(nil).FindByInoreaderID), ctx, inoreaderID)
}

// GetUnprocessed mocks base method.
func (m *MockArticleRepository) GetUnprocessed(ctx context.Context, limit int) ([]*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessed", ctx, limit)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessed indicates an expected call of GetUnprocessed.
func (mr *MockArticleRepositoryMockRecorder) GetUnprocessed(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessed", reflect.TypeOf((*MockArticleRepository)(nil).GetUnprocessed), ctx, limit)
}

// MarkAsProcessed mocks base method.
func (m *MockArticleRepository) MarkAsProcessed(ctx context.Context, articleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsProcessed", ctx, articleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsProcessed indicates an expected call of MarkAsProcessed.
func (mr *MockArticleRepositoryMockRecorder) MarkAsProcessed(ctx, articleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsProcessed", reflect.TypeOf((*MockArticleRepository)(nil).MarkAsProcessed), ctx, articleID)
}

// Update mocks base method.
func (m *MockArticleRepository) Update(ctx context.Context, article *models.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticleRepositoryMockRecorder) Update(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleRepository)(nil).Update), ctx, article)
}

// MockSyncStateRepository is a mock of SyncStateRepository interface.
type MockSyncStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSyncStateRepositoryMockRecorder
	isgomock struct{}
}

// MockSyncStateRepositoryMockRecorder is the mock recorder for MockSyncStateRepository.
type MockSyncStateRepositoryMockRecorder struct {
	mock *MockSyncStateRepository
}

// NewMockSyncStateRepository creates a new mock instance.
func NewMockSyncStateRepository(ctrl *gomock.Controller) *MockSyncStateRepository {
	mock := &MockSyncStateRepository{ctrl: ctrl}
	mock.recorder = &MockSyncStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncStateRepository) EXPECT() *MockSyncStateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSyncStateRepository) Create(ctx context.Context, syncState *models.SyncState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, syncState)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSyncStateRepositoryMockRecorder) Create(ctx, syncState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSyncStateRepository)(nil).Create), ctx, syncState)
}

// FindByStreamID mocks base method.
func (m *MockSyncStateRepository) FindByStreamID(ctx context.Context, streamID string) (*models.SyncState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStreamID", ctx, streamID)
	ret0, _ := ret[0].(*models.SyncState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStreamID indicates an expected call of FindByStreamID.
func (mr *MockSyncStateRepositoryMockRecorder) FindByStreamID(ctx, streamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStreamID", reflect.TypeOf((*MockSyncStateRepository)(nil).FindByStreamID), ctx, streamID)
}

// Update mocks base method.
func (m *MockSyncStateRepository) Update(ctx context.Context, syncState *models.SyncState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, syncState)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSyncStateRepositoryMockRecorder) Update(ctx, syncState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSyncStateRepository)(nil).Update), ctx, syncState)
}
