// Code generated by MockGen. DO NOT EDIT.
// Source: inoreader_service.go
//
// Generated by this command:
//
//	mockgen -source=inoreader_service.go -destination=../mocks/oauth2_driver_mock.go -package=mocks OAuth2Driver,APIUsageRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "pre-processor-sidecar/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOAuth2Driver is a mock of OAuth2Driver interface.
type MockOAuth2Driver struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2DriverMockRecorder
	isgomock struct{}
}

// MockOAuth2DriverMockRecorder is the mock recorder for MockOAuth2Driver.
type MockOAuth2DriverMockRecorder struct {
	mock *MockOAuth2Driver
}

// NewMockOAuth2Driver creates a new mock instance.
func NewMockOAuth2Driver(ctrl *gomock.Controller) *MockOAuth2Driver {
	mock := &MockOAuth2Driver{ctrl: ctrl}
	mock.recorder = &MockOAuth2DriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2Driver) EXPECT() *MockOAuth2DriverMockRecorder {
	return m.recorder
}

// MakeAuthenticatedRequest mocks base method.
func (m *MockOAuth2Driver) MakeAuthenticatedRequest(ctx context.Context, accessToken, endpoint string, params map[string]string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAuthenticatedRequest", ctx, accessToken, endpoint, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeAuthenticatedRequest indicates an expected call of MakeAuthenticatedRequest.
func (mr *MockOAuth2DriverMockRecorder) MakeAuthenticatedRequest(ctx, accessToken, endpoint, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAuthenticatedRequest", reflect.TypeOf((*MockOAuth2Driver)(nil).MakeAuthenticatedRequest), ctx, accessToken, endpoint, params)
}

// MakeAuthenticatedRequestWithHeaders mocks base method.
func (m *MockOAuth2Driver) MakeAuthenticatedRequestWithHeaders(ctx context.Context, accessToken, endpoint string, params map[string]string) (map[string]any, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAuthenticatedRequestWithHeaders", ctx, accessToken, endpoint, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeAuthenticatedRequestWithHeaders indicates an expected call of MakeAuthenticatedRequestWithHeaders.
func (mr *MockOAuth2DriverMockRecorder) MakeAuthenticatedRequestWithHeaders(ctx, accessToken, endpoint, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAuthenticatedRequestWithHeaders", reflect.TypeOf((*MockOAuth2Driver)(nil).MakeAuthenticatedRequestWithHeaders), ctx, accessToken, endpoint, params)
}

// RefreshToken mocks base method.
func (m *MockOAuth2Driver) RefreshToken(ctx context.Context, refreshToken string) (*models.InoreaderTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*models.InoreaderTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockOAuth2DriverMockRecorder) RefreshToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockOAuth2Driver)(nil).RefreshToken), ctx, refreshToken)
}

// ValidateToken mocks base method.
func (m *MockOAuth2Driver) ValidateToken(ctx context.Context, accessToken string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, accessToken)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockOAuth2DriverMockRecorder) ValidateToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockOAuth2Driver)(nil).ValidateToken), ctx, accessToken)
}

// MockAPIUsageRepository is a mock of APIUsageRepository interface.
type MockAPIUsageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAPIUsageRepositoryMockRecorder
	isgomock struct{}
}

// MockAPIUsageRepositoryMockRecorder is the mock recorder for MockAPIUsageRepository.
type MockAPIUsageRepositoryMockRecorder struct {
	mock *MockAPIUsageRepository
}

// NewMockAPIUsageRepository creates a new mock instance.
func NewMockAPIUsageRepository(ctrl *gomock.Controller) *MockAPIUsageRepository {
	mock := &MockAPIUsageRepository{ctrl: ctrl}
	mock.recorder = &MockAPIUsageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIUsageRepository) EXPECT() *MockAPIUsageRepositoryMockRecorder {
	return m.recorder
}

// CreateUsageRecord mocks base method.
func (m *MockAPIUsageRepository) CreateUsageRecord(ctx context.Context, usage *models.APIUsageTracking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsageRecord", ctx, usage)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUsageRecord indicates an expected call of CreateUsageRecord.
func (mr *MockAPIUsageRepositoryMockRecorder) CreateUsageRecord(ctx, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageRecord", reflect.TypeOf((*MockAPIUsageRepository)(nil).CreateUsageRecord), ctx, usage)
}

// GetTodaysUsage mocks base method.
func (m *MockAPIUsageRepository) GetTodaysUsage(ctx context.Context) (*models.APIUsageTracking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodaysUsage", ctx)
	ret0, _ := ret[0].(*models.APIUsageTracking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodaysUsage indicates an expected call of GetTodaysUsage.
func (mr *MockAPIUsageRepositoryMockRecorder) GetTodaysUsage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodaysUsage", reflect.TypeOf((*MockAPIUsageRepository)(nil).GetTodaysUsage), ctx)
}

// UpdateUsageRecord mocks base method.
func (m *MockAPIUsageRepository) UpdateUsageRecord(ctx context.Context, usage *models.APIUsageTracking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsageRecord", ctx, usage)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsageRecord indicates an expected call of UpdateUsageRecord.
func (mr *MockAPIUsageRepositoryMockRecorder) UpdateUsageRecord(ctx, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageRecord", reflect.TypeOf((*MockAPIUsageRepository)(nil).UpdateUsageRecord), ctx, usage)
}
