// Code generated by MockGen. DO NOT EDIT.
// Source: subscription_repository.go
//
// Generated by this command:
//
//	mockgen -source=subscription_repository.go -destination=../mocks/subscription_repository_mock.go -package=mocks SubscriptionRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "pre-processor-sidecar/models"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
	isgomock struct{}
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionRepository) CreateSubscription(ctx context.Context, subscription *models.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) CreateSubscription(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).CreateSubscription), ctx, subscription)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionRepository) DeleteSubscription(ctx context.Context, inoreaderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, inoreaderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteSubscription(ctx, inoreaderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteSubscription), ctx, inoreaderID)
}

// FindByID mocks base method.
func (m *MockSubscriptionRepository) FindByID(ctx context.Context, id uuid.UUID) (*models.InoreaderSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*models.InoreaderSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindByID), ctx, id)
}

// GetAll mocks base method.
func (m *MockSubscriptionRepository) GetAll(ctx context.Context) ([]models.InoreaderSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]models.InoreaderSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubscriptionRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetAll), ctx)
}

// GetAllSubscriptions mocks base method.
func (m *MockSubscriptionRepository) GetAllSubscriptions(ctx context.Context) ([]models.InoreaderSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubscriptions", ctx)
	ret0, _ := ret[0].([]models.InoreaderSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubscriptions indicates an expected call of GetAllSubscriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) GetAllSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubscriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetAllSubscriptions), ctx)
}

// SaveSubscriptions mocks base method.
func (m *MockSubscriptionRepository) SaveSubscriptions(ctx context.Context, subscriptions []models.InoreaderSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSubscriptions", ctx, subscriptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscriptions indicates an expected call of SaveSubscriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) SaveSubscriptions(ctx, subscriptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).SaveSubscriptions), ctx, subscriptions)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionRepository) UpdateSubscription(ctx context.Context, subscription models.InoreaderSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) UpdateSubscription(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).UpdateSubscription), ctx, subscription)
}
