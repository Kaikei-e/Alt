// Code generated by MockGen. DO NOT EDIT.
// Source: service/inoreader_service.go (InoreaderClientInterface)

package mocks

import (
	context "context"
	reflect "reflect"

	models "pre-processor-sidecar/models"

	gomock "go.uber.org/mock/gomock"
)

// MockInoreaderClient is a mock of InoreaderClientInterface.
type MockInoreaderClient struct {
	ctrl     *gomock.Controller
	recorder *MockInoreaderClientMockRecorder
}

// MockInoreaderClientMockRecorder is the mock recorder for MockInoreaderClient.
type MockInoreaderClientMockRecorder struct {
	mock *MockInoreaderClient
}

// NewMockInoreaderClient creates a new mock instance.
func NewMockInoreaderClient(ctrl *gomock.Controller) *MockInoreaderClient {
	mock := &MockInoreaderClient{ctrl: ctrl}
	mock.recorder = &MockInoreaderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInoreaderClient) EXPECT() *MockInoreaderClientMockRecorder {
	return m.recorder
}

// FetchSubscriptionList mocks base method.
func (m *MockInoreaderClient) FetchSubscriptionList(ctx context.Context, accessToken string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSubscriptionList", ctx, accessToken)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSubscriptionList indicates an expected call of FetchSubscriptionList.
func (mr *MockInoreaderClientMockRecorder) FetchSubscriptionList(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSubscriptionList", reflect.TypeOf((*MockInoreaderClient)(nil).FetchSubscriptionList), ctx, accessToken)
}

// FetchStreamContents mocks base method.
func (m *MockInoreaderClient) FetchStreamContents(ctx context.Context, accessToken, streamID, continuationToken string, maxArticles int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStreamContents", ctx, accessToken, streamID, continuationToken, maxArticles)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchStreamContents indicates an expected call of FetchStreamContents.
func (mr *MockInoreaderClientMockRecorder) FetchStreamContents(ctx, accessToken, streamID, continuationToken, maxArticles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStreamContents", reflect.TypeOf((*MockInoreaderClient)(nil).FetchStreamContents), ctx, accessToken, streamID, continuationToken, maxArticles)
}

// FetchUnreadStreamContents mocks base method.
func (m *MockInoreaderClient) FetchUnreadStreamContents(ctx context.Context, accessToken, streamID, continuationToken string, maxArticles int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUnreadStreamContents", ctx, accessToken, streamID, continuationToken, maxArticles)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUnreadStreamContents indicates an expected call of FetchUnreadStreamContents.
func (mr *MockInoreaderClientMockRecorder) FetchUnreadStreamContents(ctx, accessToken, streamID, continuationToken, maxArticles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUnreadStreamContents", reflect.TypeOf((*MockInoreaderClient)(nil).FetchUnreadStreamContents), ctx, accessToken, streamID, continuationToken, maxArticles)
}

// RefreshToken mocks base method.
func (m *MockInoreaderClient) RefreshToken(ctx context.Context, refreshToken string) (*models.InoreaderTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*models.InoreaderTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockInoreaderClientMockRecorder) RefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockInoreaderClient)(nil).RefreshToken), ctx, refreshToken)
}

// ValidateToken mocks base method.
func (m *MockInoreaderClient) ValidateToken(ctx context.Context, accessToken string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, accessToken)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockInoreaderClientMockRecorder) ValidateToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockInoreaderClient)(nil).ValidateToken), ctx, accessToken)
}

// MakeAuthenticatedRequestWithHeaders mocks base method.
func (m *MockInoreaderClient) MakeAuthenticatedRequestWithHeaders(ctx context.Context, accessToken, endpoint string, params map[string]string) (map[string]interface{}, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAuthenticatedRequestWithHeaders", ctx, accessToken, endpoint, params)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeAuthenticatedRequestWithHeaders indicates an expected call of MakeAuthenticatedRequestWithHeaders.
func (mr *MockInoreaderClientMockRecorder) MakeAuthenticatedRequestWithHeaders(ctx, accessToken, endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAuthenticatedRequestWithHeaders", reflect.TypeOf((*MockInoreaderClient)(nil).MakeAuthenticatedRequestWithHeaders), ctx, accessToken, endpoint, params)
}

// ParseSubscriptionsResponse mocks base method.
func (m *MockInoreaderClient) ParseSubscriptionsResponse(response map[string]interface{}) ([]*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSubscriptionsResponse", response)
	ret0, _ := ret[0].([]*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSubscriptionsResponse indicates an expected call of ParseSubscriptionsResponse.
func (mr *MockInoreaderClientMockRecorder) ParseSubscriptionsResponse(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSubscriptionsResponse", reflect.TypeOf((*MockInoreaderClient)(nil).ParseSubscriptionsResponse), response)
}

// ParseStreamContentsResponse mocks base method.
func (m *MockInoreaderClient) ParseStreamContentsResponse(response map[string]interface{}) ([]*models.Article, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseStreamContentsResponse", response)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseStreamContentsResponse indicates an expected call of ParseStreamContentsResponse.
func (mr *MockInoreaderClientMockRecorder) ParseStreamContentsResponse(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseStreamContentsResponse", reflect.TypeOf((*MockInoreaderClient)(nil).ParseStreamContentsResponse), response)
}
