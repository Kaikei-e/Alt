apiVersion: batch/v1
kind: Job
metadata:
  name: migrate-db
  namespace: alt-database
  labels:
    app: migrate
    component: database
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 600  # 10分でタイムアウト
  template:
    metadata:
      labels:
        app: migrate
        component: database
    spec:
      restartPolicy: Never
      serviceAccountName: migrate-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: migrate
        image: migrate/migrate:v4.16.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["/scripts/run-migration.sh"]
        env:
        # データベース接続設定（ConfigMapから）
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: migrate-secrets
              key: DB_PASSWORD
        
        # SSL設定（ConfigMapから）
        - name: DB_SSL_MODE
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_SSL_MODE
        - name: DB_SSL_ROOT_CERT
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_SSL_ROOT_CERT
        
        # マイグレーション設定（ConfigMapから）
        - name: MIGRATION_PATH
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: MIGRATION_PATH
        - name: MIGRATION_TABLE
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: MIGRATION_TABLE
        
        # ログ設定（ConfigMapから）
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: LOG_LEVEL
        
        # 強制マイグレーション用（オプション）
        - name: FORCE_VERSION
          value: ""  # 必要時のみ設定
        
        volumeMounts:
        # マイグレーションファイル
        - name: migration-scripts
          mountPath: /migrations
          readOnly: true
        
        # SSL証明書
        - name: ssl-certs
          mountPath: /app/ssl
          readOnly: true
        
        # 実行スクリプト
        - name: migration-env-scripts
          mountPath: /scripts
          readOnly: true
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        # ヘルスチェック（データベース接続確認）
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "source /scripts/setup-env.sh && migrate -path $MIGRATION_PATH -database $DATABASE_URL version"
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
      
      volumes:
      # マイグレーションファイル
      - name: migration-scripts
        configMap:
          name: migrate-cm0
      
      # SSL証明書
      - name: ssl-certs
        secret:
          secretName: postgres-ssl-certs
          defaultMode: 0600
      
      # 実行スクリプト
      - name: migration-env-scripts
        configMap:
          name: migration-env-config
          defaultMode: 0755
      
      # データベース準備待機用のinitContainer
      initContainers:
      - name: wait-for-db
        image: postgres:15
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -e
          source /scripts/setup-env.sh
          
          echo "INFO: Waiting for database to be ready..."
          until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
            echo "INFO: Database not ready, waiting..."
            sleep 2
          done
          echo "INFO: Database is ready"
          
          # SSL接続テスト
          echo "INFO: Testing SSL connection..."
          PGPASSWORD=$DB_PASSWORD psql \
            -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME \
            -c "SELECT ssl_is_used(), version();" \
            -v ON_ERROR_STOP=1
          
          echo "INFO: SSL connection test successful"
        
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_PORT
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: migrate-secrets
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_NAME
        - name: DB_SSL_MODE
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_SSL_MODE
        - name: DB_SSL_ROOT_CERT
          valueFrom:
            configMapKeyRef:
              name: migration-ssl-config
              key: DB_SSL_ROOT_CERT
        
        volumeMounts:
        - name: ssl-certs
          mountPath: /app/ssl
          readOnly: true
        - name: migration-env-scripts
          mountPath: /scripts
          readOnly: true
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"