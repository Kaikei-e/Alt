{{- if .Values.configMap.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nginx.configMapName" . }}
  labels:
    {{- include "nginx.labels" . | nindent 4 }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  nginx.conf: |
    # nginx-internal: try_files削除版（302リダイレクト修正）

    user nginx;
    worker_processes auto;
    worker_rlimit_nofile 16384;
    error_log /var/log/nginx/error.log warn;
    pid /tmp/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        # MIMEタイプ設定（.mjsサポート）
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time upstream="$upstream_addr" '
                       'uri="$uri" redirect="$sent_http_location"';

        access_log /var/log/nginx/access.log main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 30;
        types_hash_max_size 2048;
        server_tokens off;
        client_max_body_size 10M;

        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;

        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types
            text/plain
            text/css
            text/javascript
            application/json
            application/javascript
            image/svg+xml
            application/manifest+json;

        # レート制限
        limit_req_zone $binary_remote_addr zone=internal_api:10m rate=120r/m;
        limit_req_zone $binary_remote_addr zone=internal_general:10m rate=50r/s;
        limit_req_zone $binary_remote_addr zone=internal_static:10m rate=200r/s;

        # アップストリーム設定
        upstream frontend_app {
            least_conn;
            server alt-frontend.alt-apps.svc.cluster.local:3000 weight=1 max_fails=2 fail_timeout=10s;
            keepalive 8;
            keepalive_requests 100;
            keepalive_timeout 60s;
        }

        upstream backend_api {
            least_conn;
            server alt-backend.alt-apps.svc.cluster.local:9000 weight=1 max_fails=2 fail_timeout=10s;
            keepalive 16;
            keepalive_requests 100;
            keepalive_timeout 60s;
        }

        # メインサーバー: port 8080
        server {
            listen 8080;
            listen [::]:8080;
            server_name curionoah.com nginx.alt-ingress.svc.cluster.local;

            location ^~ /_next/ {
                proxy_pass http://frontend_app;
                add_header X-Upstream-CT $upstream_http_content_type always;
            }

            # ルート（SSR/静的） ※Host ヘッダは明示しても良い
            location / {
                proxy_pass http://frontend_app;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # API エンドポイント
            location /api/ {
                limit_req zone=internal_api burst=50 nodelay;

                proxy_pass http://backend_api/;

                proxy_connect_timeout 30s;
                proxy_send_timeout 120s;
                proxy_read_timeout 120s;

                # CORS設定
                add_header Access-Control-Allow-Origin "https://curionoah.com" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;

                if ($request_method = 'OPTIONS') {
                    add_header Content-Length 0;
                    return 200;
                }
            }

            # SSE エンドポイント
            location /api/v1/sse/ {
                proxy_pass http://backend_api/v1/sse/;

                proxy_buffering off;
                proxy_cache off;

                proxy_send_timeout 300s;
                proxy_read_timeout 300s;

                add_header Cache-Control "no-cache" always;
                add_header Access-Control-Allow-Origin "https://curionoah.com" always;
            }

            # 内部ヘルスチェック
            location /health {
                access_log off;
                return 200 "internal nginx healthy\n";
            }
        }

        # Kubernetes専用ヘルスチェック
        server {
            listen 9080;
            server_name localhost;
            access_log off;

            location /nginx-health {
                return 200 "nginx-internal healthy\n";
            }
        }
    }
{{- end }}