{{- if .Values.migration.manualJob }}
# 恒久的マイグレーション管理: 手動実行可能なJob定義
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "kratos.fullname" . }}-migration-manual
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "kratos.labels" . | nindent 4 }}
    app.kubernetes.io/component: migration
  annotations:
    # 手動実行用Job - 以下コマンドで実行
    # kubectl create job --from=job/kratos-migration-manual kratos-migration-$(date +%s) -n alt-auth
    kratos.ory.sh/migration-type: "manual"
    kratos.ory.sh/usage: |
      手動マイグレーション実行方法:
      1. kubectl create job --from=job/{{ include "kratos.fullname" . }}-migration-manual {{ include "kratos.fullname" . }}-migration-$(date +%s) -n {{ .Values.namespace }}
      2. kubectl logs -n {{ .Values.namespace }} job/{{ include "kratos.fullname" . }}-migration-$(date +%s) -f
      3. kubectl get job -n {{ .Values.namespace }} {{ include "kratos.fullname" . }}-migration-$(date +%s)
spec:
  # Job設定: 1回のみ実行、失敗時は手動調査
  completions: 1
  parallelism: 1
  backoffLimit: 1
  activeDeadlineSeconds: 900  # 15分でタイムアウト
  suspend: true  # デフォルトで停止状態（手動実行制御）
  template:
    metadata:
      labels:
        {{- include "kratos.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: migration
      annotations:
        # Linkerd無効化（データベース直接接続）
        linkerd.io/inject: disabled
        # マイグレーション専用設定
        kratos.ory.sh/migration-version: "{{ .Values.image.tag }}"
        kratos.ory.sh/database-target: "{{ .Values.database.host }}"
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "kratos.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: kratos-migrate
        image: "{{ .Values.migration.image.repository }}:{{ .Values.migration.image.tag }}"
        command: ["kratos"]
        args: 
        - "migrate"
        - "sql"
        - "-e"
        - "--yes"
        - "--config"
        - "/etc/config/kratos/kratos.yml"
        env:
        - name: DSN
          valueFrom:
            secretKeyRef:
              name: kratos-postgres-credentials
              key: dsn
        - name: KRATOS_LOG_LEVEL
          value: "debug"  # 詳細ログでトラブルシューティング
        - name: KRATOS_DATABASE_TIMEOUT
          value: "60s"   # タイムアウト延長
        - name: KRATOS_DATABASE_MAX_OPEN_CONNS
          value: "1"     # 接続数制限
        volumeMounts:
        - name: kratos-config
          mountPath: /etc/config/kratos
        - name: kratos-schemas  
          mountPath: /etc/config/kratos/schemas
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
      volumes:
      - name: kratos-config
        configMap:
          name: {{ include "kratos.fullname" . }}-config
      - name: kratos-schemas
        configMap:
          name: {{ include "kratos.fullname" . }}-schemas
{{- end }}