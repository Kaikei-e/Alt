apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kratos.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "kratos.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kratos.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-config.yaml") . | sha256sum }}
        checksum/schemas: {{ include (print $.Template.BasePath "/configmap-schemas.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/postgres-credentials-secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "kratos.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "kratos.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if or .Values.migration.enabled .Values.initContainers.enabled }}
      initContainers:
      {{- if .Values.initContainers.dbSetup.enabled }}
      - name: kratos-db-setup
        image: "{{ .Values.initContainers.dbSetup.image }}"
        command: ["/bin/bash"]
        args:
        - -c
        - |
          echo "Setting up Kratos database user..."
          
          # Wait for PostgreSQL to be ready  
          until pg_isready -h kratos-postgres.alt-auth.svc.cluster.local -p 5432 -U kratos_db_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Create kratos_db_user if it doesn't exist (idempotent)
          psql -h kratos-postgres.alt-auth.svc.cluster.local -U kratos_db_user -d kratos_db -c "
          DO \$\$ BEGIN
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'kratos_db_user') THEN
              CREATE USER kratos_db_user WITH PASSWORD '$KRATOS_DB_PASSWORD';
              GRANT CONNECT ON DATABASE kratos_db TO kratos_db_user;
              GRANT USAGE ON SCHEMA public TO kratos_db_user;
              GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO kratos_db_user;
              GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO kratos_db_user;
              GRANT ALL PRIVILEGES ON SCHEMA public TO kratos_db_user;
              ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO kratos_db_user;
              ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO kratos_db_user;
              GRANT CREATE ON DATABASE kratos_db TO kratos_db_user;
              GRANT TEMPORARY ON DATABASE kratos_db TO kratos_db_user;
              GRANT CONNECT ON DATABASE kratos_db TO kratos_db_user;
              ECHO 'User kratos_db_user created successfully';
            ELSE
              ECHO 'User kratos_db_user already exists';
            END IF;
          END \$\$;
          "
          echo "Kratos database user setup completed."
        env:
        {{- with .Values.initContainers.dbSetup.env }}
        {{- range $key, $value := . }}
        - name: {{ $key }}
          {{- if $value.valueFrom }}
          valueFrom:
            {{- toYaml $value.valueFrom | nindent 12 }}
          {{- else }}
          value: {{ $value | quote }}
          {{- end }}
        {{- end }}
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: true
      {{- end }}
      {{- if .Values.migration.enabled }}
      - name: kratos-migrate
        image: "{{ .Values.migration.image.repository }}:{{ .Values.migration.image.tag }}"
        command: ["kratos"]
        args: ["migrate", "sql", "-e", "--yes"]
        env:
        - name: DSN
          valueFrom:
            secretKeyRef:
              name: kratos-postgres-credentials
              key: dsn
        volumeMounts:
        - name: kratos-config
          mountPath: /etc/config/kratos
        - name: kratos-schemas
          mountPath: /etc/config/kratos/schemas
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
      {{- end }}
      {{- end }}
      containers:
      - name: kratos
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["kratos"]
        args: 
        - "serve"
        - "all"
        {{- if .Values.kratos.dev }}
        - "--dev"
        {{- end }}
        - "--config"
        - "/etc/config/kratos/kratos.yml"
        ports:
        - name: public
          containerPort: 4433
          protocol: TCP
        - name: admin
          containerPort: 4434
          protocol: TCP
        env:
        - name: DSN
          valueFrom:
            secretKeyRef:
              name: kratos-postgres-credentials
              key: dsn
        - name: SECRETS_COOKIE
          value: {{ .Values.secrets.cookieSecret | quote }}
        - name: SECRETS_CIPHER
          value: {{ .Values.secrets.cipherSecret | quote }}
        {{- with .Values.env }}
        {{- range $key, $value := . }}
        - name: {{ $key }}
          {{- if $value.valueFrom }}
          valueFrom:
            {{- toYaml $value.valueFrom | nindent 12 }}
          {{- else }}
          value: {{ $value | quote }}
          {{- end }}
        {{- end }}
        {{- end }}
        volumeMounts:
        - name: kratos-config
          mountPath: /etc/config/kratos
        - name: kratos-schemas
          mountPath: /etc/config/kratos/schemas
        livenessProbe:
          {{- toYaml .Values.healthCheck.livenessProbe | nindent 10 }}
        readinessProbe:
          {{- toYaml .Values.healthCheck.readinessProbe | nindent 10 }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
      volumes:
      - name: kratos-config
        configMap:
          name: {{ include "kratos.fullname" . }}-config
      - name: kratos-schemas
        configMap:
          name: {{ include "kratos.fullname" . }}-schemas
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}