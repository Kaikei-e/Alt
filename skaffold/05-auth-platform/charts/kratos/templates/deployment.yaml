apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kratos.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "kratos.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kratos.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-config.yaml") . | sha256sum }}
        checksum/schemas: {{ include (print $.Template.BasePath "/configmap-schemas.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/postgres-credentials-secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "kratos.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "kratos.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if or (and .Values.migration.enabled (not .Values.migration.runAsJob)) .Values.initContainers.enabled }}
      initContainers:
      {{- if and .Values.migration.enabled (not .Values.migration.runAsJob) }}
      - name: kratos-migrate
        image: "{{ .Values.migration.image.repository }}:{{ .Values.migration.image.tag }}"
        command: ["kratos"]
        args: ["migrate", "sql", "-e", "--yes"]
        env:
        - name: DSN
          valueFrom:
            secretKeyRef:
              name: kratos-postgres-credentials
              key: dsn
        volumeMounts:
        - name: kratos-config
          mountPath: /etc/config/kratos
        - name: kratos-schemas
          mountPath: /etc/config/kratos/schemas
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
      {{- end }}
      {{- end }}
      containers:
      - name: kratos
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["kratos"]
        args: 
        - "serve"
        - "all"
        {{- if .Values.kratos.dev }}
        - "--dev"
        {{- end }}
        - "--config"
        - "/etc/config/kratos/kratos.yml"
        ports:
        - name: public
          containerPort: 4433
          protocol: TCP
        - name: admin
          containerPort: 4434
          protocol: TCP
        env:
        - name: DSN
          valueFrom:
            secretKeyRef:
              name: kratos-postgres-credentials
              key: dsn
        - name: SECRETS_COOKIE
          value: {{ .Values.secrets.cookieSecret | quote }}
        - name: SECRETS_CIPHER
          value: {{ .Values.secrets.cipherSecret | quote }}
        # Environment variables from values.yaml (supports both string and complex types)
        {{- with .Values.env }}
        {{- range $key, $value := . }}
        - name: {{ $key }}
          {{- if and (kindIs "map" $value) $value.valueFrom }}
          valueFrom:
            {{- toYaml $value.valueFrom | nindent 12 }}
          {{- else if and (kindIs "map" $value) $value.value }}
          value: {{ $value.value | quote }}
          {{- else }}
          value: {{ $value | quote }}
          {{- end }}
        {{- end }}
        {{- end }}
        volumeMounts:
        - name: kratos-config
          mountPath: /etc/config/kratos
        - name: kratos-schemas
          mountPath: /etc/config/kratos/schemas
        # フェーズ3.3: startupProbe追加（Linkerd + マイグレーション対応）
        {{- if .Values.healthCheck.startupProbe }}
        startupProbe:
          {{- toYaml .Values.healthCheck.startupProbe | nindent 10 }}
        {{- end }}
        livenessProbe:
          {{- toYaml .Values.healthCheck.livenessProbe | nindent 10 }}
        readinessProbe:
          {{- toYaml .Values.healthCheck.readinessProbe | nindent 10 }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
      volumes:
      - name: kratos-config
        configMap:
          name: {{ include "kratos.fullname" . }}-config
      - name: kratos-schemas
        configMap:
          name: {{ include "kratos.fullname" . }}-schemas
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}