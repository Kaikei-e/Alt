{{- if .Values.initScripts.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres.fullname" . }}-init-scripts
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  # Container initialization best practice: SQL-based initialization scripts
  01-create-users.sql: |
    -- PostgreSQL user creation for microservices
    -- Container initialization best practice: Create users during database bootstrap
    
    -- Create pre-processor user
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'pre_processor_user') THEN
            EXECUTE 'CREATE USER pre_processor_user';
        END IF;
        -- Always update password to ensure SCRAM-SHA-256 encoding
        IF current_setting('server_version_num')::integer >= 140000 THEN
            EXECUTE 'ALTER USER pre_processor_user PASSWORD ''' || replace(current_setting('PRE_PROCESSOR_PASSWORD', true), '''', '''''') || '''';
        END IF;
            GRANT CONNECT ON DATABASE alt TO pre_processor_user;
            GRANT USAGE ON SCHEMA public TO pre_processor_user;
            GRANT CREATE ON SCHEMA public TO pre_processor_user;
            GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO pre_processor_user;
            GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO pre_processor_user;
            -- Grant future privileges
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO pre_processor_user;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO pre_processor_user;
        END IF;
    END
    $$;

    -- Create search-indexer user
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'search_indexer_user') THEN
            EXECUTE 'CREATE USER search_indexer_user';
        END IF;
        -- Always update password to ensure SCRAM-SHA-256 encoding
        IF current_setting('server_version_num')::integer >= 140000 THEN
            EXECUTE 'ALTER USER search_indexer_user PASSWORD ''' || replace(current_setting('SEARCH_INDEXER_PASSWORD', true), '''', '''''') || '''';
        END IF;
            GRANT CONNECT ON DATABASE alt TO search_indexer_user;
            GRANT USAGE ON SCHEMA public TO search_indexer_user;
            GRANT CREATE ON SCHEMA public TO search_indexer_user;
            GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO search_indexer_user;
            GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO search_indexer_user;
            -- Grant future privileges
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO search_indexer_user;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO search_indexer_user;
        END IF;
    END
    $$;

    -- Create tag-generator user
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'tag_generator_user') THEN
            EXECUTE 'CREATE USER tag_generator_user';
        END IF;
        -- Always update password to ensure SCRAM-SHA-256 encoding
        IF current_setting('server_version_num')::integer >= 140000 THEN
            EXECUTE 'ALTER USER tag_generator_user PASSWORD ''' || replace(current_setting('TAG_GENERATOR_PASSWORD', true), '''', '''''') || '''';
        END IF;
            GRANT CONNECT ON DATABASE alt TO tag_generator_user;
            GRANT USAGE ON SCHEMA public TO tag_generator_user;
            GRANT CREATE ON SCHEMA public TO tag_generator_user;
            GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO tag_generator_user;
            GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO tag_generator_user;
            -- Grant future privileges
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO tag_generator_user;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO tag_generator_user;
        END IF;
    END
    $$;

    -- Create news-creator user (if needed)
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'news_creator_user') THEN
            EXECUTE 'CREATE USER news_creator_user';
        END IF;
        -- Always update password to ensure SCRAM-SHA-256 encoding
        IF current_setting('server_version_num')::integer >= 140000 THEN
            EXECUTE 'ALTER USER news_creator_user PASSWORD ''' || replace(current_setting('NEWS_CREATOR_PASSWORD', true), '''', '''''') || '''';
        END IF;
            GRANT CONNECT ON DATABASE alt TO news_creator_user;
            GRANT USAGE ON SCHEMA public TO news_creator_user;
            GRANT CREATE ON SCHEMA public TO news_creator_user;
            GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO news_creator_user;
            GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO news_creator_user;
            -- Grant future privileges
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO news_creator_user;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO news_creator_user;
        END IF;
    END
    $$;

    -- Create auth service user (separate from main database user)
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'auth_db_user') THEN
            EXECUTE 'CREATE USER auth_db_user';
        END IF;
        -- Always update password to ensure SCRAM-SHA-256 encoding
        IF current_setting('server_version_num')::integer >= 140000 THEN
            EXECUTE 'ALTER USER auth_db_user PASSWORD ''' || replace(current_setting('AUTH_DB_PASSWORD', true), '''', '''''') || '''';
        END IF;
            GRANT CONNECT ON DATABASE alt TO auth_db_user;
            GRANT USAGE ON SCHEMA public TO auth_db_user;
            GRANT CREATE ON SCHEMA public TO auth_db_user;
            GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO auth_db_user;
            GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO auth_db_user;
            -- Grant future privileges
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO auth_db_user;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO auth_db_user;
        END IF;
    END
    $$;

  # Database optimization script
  02-optimize-database.sql: |
    -- Database optimization for production workload
    -- Container initialization best practice: Configure database settings during bootstrap
    
    -- Install essential extensions
    CREATE EXTENSION IF NOT EXISTS sslinfo;
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
    
    -- Create indexes for better performance (if tables exist)
    DO $$
    BEGIN
        -- Check if common tables exist and create indexes
        IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'articles') THEN
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_articles_created_at ON articles(created_at);
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_articles_status ON articles(status);
        END IF;
        
        IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'feeds') THEN
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_feeds_url ON feeds(url);
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_feeds_active ON feeds(active);
        END IF;
    END
    $$;

  # Health check and verification script
  03-verify-setup.sql: |
    -- Database setup verification
    -- Container initialization best practice: Verify all setup completed successfully
    
    -- Verify all users were created
    SELECT rolname as "Created Users" FROM pg_roles 
    WHERE rolname IN ('pre_processor_user', 'search_indexer_user', 'tag_generator_user', 'news_creator_user', 'auth_db_user')
    ORDER BY rolname;
    
    -- Verify database is ready for microservices
    SELECT 
        current_database() as database_name,
        current_user as current_user,
        version() as postgresql_version,
        pg_size_pretty(pg_database_size(current_database())) as database_size,
        now() as initialization_completed_at;
{{- end }}