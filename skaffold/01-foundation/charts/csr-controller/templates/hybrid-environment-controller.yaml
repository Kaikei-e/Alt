apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "csr-controller.fullname" . }}-hybrid-environment-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: hybrid-environment-controller
spec:
  replicas: {{ .Values.hybridEnvironmentController.replicas | default 2 }}
  selector:
    matchLabels:
      {{- include "csr-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: hybrid-environment-controller
  template:
    metadata:
      labels:
        {{- include "csr-controller.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: hybrid-environment-controller
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/hybrid-environment-config.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.hybridEnvironmentController.podSecurityContext | nindent 8 }}
      containers:
      - name: hybrid-environment-controller
        image: "{{ .Values.hybridEnvironmentController.image.repository }}:{{ .Values.hybridEnvironmentController.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.hybridEnvironmentController.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.hybridEnvironmentController.securityContext | nindent 10 }}
        env:
        - name: HYBRID_MODE
          value: {{ .Values.hybridEnvironmentController.hybridMode | default "true" | quote }}
        - name: ON_PREMISE_ENABLED
          value: {{ .Values.hybridEnvironmentController.onPremise.enabled | default "true" | quote }}
        - name: CLOUD_BURSTING_ENABLED
          value: {{ .Values.hybridEnvironmentController.cloudBursting.enabled | default "true" | quote }}
        - name: WORKLOAD_SCHEDULING_STRATEGY
          value: {{ .Values.hybridEnvironmentController.workloadScheduling.strategy | default "cost-optimized" }}
        - name: DATA_RESIDENCY_ENFORCEMENT
          value: {{ .Values.hybridEnvironmentController.dataResidency.enforcement | default "strict" | quote }}
        - name: COMPLIANCE_MODE
          value: {{ .Values.hybridEnvironmentController.compliance.mode | default "strict" }}
        - name: DISASTER_RECOVERY_ENABLED
          value: {{ .Values.hybridEnvironmentController.disasterRecovery.enabled | default "true" | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.hybridEnvironmentController.logLevel | default "info" }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: grpc
          containerPort: 9091
          protocol: TCP
        - name: webhook
          containerPort: 9443
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.hybridEnvironmentController.resources | nindent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/hybrid-environment-controller
          readOnly: true
        - name: webhook-certs
          mountPath: /tmp/k8s-webhook-server/serving-certs
          readOnly: true
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: cloud-credentials
          mountPath: /etc/cloud-credentials
          readOnly: true
        - name: datacenter-config
          mountPath: /etc/datacenter-config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: {{ include "csr-controller.fullname" . }}-hybrid-environment-config
      - name: webhook-certs
        secret:
          secretName: {{ include "csr-controller.fullname" . }}-webhook-certs
      - name: tls-certs
        projected:
          sources:
          - secret:
              name: {{ include "csr-controller.fullname" . }}-tls-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
      - name: cloud-credentials
        secret:
          secretName: {{ include "csr-controller.fullname" . }}-cloud-credentials
      - name: datacenter-config
        configMap:
          name: {{ include "csr-controller.fullname" . }}-datacenter-config
      {{- with .Values.hybridEnvironmentController.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hybridEnvironmentController.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hybridEnvironmentController.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "csr-controller.fullname" . }}-hybrid-environment-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: hybrid-environment-controller
spec:
  type: {{ .Values.hybridEnvironmentController.service.type | default "ClusterIP" }}
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  - port: 9091
    targetPort: grpc
    protocol: TCP
    name: grpc
  - port: 443
    targetPort: webhook
    protocol: TCP
    name: webhook
  selector:
    {{- include "csr-controller.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: hybrid-environment-controller

---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingAdmissionWebhook
metadata:
  name: {{ include "csr-controller.fullname" . }}-hybrid-environment-mutator
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
spec:
  admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: {{ include "csr-controller.fullname" . }}-hybrid-environment-controller
      namespace: {{ .Release.Namespace }}
      path: /mutate
  failurePolicy: {{ .Values.hybridEnvironmentController.webhook.failurePolicy | default "Fail" }}
  namespaceSelector:
    matchLabels:
      hybrid-environment-injection: enabled
  rules:
  - apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
    operations: ["CREATE"]
  - apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments", "replicasets"]
    operations: ["CREATE", "UPDATE"]
  - apiGroups: ["batch"]
    apiVersions: ["v1", "v1beta1"]
    resources: ["jobs", "cronjobs"]
    operations: ["CREATE", "UPDATE"]
  sideEffects: None

---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: {{ include "csr-controller.fullname" . }}-hybrid-environment-validator
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
spec:
  admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: {{ include "csr-controller.fullname" . }}-hybrid-environment-controller
      namespace: {{ .Release.Namespace }}
      path: /validate
  failurePolicy: {{ .Values.hybridEnvironmentController.webhook.failurePolicy | default "Fail" }}
  namespaceSelector:
    matchLabels:
      hybrid-environment-validation: enabled
  rules:
  - apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods", "persistentvolumeclaims"]
    operations: ["CREATE", "UPDATE"]
  - apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments", "statefulsets"]
    operations: ["CREATE", "UPDATE"]
  - apiGroups: ["networking.k8s.io"]
    apiVersions: ["v1"]
    resources: ["networkpolicies"]
    operations: ["CREATE", "UPDATE"]
  sideEffects: None

---
{{- if .Values.hybridEnvironmentController.horizontalPodAutoscaler.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "csr-controller.fullname" . }}-hybrid-environment-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: hybrid-environment-controller
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "csr-controller.fullname" . }}-hybrid-environment-controller
  minReplicas: {{ .Values.hybridEnvironmentController.horizontalPodAutoscaler.minReplicas | default 2 }}
  maxReplicas: {{ .Values.hybridEnvironmentController.horizontalPodAutoscaler.maxReplicas | default 10 }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.hybridEnvironmentController.horizontalPodAutoscaler.targetCPUUtilizationPercentage | default 70 }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .Values.hybridEnvironmentController.horizontalPodAutoscaler.targetMemoryUtilizationPercentage | default 80 }}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
{{- end }}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "csr-controller.fullname" . }}-hybrid-workload-optimizer
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: hybrid-workload-optimizer
spec:
  schedule: {{ .Values.hybridEnvironmentController.workloadOptimizer.schedule | default "0 */6 * * *" | quote }}
  concurrencyPolicy: {{ .Values.hybridEnvironmentController.workloadOptimizer.concurrencyPolicy | default "Forbid" }}
  successfulJobsHistoryLimit: {{ .Values.hybridEnvironmentController.workloadOptimizer.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.hybridEnvironmentController.workloadOptimizer.failedJobsHistoryLimit | default 1 }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "csr-controller.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: hybrid-workload-optimizer
        spec:
          serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
          securityContext:
            {{- toYaml .Values.hybridEnvironmentController.workloadOptimizer.podSecurityContext | nindent 12 }}
          restartPolicy: OnFailure
          containers:
          - name: workload-optimizer
            image: "{{ .Values.hybridEnvironmentController.workloadOptimizer.image.repository }}:{{ .Values.hybridEnvironmentController.workloadOptimizer.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.hybridEnvironmentController.workloadOptimizer.image.pullPolicy }}
            securityContext:
              {{- toYaml .Values.hybridEnvironmentController.workloadOptimizer.securityContext | nindent 14 }}
            env:
            - name: OPTIMIZATION_STRATEGY
              value: {{ .Values.hybridEnvironmentController.workloadOptimizer.strategy | default "cost-performance" }}
            - name: DRY_RUN
              value: {{ .Values.hybridEnvironmentController.workloadOptimizer.dryRun | default "false" | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.hybridEnvironmentController.workloadOptimizer.logLevel | default "info" }}
            resources:
              {{- toYaml .Values.hybridEnvironmentController.workloadOptimizer.resources | nindent 14 }}
            volumeMounts:
            - name: config
              mountPath: /etc/workload-optimizer
              readOnly: true
            - name: cloud-credentials
              mountPath: /etc/cloud-credentials
              readOnly: true
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting hybrid workload optimization..."
              
              # Analyze current workload distribution
              /usr/local/bin/workload-optimizer analyze \
                --config=/etc/workload-optimizer/config.yaml \
                --credentials=/etc/cloud-credentials \
                --output=/tmp/analysis.json
              
              if [ $? -eq 0 ]; then
                echo "Workload analysis completed successfully"
                
                # Apply optimization recommendations
                if [ "$DRY_RUN" = "false" ]; then
                  /usr/local/bin/workload-optimizer optimize \
                    --config=/etc/workload-optimizer/config.yaml \
                    --analysis=/tmp/analysis.json \
                    --apply
                else
                  echo "Dry run mode: optimization recommendations generated but not applied"
                  /usr/local/bin/workload-optimizer optimize \
                    --config=/etc/workload-optimizer/config.yaml \
                    --analysis=/tmp/analysis.json \
                    --dry-run
                fi
              else
                echo "Workload analysis failed"
                exit 1
              fi
              
              echo "Hybrid workload optimization completed"
          volumes:
          - name: config
            configMap:
              name: {{ include "csr-controller.fullname" . }}-hybrid-environment-config
          - name: cloud-credentials
            secret:
              secretName: {{ include "csr-controller.fullname" . }}-cloud-credentials