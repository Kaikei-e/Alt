{{- if .Values.tests.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "csr-controller.fullname" . }}-test
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csr-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  serviceAccountName: {{ include "csr-controller.serviceAccountName" . }}
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 65534
  containers:
  - name: cert-system-test
    image: {{ .Values.tests.image.repository }}:{{ .Values.tests.image.tag }}
    imagePullPolicy: {{ .Values.tests.image.pullPolicy }}
    env:
    - name: SIGNER_NAME
      value: {{ include "csr-controller.signerName" . }}
    - name: TEST_NAMESPACE
      value: {{ .Release.Namespace }}
    - name: CSR_CONTROLLER_SERVICE
      value: {{ include "csr-controller.fullname" . }}
    - name: CERT_MONITOR_SERVICE
      value: {{ include "csr-controller.fullname" . }}-cert-monitor
    - name: TEST_TIMEOUT
      value: {{ .Values.tests.timeout | quote }}
    - name: LOG_LEVEL
      value: {{ .Values.tests.logLevel | quote }}
    command:
    - /bin/sh
    - -c
    - |
      echo "Starting certificate system integration tests..."
      echo "Signer name: $SIGNER_NAME"
      echo "Test namespace: $TEST_NAMESPACE"
      echo "Test timeout: $TEST_TIMEOUT"
      
      # Test result tracking
      TESTS_PASSED=0
      TESTS_FAILED=0
      TESTS_TOTAL=0
      
      # Function to run test
      run_test() {
        local test_name=$1
        local test_command=$2
        
        echo ""
        echo "=== Running Test: $test_name ==="
        TESTS_TOTAL=$((TESTS_TOTAL + 1))
        
        if eval "$test_command"; then
          echo "✅ PASSED: $test_name"
          TESTS_PASSED=$((TESTS_PASSED + 1))
          return 0
        else
          echo "❌ FAILED: $test_name"
          TESTS_FAILED=$((TESTS_FAILED + 1))
          return 1
        fi
      }
      
      # Test 1: CSR Controller Health Check
      test_csr_controller_health() {
        echo "Testing CSR controller health endpoint..."
        
        if kubectl get service $CSR_CONTROLLER_SERVICE -n $TEST_NAMESPACE >/dev/null 2>&1; then
          echo "CSR controller service found"
          
          # Test health endpoint
          if kubectl exec -n $TEST_NAMESPACE $(kubectl get pod -n $TEST_NAMESPACE -l app.kubernetes.io/name=csr-controller -o jsonpath='{.items[0].metadata.name}') -- wget -q --spider http://localhost:8081/healthz; then
            echo "Health endpoint responding"
            return 0
          else
            echo "Health endpoint not responding"
            return 1
          fi
        else
          echo "CSR controller service not found"
          return 1
        fi
      }
      
      # Test 2: Certificate Monitor Health Check
      test_cert_monitor_health() {
        echo "Testing certificate monitor health endpoint..."
        
        if kubectl get service $CERT_MONITOR_SERVICE -n $TEST_NAMESPACE >/dev/null 2>&1; then
          echo "Certificate monitor service found"
          
          # Test health endpoint
          if kubectl exec -n $TEST_NAMESPACE $(kubectl get pod -n $TEST_NAMESPACE -l app.kubernetes.io/component=cert-monitor -o jsonpath='{.items[0].metadata.name}') -- wget -q --spider http://localhost:8081/; then
            echo "Health endpoint responding"
            return 0
          else
            echo "Health endpoint not responding"
            return 1
          fi
        else
          echo "Certificate monitor service not found"
          return 1
        fi
      }
      
      # Test 3: CSR Generation and Approval
      test_csr_generation_approval() {
        echo "Testing CSR generation and approval..."
        
        # Generate test private key
        openssl genrsa -out /tmp/test.key 2048
        
        # Create test CSR
        cat > /tmp/test.conf <<EOF
      [req]
      distinguished_name = req_distinguished_name
      req_extensions = v3_req
      prompt = no
      
      [req_distinguished_name]
      CN = test-service
      O = Alt RSS Reader
      
      [v3_req]
      keyUsage = keyEncipherment, dataEncipherment
      extendedKeyUsage = serverAuth
      subjectAltName = @alt_names
      
      [alt_names]
      DNS.1 = test-service
      DNS.2 = test-service.test.svc.cluster.local
      EOF
        
        # Generate CSR
        openssl req -new -key /tmp/test.key -out /tmp/test.csr -config /tmp/test.conf
        
        # Create K8s CSR
        csr_name="test-csr-$(date +%s)"
        cat > /tmp/k8s_csr.yaml <<EOF
      apiVersion: certificates.k8s.io/v1
      kind: CertificateSigningRequest
      metadata:
        name: $csr_name
        labels:
          app.kubernetes.io/managed-by: csr-controller-test
      spec:
        request: $(cat /tmp/test.csr | base64 | tr -d '\n')
        signerName: $SIGNER_NAME
        usages:
        - digital signature
        - key encipherment
        - server auth
      EOF
        
        # Apply CSR
        if kubectl apply -f /tmp/k8s_csr.yaml; then
          echo "CSR created successfully"
          
          # Wait for approval
          for i in {1..30}; do
            if kubectl get csr $csr_name -o jsonpath='{.status.certificate}' | grep -q "LS0t"; then
              echo "CSR approved and signed"
              kubectl delete csr $csr_name
              return 0
            fi
            sleep 2
          done
          
          echo "CSR was not approved within timeout"
          kubectl delete csr $csr_name
          return 1
        else
          echo "Failed to create CSR"
          return 1
        fi
      }
      
      # Test 4: Certificate Validation
      test_certificate_validation() {
        echo "Testing certificate validation..."
        
        # Create a test certificate secret
        secret_name="test-cert-$(date +%s)"
        
        # Generate valid certificate
        openssl genrsa -out /tmp/test.key 2048
        openssl req -new -key /tmp/test.key -out /tmp/test.csr -subj "/CN=test-service/O=Alt RSS Reader"
        openssl x509 -req -in /tmp/test.csr -signkey /tmp/test.key -out /tmp/test.crt -days 365
        
        # Create secret
        kubectl create secret generic $secret_name -n $TEST_NAMESPACE \
          --from-file=tls.crt=/tmp/test.crt \
          --from-file=tls.key=/tmp/test.key
        
        # Label secret
        kubectl label secret $secret_name -n $TEST_NAMESPACE app.kubernetes.io/component=ssl-certificate
        
        # Test certificate validation
        cert_data=$(kubectl get secret $secret_name -n $TEST_NAMESPACE -o jsonpath='{.data.tls\.crt}')
        key_data=$(kubectl get secret $secret_name -n $TEST_NAMESPACE -o jsonpath='{.data.tls\.key}')
        
        if [ -n "$cert_data" ] && [ -n "$key_data" ]; then
          echo "Certificate data retrieved successfully"
          
          # Validate certificate format
          echo "$cert_data" | base64 -d > /tmp/validate.crt
          echo "$key_data" | base64 -d > /tmp/validate.key
          
          if openssl x509 -in /tmp/validate.crt -noout -text >/dev/null 2>&1; then
            echo "Certificate format is valid"
            
            # Validate key pair
            cert_pub=$(openssl x509 -in /tmp/validate.crt -noout -pubkey)
            key_pub=$(openssl rsa -in /tmp/validate.key -pubout)
            
            if [ "$cert_pub" = "$key_pub" ]; then
              echo "Certificate and key pair match"
              kubectl delete secret $secret_name -n $TEST_NAMESPACE
              return 0
            else
              echo "Certificate and key pair do not match"
              kubectl delete secret $secret_name -n $TEST_NAMESPACE
              return 1
            fi
          else
            echo "Certificate format is invalid"
            kubectl delete secret $secret_name -n $TEST_NAMESPACE
            return 1
          fi
        else
          echo "Failed to retrieve certificate data"
          kubectl delete secret $secret_name -n $TEST_NAMESPACE
          return 1
        fi
      }
      
      # Test 5: Metrics Endpoint
      test_metrics_endpoint() {
        echo "Testing metrics endpoint..."
        
        # Test CSR controller metrics
        if kubectl exec -n $TEST_NAMESPACE $(kubectl get pod -n $TEST_NAMESPACE -l app.kubernetes.io/name=csr-controller -o jsonpath='{.items[0].metadata.name}') -- wget -q -O - http://localhost:8080/metrics | grep -q "cert_"; then
          echo "CSR controller metrics available"
          
          # Test certificate monitor metrics
          if kubectl exec -n $TEST_NAMESPACE $(kubectl get pod -n $TEST_NAMESPACE -l app.kubernetes.io/component=cert-monitor -o jsonpath='{.items[0].metadata.name}') -- wget -q -O - http://localhost:8080/ | grep -q "cert_"; then
            echo "Certificate monitor metrics available"
            return 0
          else
            echo "Certificate monitor metrics not available"
            return 1
          fi
        else
          echo "CSR controller metrics not available"
          return 1
        fi
      }
      
      # Test 6: RBAC Permissions
      test_rbac_permissions() {
        echo "Testing RBAC permissions..."
        
        # Test CSR permissions
        if kubectl auth can-i create certificatesigningrequests.certificates.k8s.io --as=system:serviceaccount:$TEST_NAMESPACE:$(kubectl get serviceaccount -n $TEST_NAMESPACE -l app.kubernetes.io/name=csr-controller -o jsonpath='{.items[0].metadata.name}'); then
          echo "CSR creation permission granted"
          
          # Test secret permissions
          if kubectl auth can-i create secrets --as=system:serviceaccount:$TEST_NAMESPACE:$(kubectl get serviceaccount -n $TEST_NAMESPACE -l app.kubernetes.io/name=csr-controller -o jsonpath='{.items[0].metadata.name}'); then
            echo "Secret creation permission granted"
            return 0
          else
            echo "Secret creation permission denied"
            return 1
          fi
        else
          echo "CSR creation permission denied"
          return 1
        fi
      }
      
      # Test 7: Certificate Rotation Simulation
      test_certificate_rotation() {
        echo "Testing certificate rotation simulation..."
        
        # Create a test certificate with short expiry
        secret_name="test-rotation-$(date +%s)"
        
        # Generate certificate expiring in 1 day
        openssl genrsa -out /tmp/rotation.key 2048
        openssl req -new -key /tmp/rotation.key -out /tmp/rotation.csr -subj "/CN=rotation-test/O=Alt RSS Reader"
        openssl x509 -req -in /tmp/rotation.csr -signkey /tmp/rotation.key -out /tmp/rotation.crt -days 1
        
        # Create secret
        kubectl create secret generic $secret_name -n $TEST_NAMESPACE \
          --from-file=tls.crt=/tmp/rotation.crt \
          --from-file=tls.key=/tmp/rotation.key
        
        # Label secret
        kubectl label secret $secret_name -n $TEST_NAMESPACE app.kubernetes.io/component=ssl-certificate
        
        # Simulate rotation check
        cert_data=$(kubectl get secret $secret_name -n $TEST_NAMESPACE -o jsonpath='{.data.tls\.crt}')
        echo "$cert_data" | base64 -d > /tmp/check.crt
        
        # Check expiry
        expiry_date=$(openssl x509 -in /tmp/check.crt -noout -enddate | cut -d= -f2)
        expiry_epoch=$(date -d "$expiry_date" +%s)
        current_epoch=$(date +%s)
        days_until_expiry=$(((expiry_epoch - current_epoch) / 86400))
        
        if [ $days_until_expiry -le 30 ]; then
          echo "Certificate detected as expiring soon (days: $days_until_expiry)"
          kubectl delete secret $secret_name -n $TEST_NAMESPACE
          return 0
        else
          echo "Certificate expiry detection failed"
          kubectl delete secret $secret_name -n $TEST_NAMESPACE
          return 1
        fi
      }
      
      # Run all tests
      echo "Starting certificate system integration tests..."
      echo "=============================================="
      
      run_test "CSR Controller Health Check" "test_csr_controller_health"
      run_test "Certificate Monitor Health Check" "test_cert_monitor_health"
      run_test "CSR Generation and Approval" "test_csr_generation_approval"
      run_test "Certificate Validation" "test_certificate_validation"
      run_test "Metrics Endpoint" "test_metrics_endpoint"
      run_test "RBAC Permissions" "test_rbac_permissions"
      run_test "Certificate Rotation Simulation" "test_certificate_rotation"
      
      # Report results
      echo ""
      echo "=============================================="
      echo "Test Results Summary:"
      echo "Total tests: $TESTS_TOTAL"
      echo "Passed: $TESTS_PASSED"
      echo "Failed: $TESTS_FAILED"
      echo "=============================================="
      
      if [ $TESTS_FAILED -gt 0 ]; then
        echo "Some tests failed. Please check the certificate system configuration."
        exit 1
      else
        echo "All tests passed! Certificate system is working correctly."
        exit 0
      fi
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    volumeMounts:
    - name: tmp
      mountPath: /tmp
  volumes:
  - name: tmp
    emptyDir: {}
{{- end }}