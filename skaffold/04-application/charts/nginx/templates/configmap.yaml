{{- if .Values.configMap.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nginx.configMapName" . }}
  labels:
    {{- include "nginx.labels" . | nindent 4 }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  nginx.conf: |
    # Nginx設定ファイル：エンタープライズグレードSSL終端プロキシ
    # 最新のNginx仕様に準拠し、すべての構文制限を回避した完全最適化版

    # メインコンテキスト：プロセス全体の基本設定
    # 注意：Dockerコンテナ環境では'user'ディレクティブは警告を発生させるため除外

    # ワーカープロセス数：実行環境のCPUコア数に自動調整
    # この設定により、利用可能なハードウェアリソースを最大限活用
    worker_processes auto;

    # エラーログ設定：運用監視に適した情報レベルでの詳細ログ出力
    error_log /var/log/nginx/error.log info;

    # PIDファイル配置：Dockerコンテナ書き込み権限を考慮した一時ディレクトリ使用
    pid /tmp/nginx.pid;

    # ワーカープロセスファイル記述子制限：高負荷環境での安定動作保証
    # 重要：このディレクティブはmainコンテキスト（最上位レベル）でのみ有効
    # eventsブロック内に配置すると構文エラーが発生するため、この位置に配置
    worker_rlimit_nofile 16384;

    # イベント処理設定：Nginxコアの接続処理最適化パラメータ
    events {
        # ワーカープロセスあたりの同時接続数：メモリ使用量とスループットのバランス最適化
        worker_connections 2048;

        # Linux環境最適化：epollイベント通知メカニズムの使用
        # epollはLinuxカーネルのスケーラブルI/O多重化機能で、大量同時接続を効率処理
        use epoll;

        # 複数接続同時受入：単一accept()コールでの複数接続処理による性能向上
        multi_accept on;
    }

    # HTTPコンテキスト：すべてのHTTP関連設定とサーバーブロックを包含
    http {
        # 基本MIME設定：適切なContent-Type判定のための標準設定読み込み
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # 統一ログフォーマット：SSL/TLS環境での包括的アクセス情報記録
        # すべてのサーバーブロックで統一されたログフォーマットを使用することで
        # ログ解析、監視システムとの連携、セキュリティ監査の効率性を大幅向上
        log_format ssl_main '$remote_addr - $remote_user [$time_local] "$request" '
                           '$status $body_bytes_sent "$http_referer" '
                           '"$http_user_agent" "$http_x_forwarded_for" '
                           'rt=$request_time uct="$upstream_connect_time" '
                           'uht="$upstream_header_time" urt="$upstream_response_time" '
                           'ssl_protocol="$ssl_protocol" ssl_cipher="$ssl_cipher" '
                           'content_type="$sent_http_content_type"';

        # デフォルトアクセスログ：統一フォーマットによる一貫性のあるログ記録
        access_log /var/log/nginx/access.log ssl_main;

        # 基本性能最適化設定：ネットワーク効率とレスポンス速度の向上
        sendfile on;              # カーネルレベルゼロコピー送信の有効化
        tcp_nopush on;           # TCPパケット送信効率の最適化
        tcp_nodelay on;          # 小パケット即座送信によるレイテンシ削減
        keepalive_timeout 75;    # 持続接続タイムアウト（性能とリソース使用量のバランス）
        keepalive_requests 1000; # 持続接続での最大リクエスト処理数
        types_hash_max_size 4096; # MIMEタイプハッシュテーブルサイズ最適化
        server_tokens off;       # セキュリティ向上：サーバーバージョン情報の非表示

        # HTTP/2プロトコル有効化：現代的Web通信の高速化
        # 最新Nginx仕様に準拠したHTTP/2設定（listen ディレクティブから分離）
        http2 on;

        # Gzip圧縮設定：帯域幅効率化とページ読み込み速度向上
        gzip on;                # 圧縮機能の有効化
        gzip_vary on;           # Vary: Accept-Encodingヘッダーによるキャッシュ最適化
        gzip_proxied any;       # プロキシ経由リクエストでの圧縮適用
        gzip_comp_level 4;      # 圧縮レベル（CPU負荷と圧縮効果のバランス最適化）
        gzip_min_length 1100;   # 圧縮対象最小ファイルサイズ（小ファイル圧縮オーバーヘッド回避）
        gzip_buffers 16 8k;     # 圧縮処理用メモリバッファ設定
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;

        # プロキシ設定：アップストリームサーバーとの通信最適化
        proxy_buffering on;           # レスポンスバッファリング有効化
        proxy_buffer_size 8k;         # 初期レスポンスバッファサイズ
        proxy_buffers 16 8k;          # レスポンス本体用バッファ設定
        proxy_busy_buffers_size 16k;  # ビジー状態バッファサイズ制限
        proxy_temp_file_write_size 16k; # 一時ファイル書き込みサイズ
        proxy_connect_timeout 30s;    # アップストリーム接続タイムアウト
        proxy_send_timeout 60s;       # アップストリーム送信タイムアウト
        proxy_read_timeout 60s;       # アップストリーム読み取りタイムアウト
        proxy_http_version 1.1;       # アップストリーム通信HTTPバージョン

        # アップストリーム定義：負荷分散とヘルスチェック設定
        upstream frontend_app {
            # 最少接続数による負荷分散：アクティブ接続数が最も少ないサーバーを優先選択
            least_conn;
            server alt-frontend.alt-apps.svc.cluster.local:3000 weight=1 max_fails=3 fail_timeout=30s;

            # 持続接続設定：アップストリーム通信効率の向上
            keepalive 16;        # 維持する持続接続数
            keepalive_requests 100;  # 持続接続での最大リクエスト処理数
            keepalive_timeout 60s;   # 持続接続維持時間
        }

        upstream backend_api {
            # IPハッシュ負荷分散：クライアントIPに基づくセッション親和性
            # APIセッション管理やステートフル処理での一貫性確保
            ip_hash;
            server alt-backend.alt-apps.svc.cluster.local:9000 weight=2 max_fails=2 fail_timeout=20s;

            # API処理最適化持続接続設定
            keepalive 32;        # API通信効率化のための多めの持続接続
            keepalive_requests 200;  # API処理効率向上のための多めのリクエスト数
            keepalive_timeout 75s;
        }

        # レート制限設定：DDoS攻撃、スパム、過負荷防止
        limit_req_zone $binary_remote_addr zone=api_limit:10m rate=1200r/m;     # API専用制限（分あたり）
        limit_req_zone $binary_remote_addr zone=general_limit:10m rate=50r/s;   # 一般アクセス制限（秒あたり）

        # WebSocket通信対応：HTTP Upgradeヘッダーの動的マッピング
        map $http_upgrade $connection_upgrade {
            default upgrade;
            '' close;
        }

        # メインHTTPSサーバーブロック：SSL終端とリバースプロキシ機能
        server {
            # SSL終端リスナー：IPv4/IPv6対応のHTTPS接続受付
            listen 443 ssl;
            listen [::]:443 ssl;
            server_name nginx.alt-ingress.svc.cluster.local nginx-internal.local;

            # TLS証明書設定：Cert-Manager自動管理証明書の使用
            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;

            # エンタープライズグレードTLS設定：セキュリティと性能の最適バランス
            ssl_protocols TLSv1.2 TLSv1.3;  # 安全なTLSバージョンのみ許可
            ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
            ssl_prefer_server_ciphers off;   # クライアント優先暗号化スイート選択（TLS1.3最適化）
            ssl_session_cache shared:SSL:50m; # SSL セッション共有キャッシュ
            ssl_session_timeout 1d;         # セッション有効期間
            ssl_session_tickets off;        # セッションチケット無効化（セキュリティ向上）
            ssl_buffer_size 4k;             # SSL I/Oバッファサイズ最適化
            ssl_early_data on;              # TLS 1.3 Early Data機能有効化

            # OCSP Stapling：証明書検証効率化とプライバシー保護
            ssl_stapling on;
            ssl_stapling_verify on;
            resolver 8.8.8.8 8.8.4.4 valid=300s;
            resolver_timeout 5s;

            # セキュリティヘッダー：包括的Webアプリケーションセキュリティ対策
            add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;

            # 統一ログフォーマット適用：すべてのHTTPSアクセスの一貫した記録
            access_log /var/log/nginx/https_access.log ssl_main;
            error_log /var/log/nginx/https_error.log info;

            # Next.js静的リソース最優先処理：最高優先度での静的ファイル配信
            # 重要：この設定を他のlocationブロックより前に配置することで
            # Next.js静的リソースの確実な処理を保証
            location ^~ /_next/static/ {
                # HTTPヘッダー制御：静的リソース専用最適化
                proxy_hide_header Content-Type;
                proxy_hide_header Cache-Control;
                proxy_hide_header Expires;

                # フロントエンドアプリケーションへの直接プロキシ
                # try_filesを使用せず、直接アップストリームに転送
                proxy_pass http://frontend_app;

                # 静的リソース用基本ヘッダー設定
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto https;

                # Next.js最適化：ハッシュベースファイルによる超長期キャッシュ
                expires 1y;
                add_header Cache-Control "public, immutable" always;

                # 重要：アップストリームからのContent-Typeを優先使用
                # これにより、.js、.css、.map等の適切なMIMEタイプが保持される
                add_header Content-Type $upstream_http_content_type always;

                # Next.js静的リソース用圧縮最適化
                gzip_min_length 1024;
                gzip_types
                    text/css
                    application/javascript
                    application/json
                    text/javascript
                    application/x-javascript;

                # 静的リソース専用レート制限（緩和設定）
                limit_req zone=general_limit burst=100 nodelay;

                # 重要：静的リソースが見つからない場合は404を返す
                # SPAフォールバックは実行しない
                error_page 404 = @static_not_found;
            }

            # 静的リソース専用404エラーハンドラー
            location @static_not_found {
                # 静的リソースが見つからない場合の明示的な404レスポンス
                # HTMLフォールバックではなく、適切な404ステータスを返す
                return 404 "Static resource not found: $uri\nTimestamp: $time_iso8601\n";
                add_header Content-Type "text/plain; charset=utf-8" always;
                access_log /var/log/nginx/static_404.log ssl_main;
            }

            # メインロケーション：フロントエンドアプリケーション配信
            # 重要：^~修飾子により、より具体的なlocationブロックを優先
            location / {
                # HTTPヘッダー制御：アップストリームレスポンスの適切な管理
                proxy_hide_header Content-Type;
                proxy_hide_header Cache-Control;
                proxy_hide_header Expires;

                # フロントエンドアプリケーションへの透過プロキシ
                proxy_pass http://frontend_app;

                # TLS環境対応プロキシヘッダー：セキュリティ情報の適切な転送
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;
                proxy_set_header X-Request-ID $request_id;
                proxy_set_header X-SSL-Protocol $ssl_protocol;
                proxy_set_header X-SSL-Cipher $ssl_cipher;

                # WebSocket通信支援ヘッダー
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;

                # レスポンスヘッダー適正化
                add_header Content-Type $upstream_http_content_type always;
                add_header Cache-Control $upstream_http_cache_control always;

                # SPA対応：HTMLページのみフォールバック処理
                # 重要：静的リソースは除外され、HTMLページのみが対象
                try_files $uri $uri/ @spa_fallback;

                # 一般アクセスレート制限
                limit_req zone=general_limit burst=50 nodelay;
            }

            # RESTful APIエンドポイント：バックエンドAPI通信の最適化
            # 重要：文字列マッチングlocationによりproxy_pass URI部分使用が可能
            location /api/ {
                # HTTPヘッダー制御：API レスポンスの適切な管理
                proxy_hide_header Content-Type;
                proxy_hide_header Access-Control-Allow-Origin;

                # バックエンドAPIへのプロキシ設定
                # パス変換：/api/xxx → /xxx （URIパート使用）
                proxy_pass http://backend_api/;

                # API専用プロキシヘッダー：認証とトレーシング情報の転送
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;
                proxy_set_header X-API-Request-ID $request_id;
                proxy_set_header X-SSL-Authenticated true;

                # API最適化タイムアウト：レスポンシブな応答性確保
                proxy_connect_timeout 15s;
                proxy_read_timeout 30s;

                # JSON API用Content-Type設定
                add_header Content-Type $upstream_http_content_type always;

                # CORS設定：セキュアなクロスオリジンAPI アクセス制御
                add_header Access-Control-Allow-Origin "$http_origin" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, X-API-Key" always;

                # CORSプリフライトリクエスト処理：OPTIONS メソッドの適切な応答
                if ($request_method = 'OPTIONS') {
                    add_header Access-Control-Allow-Origin "$http_origin" always;
                    add_header Access-Control-Allow-Credentials "true" always;
                    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
                    add_header Content-Length 0;
                    add_header Content-Type "text/plain; charset=utf-8";
                    return 200;
                }

                # API専用レート制限：DoS攻撃とスパム防止
                limit_req zone=api_limit burst=100 nodelay;
            }

            # Server-Sent Events専用エンドポイント：リアルタイム通信最適化
            # 重要：文字列マッチングによりURIパート変換を安全に実装
            location /api/v1/sse/ {
                proxy_hide_header Content-Type;

                # SSE専用プロキシ設定：リアルタイムストリーミング最適化
                proxy_pass http://backend_api/v1/sse/;

                # SSEリアルタイム通信用ヘッダー設定
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;
                proxy_set_header Connection '';

                # SSE専用設定：ストリーミング通信の最適化
                proxy_buffering off;        # バッファリング無効化：リアルタイム性確保
                proxy_cache off;           # キャッシュ無効化
                chunked_transfer_encoding off; # チャンク転送無効化

                # 長時間接続対応：WebSocketライクな持続接続サポート
                proxy_send_timeout 300s;
                proxy_read_timeout 300s;

                # SSE標準準拠Content-Type設定
                add_header Content-Type "text/event-stream; charset=utf-8" always;
                add_header Cache-Control "no-cache" always;
                add_header X-Accel-Buffering "no" always;

                # SSE用CORS設定：リアルタイム通信のアクセス制御
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            }

            # 静的リソース配信最適化：タイプ別細分化設定
            # 重要：すべて文字列マッチングlocationに変更（正規表現を完全排除）

            # アセットディレクトリ：一般的な静的リソース
            location /assets/ {
                proxy_hide_header Content-Type;
                proxy_hide_header Cache-Control;
                proxy_hide_header Expires;

                # 透過プロキシ：完全なパス保持
                proxy_pass http://frontend_app;

                # 静的リソース用基本ヘッダー
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto https;

                # 長期キャッシュ戦略：静的リソース最適化
                expires 1y;
                add_header Cache-Control "public, immutable" always;
                add_header Content-Type $upstream_http_content_type always;

                # 汎用静的リソース圧縮設定
                gzip_min_length 1024;
                gzip_types text/css application/javascript application/json image/svg+xml;
            }

            # 静的ディレクトリ：フレームワーク非依存リソース
            location /static/ {
                proxy_hide_header Content-Type;
                proxy_hide_header Cache-Control;
                proxy_hide_header Expires;

                proxy_pass http://frontend_app;

                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto https;

                # 静的リソース用積極的キャッシュ
                expires 1y;
                add_header Cache-Control "public, immutable" always;
                add_header Content-Type $upstream_http_content_type always;

                gzip_min_length 1024;
                gzip_types text/css application/javascript application/json image/svg+xml;
            }

            # Next.js最適化ビルドファイル：動的生成静的リソース
            location /_next/ {
                proxy_hide_header Content-Type;
                proxy_hide_header Cache-Control;
                proxy_hide_header Expires;

                proxy_pass http://frontend_app;

                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto https;

                # Next.js最適化：ハッシュベースファイル名による超長期キャッシュ
                expires 1y;
                add_header Cache-Control "public, immutable" always;
                add_header Content-Type $upstream_http_content_type always;

                gzip_min_length 1024;
                gzip_types text/css application/javascript application/json image/svg+xml;
            }

            # 画像リソース専用最適化
            location /images/ {
                proxy_hide_header Content-Type;
                proxy_hide_header Cache-Control;
                proxy_hide_header Expires;

                proxy_pass http://frontend_app;

                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto https;

                # 画像リソース用長期キャッシュ
                expires 1y;
                add_header Cache-Control "public, immutable" always;
                add_header Content-Type $upstream_http_content_type always;

                # 画像ファイル用圧縮：SVGのみ対象（ビットマップは既圧縮）
                gzip_types image/svg+xml;
            }

            # CSSスタイルシート専用最適化
            location /css/ {
                proxy_hide_header Content-Type;
                proxy_hide_header Cache-Control;
                proxy_hide_header Expires;

                proxy_pass http://frontend_app;

                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto https;

                # CSS専用長期キャッシュ
                expires 1y;
                add_header Cache-Control "public, immutable" always;
                add_header Content-Type $upstream_http_content_type always;

                # CSS専用圧縮設定
                gzip_min_length 1024;
                gzip_types text/css;
            }

            # JavaScript専用最適化
            location /js/ {
                proxy_hide_header Content-Type;
                proxy_hide_header Cache-Control;
                proxy_hide_header Expires;

                proxy_pass http://frontend_app;

                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto https;

                # JavaScript専用長期キャッシュ
                expires 1y;
                add_header Cache-Control "public, immutable" always;
                add_header Content-Type $upstream_http_content_type always;

                # JavaScript専用圧縮設定
                gzip_min_length 1024;
                gzip_types application/javascript;
            }

            # SPAフォールバック：クライアントサイドルーティング対応
            # Named locationのため、URIパートを含むproxy_passは使用不可
            # 透過プロキシ設定でフロントエンドアプリケーションに処理委譲
            location @spa_fallback {
                proxy_hide_header Content-Type;

                # 重要：named locationではURIパートなしのproxy_passのみ使用可能
                proxy_pass http://frontend_app;

                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;

                # SPA用Content-Type強制設定
                add_header Content-Type "text/html; charset=utf-8" always;
            }

            # SSL対応ヘルスチェックエンドポイント：運用監視最適化
            location /health {
                access_log off;  # ヘルスチェックはログ記録除外

                # 詳細ヘルスチェック情報の提供
                return 200 "Internal nginx HTTPS healthy\nTimestamp: $time_iso8601\nServer: $hostname\nSSL Protocol: $ssl_protocol\nSSL Cipher: $ssl_cipher\n";

                add_header Content-Type "text/plain; charset=utf-8" always;
                add_header X-Health-Check "nginx-internal-ssl" always;
                add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            }

            # SSL統計情報エンドポイント：デバッグ用（アクセス制限付き）
            location /ssl-status {
                access_log off;

                # 内部ネットワークからのアクセスのみ許可
                allow 127.0.0.1;
                allow 10.0.0.0/8;
                deny all;

                return 200 "SSL Status: $ssl_protocol\nCipher: $ssl_cipher\nSession Reused: $ssl_session_reused\nTimestamp: $time_iso8601\n";
                add_header Content-Type "text/plain; charset=utf-8" always;
            }

            # エラーページ処理：カスタムエラーレスポンス
            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                internal;  # 内部リダイレクトのみ
                return 500 "Internal Server Error (HTTPS)\nTimestamp: $time_iso8601\n";
                add_header Content-Type "text/plain; charset=utf-8" always;
            }
        }

        # HTTP to HTTPS自動リダイレクトサーバー：セキュリティ強制
        server {
            listen 8080;
            listen [::]:8080;
            server_name nginx.alt-ingress.svc.cluster.local;

            # すべてのHTTPリクエストをHTTPSに永続リダイレクト
            return 301 https://$server_name$request_uri;
        }

        # Kubernetes専用ヘルスチェックサーバー：コンテナオーケストレーション対応
        server {
            listen 9080;
            server_name localhost health.internal;
            access_log off;  # ヘルスチェックトラフィックのログ除外

            # Kubernetesプローブ用基本ヘルスチェック
            location /nginx-health {
                access_log off;

                return 200 "nginx SSL-enabled healthy\nTimestamp: $time_iso8601\nServer: $hostname\nSSL Status: Enabled\n";
                add_header Content-Type "text/plain; charset=utf-8" always;
                add_header X-Health-Check "nginx-internal-ssl" always;
                add_header X-SSL-Enabled "true" always;
                add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            }

            # 詳細ヘルスチェック：JSON形式のシステム情報
            location /nginx-health/detailed {
                access_log off;

                # 包括的システム状態情報のJSON応答
                return 200 '{
                    "status": "healthy",
                    "service": "nginx-internal-complete-fixed",
                    "timestamp": "$time_iso8601",
                    "server_hostname": "$hostname",
                    "nginx_version": "$nginx_version",
                    "ssl_enabled": true,
                    "ssl_protocols": "TLSv1.2 TLSv1.3",
                    "http2_enabled": true,
                    "log_format": "ssl_main_unified",
                    "syntax_status": "all_errors_resolved",
                    "regex_locations_removed": true,
                    "proxy_pass_compliance": "full",
                    "upstreams": {
                      "frontend_app": "alt-frontend.alt-apps.svc.cluster.local:3000",
                      "backend_api": "alt-backend.alt-apps.svc.cluster.local:9000"
                    },
                    "features": [
                      "ssl_termination",
                      "http2_modern_standard",
                      "log_format_unified",
                      "syntax_error_resolved",
                      "regex_proxy_pass_conflict_resolved",
                      "docker_compose_migration_complete",
                      "content_type_unified",
                      "spa_routing_support",
                      "sse_support",
                      "cors_enabled",
                      "pod_ssl_communication",
                      "string_location_only"
                    ]
                  }';
                add_header Content-Type "application/json; charset=utf-8" always;
                add_header X-Health-Check "nginx-detailed-ssl" always;
            }

            # デフォルトレスポンス：ヘルスチェック以外のアクセスに対する案内
            location / {
                return 404 "SSL-enabled Health check\nHTTPS available on port 443\nTimestamp: $time_iso8601\n";
                add_header Content-Type "text/plain; charset=utf-8" always;
            }
        }
    }
{{- end }}