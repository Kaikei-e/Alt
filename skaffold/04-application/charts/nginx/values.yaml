# Default values for nginx
# nginx internal proxy/load balancer configuration

# Replica configuration
replicaCount: 2

# Image configuration
image:
  repository: nginxinc/nginx-unprivileged
  pullPolicy: IfNotPresent # OSS公式イメージは外部pull必要
  tag: "1.25.3-alpine"

# Image pull secrets
imagePullSecrets: []

# Service account
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Pod annotations and labels
podAnnotations:
  rask.group: "nginx-proxy"

podLabels:
  io.kompose.service: "nginx-proxy"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 101 # nginx 非 root ユーザー
  fsGroup: 101 # ボリュームアクセス用
  sysctls:
    - name: net.ipv4.ip_unprivileged_port_start
      value: "0" # 非 root でも低番号ポートを解放

# コンテナ個別のセキュリティ設定
securityContext:
  runAsNonRoot: true
  runAsUser: 101
  capabilities:
    add: ["NET_BIND_SERVICE"] # 80/443 バインド権限
    drop: ["ALL"]

# Service configuration
service:
  type: ClusterIP
  port: 8080
  httpsPort: 443
  healthPort: 9080
  annotations: {}
  clusterIP: ""
  sessionAffinity: ""
  sessionAffinityConfig: {}
  extraPorts: []

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: nginx.alt.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Resources configuration
resources:
  limits:
    cpu: "1"
    memory: "512Mi"
  requests:
    cpu: "100m"
    memory: "128Mi"

# Liveness probe
# Liveness Probe設定（コンテナ生存確認用）
livenessProbe:
  httpGet:
    path: /nginx-health
    port: 9080 # ConfigMapの設定と完全に整合（修正完了）
    scheme: HTTP # HTTPプロトコルの明示的指定
  # nginx起動時間を考慮した初期遅延設定
  initialDelaySeconds: 45 # コンテナ起動後の安定化待機時間
  # ヘルスチェック実行間隔の最適化
  periodSeconds: 15 # 15秒間隔での定期的なヘルスチェック実行
  # タイムアウト設定の調整
  timeoutSeconds: 8 # 各ヘルスチェックリクエストの最大待機時間
  # 失敗許容回数の設定
  failureThreshold: 5 # 5回連続失敗でコンテナ再起動を実行
  # 成功判定回数の設定
  successThreshold: 1 # 1回成功で正常状態に復帰

# Readiness Probe設定（トラフィック受入準備確認用）
readinessProbe:
  httpGet:
    path: /nginx-health
    port: 9080 # ConfigMapの設定と完全に整合（修正完了）
    scheme: HTTP # HTTPプロトコルの明示的指定
  # サービス開始前の準備時間確保
  initialDelaySeconds: 20 # 基本的なnginx設定読み込み完了待機
  # 頻繁なReadiness確認による高応答性確保
  periodSeconds: 8 # 8秒間隔でのReadiness状態監視
  # Readiness用短縮タイムアウト設定
  timeoutSeconds: 5 # トラフィック制御用の迅速な判定
  # Readiness失敗に対する柔軟な対応
  failureThreshold: 3 # 3回連続失敗でトラフィックルーティングから除外
  # Readiness復旧の迅速な判定
  successThreshold: 1 # 1回成功でトラフィック受入再開

# Startup Probe設定（初期起動プロセス専用、オプション）
startupProbe:
  httpGet:
    path: /nginx-health
    port: 9080 # 一貫したポート番号使用
    scheme: HTTP
  # 初期起動時の長時間待機許容
  initialDelaySeconds: 10 # 最小限の初期待機時間
  periodSeconds: 5 # 頻繁なスタートアップ確認
  timeoutSeconds: 3 # 起動確認用短時間タイムアウト
  # 起動プロセス用の寛容な失敗許容設定
  failureThreshold: 20 # 長時間の起動プロセスに対する配慮
  successThreshold: 1

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

volumes:
  - name: client-temp
    emptyDir: {}
  - name: nginx-logs
    emptyDir: {}

volumeMounts:
  - name: client-temp
    mountPath: /var/cache/nginx/client_temp
  - name: nginx-logs
    mountPath: /var/log/nginx

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity (disabled for single-node setup)
affinity: {}

# Environment variables
env: {}

# Secret references for environment variables
envFromSecret:
  name: ""

# ConfigMap configuration
configMap:
  create: true
  name: ""
  extraFiles: {}

# Secret configuration
secret:
  create: false
  name: ""
  data: {}
  stringData: {}

# SSL configuration
ssl:
  enabled: true # INCIDENT 80 FIX: cert-manager活用でSSL有効化復元
  secretName: nginx-ssl-certs

# Secrets configuration
secrets:
  enabled: true

# Deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Common labels
commonLabels: {} # INCIDENT 72 FIX: Helm template重複ラベル削除

# Common annotations
commonAnnotations: {}

# nginx specific configuration
nginx:
  # Worker settings
  workerConnections: 1024
  keepaliveTimeout: 65
  clientMaxBodySize: 50m

  # Logging
  logLevel: warn

  # Rate limiting
  rateLimitRpm: 300 # requests per minute for API endpoints
  rateLimitRps: 10 # requests per second for general endpoints

  gzip:
    enabled: true
    comp_level: 6
    min_length: 1100
    buffers: "16 8k"
    proxied: "any"
    vary: true
    disable: "MSIE [1-6]\\."
    types:
      - "text/plain"
      - "text/css"
      - "text/xml"
      - "text/javascript"
      - "application/json"
      - "application/javascript"
      - "application/xml+rss"
      - "application/atom+xml"
      - "image/svg+xml"
      - "application/x-font-ttf"
      - "font/opentype"

# Upstream configurations for Alt services
upstreams:
  - name: alt-backend
    servers:
      - "alt-backend.alt-apps.svc.cluster.local:9000" # INCIDENT 78 FIX: 正しいnamespace参照
    loadBalancing: "least_conn"
    keepalive: 32

  - name: alt-frontend
    servers:
      - "alt-frontend.alt-apps.svc.cluster.local:3000" # INCIDENT 78 FIX: 正しいnamespace参照
    loadBalancing: "least_conn" # フロントエンド用最適化
    keepalive: 16 # Next.js WebSocket対応のための適度なkeepalive
    keepaliveRequests: 100
    keepaliveTimeout: "60s"
    healthCheck:
      enabled: true
      path: "/"
      interval: "20s"
      timeout: "5s"
      falls: 2
      rises: 1

  - name: auth-service
    servers:
      - "auth-service.alt-auth.svc.cluster.local:8080" # INCIDENT 78 FIX: 正しいnamespace参照
    loadBalancing: "ip_hash" # APIセッション維持のためのIP ハッシュ
    keepalive: 32 # API接続の高効率化
    keepaliveRequests: 200
    keepaliveTimeout: "75s"
    healthCheck:
      enabled: true
      path: "/api/health" # バックエンドヘルスチェック用エンドポイント
      interval: "15s"
      timeout: "3s"
      falls: 2
      rises: 1

  - name: meilisearch
    servers:
      - "meilisearch.alt-search.svc.cluster.local:7700" # INCIDENT 78 FIX: 正しいnamespace参照
    loadBalancing: "least_conn"
    keepalive: 16

  # INCIDENT 78 FIX: tag-generator未デプロイのためコメントアウト
  # - name: tag-generator
  #   servers:
  #     - "tag-generator.tag-generator.svc.cluster.local:8000"
  #   loadBalancing: "least_conn"
  #   keepalive: 16

# Server configurations
servers:
  # Main HTTP server (redirect to HTTPS)
  - listen:
      - "443"
    serverName: "nginx.alt-ingress.svc.cluster.local"
    extraConfig: |
      # TLS環境用Content-Type統一管理
      proxy_hide_header "Content-Type";  # 重複ヘッダー除去

      # セキュリティヘッダー（暗号化環境最適化）
      add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;

      # Calico CNI環境用ログ設定
      access_log /var/log/nginx/access.log main;
      error_log /var/log/nginx/error.log info;

    locations:
      # Server-Sent Events専用エンドポイント（Docker Compose設定の完全移植）
      - path: "/api/v1/sse/"
        proxyPass: "https://backend/v1/sse/"
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto https" # TLS環境明示
        extraConfig: |
          # SSE用TLS最適化設定
          proxy_buffering off;
          proxy_cache off;
          proxy_http_version 1.1;
          proxy_set_header Connection '';

          # TLS環境用SSEタイムアウト
          proxy_connect_timeout 30s;
          proxy_send_timeout 300s;
          proxy_read_timeout 300s;

          # Content-Type統一管理
          proxy_hide_header "Content-Type";
          add_header Content-Type "text/event-stream; charset=utf-8" always;

      - path: "/api/"
        proxyPass: "https://backend/"
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto https"
        extraConfig: |
          # API用TLS最適化
          proxy_buffering on;
          proxy_buffer_size 4k;
          proxy_buffers 8 4k;

          # Content-Type統一管理
          proxy_hide_header "Content-Type";
          add_header Content-Type $upstream_http_content_type always;

          # TLS環境用CORS設定
          add_header Access-Control-Allow-Origin "$http_origin" always;
          add_header Access-Control-Allow-Credentials "true" always;

      - path: "/"
        proxyPass: "https://frontend"
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto https"
        extraConfig: |
          # フロントエンド用TLS最適化
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";

          # Content-Type統一管理
          proxy_hide_header "Content-Type";
          add_header Content-Type $upstream_http_content_type always;

      # 内部nginx用ヘルスチェックエンドポイント
      - path: "/nginx-health"
        extraConfig: |
          access_log off;
          return 200 "Internal nginx healthy\\n";
          add_header Content-Type text/plain;
          add_header X-Health-Check "internal-nginx" always;

      # 静的アセット最適化処理（Next.js等の静的ファイル対応）
      - path: "~ ^/(assets|static|_next|images|css|js)/"
        proxyPass: "https://frontend"
        extraConfig: |
          # 静的ファイル用積極的キャッシュ設定
          expires 1y;
          add_header Cache-Control "public, immutable";
          add_header X-Content-Type-Options "nosniff";

          # 静的ファイル用圧縮最適化
          gzip on;
          gzip_vary on;
          gzip_min_length 1024;
          gzip_types text/css application/javascript application/json image/svg+xml;

  # Health check server
  - listen:
      - "443 ssl"
    serverName: "alt.local"
    ssl:
      certificate: "/etc/nginx/ssl/tls.crt"
      certificateKey: "/etc/nginx/ssl/tls.key"
      protocols: "TLSv1.2 TLSv1.3"
    locations:
      # HTTPS接続の場合も内部はHTTP通信を維持
      - path: "/"
        proxyPass: "http://frontend"
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto https" # HTTPSであることを明示
        extraConfig: |
          # HTTPS終端後のHTTPプロキシ最適化
          proxy_buffering on;
          proxy_buffer_size 8k;
          proxy_buffers 16 8k;
          proxy_http_version 1.1;
          proxy_set_header Connection "";
    extraConfig: |
      # HTTPS専用セキュリティ強化
      add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

  # Main HTTPS server
  - listen:
      - "443 ssl"
    serverName: "alt.local *.alt.local"
    ssl:
      certificate: "/etc/nginx/ssl/tls.crt"
      certificateKey: "/etc/nginx/ssl/tls.key"
      protocols: "TLSv1.2 TLSv1.3"
      ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
    locations:
      # Frontend routes
      - path: "/"
        proxyPass: "http://alt-frontend"
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto $scheme"
          - "X-Forwarded-Host $host"
          - "X-Forwarded-Port $server_port"
        proxyTimeout: "30s"
        extraConfig: |
          proxy_buffer_size 4k;
          proxy_buffers 8 4k;
          proxy_busy_buffers_size 8k;

      # Backend API routes
      - path: "/api/"
        proxyPass: "http://alt-backend/"
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto $scheme"
          - "X-Forwarded-Host $host"
          - "X-Forwarded-Port $server_port"
        proxyTimeout: "60s"
        extraConfig: |
          limit_req zone=api burst=10 nodelay;
          proxy_buffer_size 4k;
          proxy_buffers 8 4k;
          proxy_busy_buffers_size 8k;

      # Backend v1 API routes
      - path: "/v1/"
        proxyPass: "http://alt-backend/v1/"
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto $scheme"
          - "X-Forwarded-Host $host"
          - "X-Forwarded-Port $server_port"
        proxyTimeout: "60s"
        extraConfig: |
          limit_req zone=api burst=10 nodelay;
          proxy_buffer_size 4k;
          proxy_buffers 8 4k;
          proxy_busy_buffers_size 8k;

      # Auth service routes
      - path: "/auth/"
        proxyPass: "http://auth-service/"
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto $scheme"
          - "X-Forwarded-Host $host"
          - "X-Forwarded-Port $server_port"
        proxyTimeout: "30s"
        extraConfig: |
          limit_req zone=api burst=20 nodelay;
          proxy_buffer_size 4k;
          proxy_buffers 8 4k;
          proxy_busy_buffers_size 8k;

      # MeiliSearch routes
      # - path: "/search/"
      #   proxyPass: "http://meilisearch/"
      #   proxySetHeader:
      #     - "Host $host"
      #     - "X-Real-IP $remote_addr"
      #     - "X-Forwarded-For $proxy_add_x_forwarded_for"
      #     - "X-Forwarded-Proto $scheme"
      #     - "X-Forwarded-Host $host"
      #     - "X-Forwarded-Port $server_port"
      #   proxyTimeout: "30s"
      #   extraConfig: |
      #     limit_req zone=api burst=15 nodelay;
      #     proxy_buffer_size 4k;
      #     proxy_buffers 8 4k;
      #     proxy_busy_buffers_size 8k;

      # INCIDENT 78 FIX: tag-generator未デプロイのためコメントアウト
      # Tag generator routes
      # - path: "/tags/"
      #   proxyPass: "http://tag-generator/"
      #   proxySetHeader:
      #     - "Host $host"
      #     - "X-Real-IP $remote_addr"
      #     - "X-Forwarded-For $proxy_add_x_forwarded_for"
      #     - "X-Forwarded-Proto $scheme"
      #     - "X-Forwarded-Host $host"
      #     - "X-Forwarded-Port $server_port"
      #   proxyTimeout: "120s"
      #   extraConfig: |
      #     limit_req zone=api burst=5 nodelay;
      #     proxy_buffer_size 4k;
      #     proxy_buffers 8 4k;
      #     proxy_busy_buffers_size 8k;

      # Health check endpoint
      - path: "/health"
        extraConfig: |
          access_log off;
          return 200 "OK";
          add_header Content-Type text/plain;
    extraConfig: |
      # Enable HSTS
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

      # Additional security headers
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;

# Monitoring configuration
monitoring:
  enabled: true
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9080"
    prometheus.io/path: "/nginx-status"
