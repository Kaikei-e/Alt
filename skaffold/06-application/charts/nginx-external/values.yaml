# Default values for nginx-external
# nginx external ingress/reverse proxy configuration

# Replica configuration
replicaCount: 2

# Image configuration
image:
  repository: nginx
  pullPolicy: IfNotPresent # OSS公式イメージは外部pull必要
  tag: "1.25.3-alpine"

# Image pull secrets
imagePullSecrets: []

# Service account
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Pod annotations and labels
podAnnotations:
  rask.group: "nginx-external"

podLabels:
  io.kompose.service: "nginx-external"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 101 # nginx 非 root ユーザー
  fsGroup: 101 # ボリュームアクセス用
  sysctls:
    - name: net.ipv4.ip_unprivileged_port_start
      value: "0" # 非 root でも低番号ポートを解放

# コンテナ個別のセキュリティ設定
securityContext:
  runAsNonRoot: true
  runAsUser: 101
  capabilities:
    add: ["NET_BIND_SERVICE"] # 80/443 バインド権限
    drop: ["ALL"]

# Service configuration - ClusterIP (Security First: 外界露出完全回避)
service:
  type: ClusterIP
  port: 80
  httpsPort: null  # Disabled - Cloudflare handles SSL termination
  healthPort: 8080
  # nodePort: 30443  # セキュリティ強化：外界露出回避のため削除
  annotations:
    nginx.ingress.kubernetes.io/service-upstream: "true"  # Linkerd Service Mesh最適化
    config.linkerd.io/opaque-ports: "8888,8889"  # 恒久修正: Forward Proxy & RSS Egress Gateway ポート

# Cloudflare tunnel本番環境設定
cloudflare-tunnel:
  enabled: true  # Production環境では常に有効 - 恒久修正

  # 開発環境用軽量設定
  replicaCount: 1

  # Image pull最適化
  image:
    repository: cloudflare/cloudflared
    tag: "2025.7.0"  # 正解: 実在する最新版（2025年7月3日ビルド）
    pullPolicy: IfNotPresent  # ローカルcache利用

  # 軽量リソース設定
  resources:
    limits:
      cpu: 100m      # 軽量化
      memory: 128Mi  # 軽量化
    requests:
      cpu: 50m
      memory: 64Mi

  # 開発環境では不要機能無効化
  dynamicIpUpdate:
    enabled: false

  # ヘルスチェック最適化（高速起動）
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10  # 高速化
    periodSeconds: 30
    timeoutSeconds: 5

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5   # 高速化
    periodSeconds: 10
    timeoutSeconds: 3
  healthPort: 8080
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
  clusterIP: ""
  sessionAffinity: "ClientIP"

# DNS configuration (2025年ベストプラクティス)
dns:
  # CoreDNS service IP - 環境に応じて調整可能
  # kubectl get svc -n kube-system kube-dns で確認
  coredsIP: "10.96.0.10"

  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
  extraPorts: []

# Ingress configuration (typically disabled for external-facing nginx)
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts: []
  tls: []

# Resources configuration
resources:
  limits:
    cpu: "2"
    memory: "1Gi"
  requests:
    cpu: "500m"
    memory: "256Mi"

# Liveness probe
livenessProbe:
  httpGet:
    path: /nginx-health
    port: 8080
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5

# Readiness probe
readinessProbe:
  httpGet:
    path: /nginx-health
    port: 8080
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 4
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Additional volumes
volumes: []

# Additional volume mounts
volumeMounts: []

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity (disabled for single-node setup)
affinity: {}

# Environment variables
env: {}

# Secret references for environment variables
envFromSecret:
  name: ""

# ConfigMap configuration
configMap:
  create: true
  name: ""
  extraFiles: {}

# Secret configuration
secret:
  create: false
  name: ""
  data: {}
  stringData: {}

# SSL configuration - linkerd mTLS使用のため外部SSL無効化
ssl:
  enabled: false
  secretName: nginx-external-ssl-certs-prod

# Secrets configuration
secrets:
  enabled: false

# Deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# INCIDENT 79 FIX: Helm template重複ラベル削除 - commonLabelsとtemplate競合回避
commonLabels: {}

# Common annotations
commonAnnotations: {}

# nginx specific configuration for external traffic
nginx:
  # Worker settings for external load
  workerConnections: 2048
  keepaliveTimeout: 65

  # Logging
  logLevel: warn

  # Client settings for external traffic
  clientMaxBodySize: 20m

  # 恒久修正: Web研究結果に基づく504エラー対策タイムアウト設定 (2025年ベストプラクティス)
  timeouts:
    proxyConnect: "60s"    # Web研究推奨: upstream connection establishment timeout
    proxySend: "60s"       # Web研究推奨: request sending timeout 
    proxyRead: "60s"       # Web研究推奨: response reading timeout
    clientHeaderTimeout: "15s"
    clientBodyTimeout: "30s"
    sendTimeout: "60s"     # Web研究推奨: response sending timeout

  # Rate limiting for external traffic (optimized for RSS feed registration)
  rateLimitRpm: 1200 # requests per minute for API endpoints (doubled from 600)
  rateLimitRps: 40 # requests per second for general endpoints (doubled from 20)
  rateLimitConnections: 100 # concurrent connections per IP (doubled from 50)

  # DDoS protection settings
  ddosProtection:
    enabled: true
    requestsPerSecond: 20
    burstSize: 100
    connectionLimit: 50

  # GeoIP blocking (if enabled)
  geoBlocking:
    enabled: false
    allowedCountries: ["US", "CA", "GB", "DE", "FR", "JP"]
    blockedCountries: []

  # Cloudflare Tunnel接続の最適化設定
  sessionAffinity: "ClientIP" # セッション維持の最適化
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600 # 長時間セッションの維持
  externalTrafficPolicy: Local

# Upstream configurations for internal nginx or services
upstreams:
  # Route to internal nginx (recommended approach) - INCIDENT 85+86 FIX: 正しいnamespace参照+upstream名統一
  # mTLS完全移行: nginx-external → nginx-internal HTTP接続（Linkerd透明mTLS）
  - name: nginx
    servers:
      - "nginx.alt-ingress.svc.cluster.local:80"  # HTTP to nginx service port 80→8080（Linkerd透明mTLS）
    loadBalancing: "least_conn"
    keepalive: 32
    healthCheck:
      enabled: true
      path: "/nginx-health"
      interval: "30s"
      timeout: "10s"
    # SSL設定削除 - Linkerd mTLS自動適用
    # proxySslCertificate: "/etc/nginx/ssl/tls.crt"
    # proxySslCertificateKey: "/etc/nginx/ssl/tls.key"

  # Alternative: Direct routing to services (if needed) - INCIDENT 85 FIX: 正しいnamespace参照
  - name: alt-frontend-direct
    servers:
      - "alt-frontend.alt-apps.svc.cluster.local:3000"
    keepalive: 16
    healthCheck:
      enabled: true
      path: "/"
      interval: "20s"
      timeout: "5s"

  - name: alt-backend-direct
    servers:
      - "alt-backend.alt-apps.svc.cluster.local:9000"
    keepalive: 16
    healthCheck:
      enabled: true
      path: "/"
      interval: "20s"
      timeout: "5s"

# Server configurations for external traffic
servers:
  # Main HTTP server - linkerd mTLS使用、外部SSL証明書不要
  - listen:
      - "80"
    serverName: "curionoah.com"
    locations:
      # PERFORMANCE OPTIMIZATION: Prioritized prefix for Next.js static assets - mTLS完全移行
      - path: "^~ /_next/static/"
        proxyPass: "http://nginx"  # HTTPS→HTTP変更（Linkerd透明mTLS）
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto $scheme"
          - "X-Forwarded-Host $host"
          - "X-Forwarded-Port $server_port"
          - "X-Request-ID $request_id"
        proxyTimeout: "120s"  # ULTRATHINK: DB初期化・Protocol Detection対応
        extraConfig: |
          # Static asset optimization - NO REGEX overhead
          expires 1y;
          add_header Cache-Control "public, immutable";
          add_header X-Cache-Status "nginx-external-prefix";

          # Proxy settings optimized for static content
          proxy_buffer_size 8k;
          proxy_buffers 16 8k;
          proxy_busy_buffers_size 16k;
          proxy_buffering on;

          # HTTP upstream設定（Linkerd mTLS自動適用）
          proxy_http_version 1.1;
          proxy_set_header Connection "";

      # Main application routes - REPORT.md汎用原則: フロントエンド直接接続
      - path: "/"
        proxyPass: "http://alt-frontend-direct"  # 汎用: フロントエンド直接接続
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto $scheme"
          - "X-Forwarded-Host $host"
          - "X-Forwarded-Port $server_port"
          - "X-Request-ID $request_id"
        proxyTimeout: "30s"  # REPORT.md汎用推奨: フロントエンド用タイムアウト
        extraConfig: |
          # REPORT.md汎用推奨: 基本プロキシ設定
          proxy_http_version 1.1;
          proxy_set_header Connection "";
          proxy_buffering on;
          proxy_pass_header Cache-Control;
          
          # 汎用エラーハンドリング
          proxy_intercept_errors off;
          proxy_next_upstream error timeout http_502 http_503 http_504;
          proxy_next_upstream_tries 3;
          proxy_next_upstream_timeout 45s;


      # API routes with stricter rate limiting - REPORT.md根本修正: alt-backend直接接続 + パス変換
      - path: "/api/"
        proxyPass: "http://alt-backend-direct"  # 直接alt-backendへ転送
        proxySetHeader:
          - "Host $host"
          - "X-Real-IP $remote_addr"
          - "X-Forwarded-For $proxy_add_x_forwarded_for"
          - "X-Forwarded-Proto $scheme"
          - "X-Forwarded-Host $host"
          - "X-Forwarded-Port $server_port"
          - "X-Request-ID $request_id"
        proxyTimeout: "60s"  # REPORT.md推奨: API用タイムアウト
        extraConfig: |
          # REPORT.md根本修正: /api/v1/* → /v1/* パス変換
          rewrite ^/api/(.*)$ /$1 break;
          
          # Stricter rate limiting for API  
          limit_req zone=api burst=20 nodelay;
          limit_conn addr 20;

          # REPORT.md推奨: 最適化されたproxy設定
          proxy_connect_timeout 3s;
          proxy_send_timeout    30s; 
          proxy_read_timeout    60s;
          proxy_buffering       on;
          proxy_busy_buffers_size 64k;
          proxy_buffers 16 64k;
          proxy_buffer_size 8k;

      # Health check endpoint (external)
      - path: "/external-health"
        extraConfig: |
          access_log off;
          return 200 "External nginx OK";
          add_header Content-Type text/plain;
          add_header X-Health-Check "external" always;

      # Block common attack paths
      - path: "~ /\\."
        extraConfig: |
          deny all;
          access_log off;
          log_not_found off;

      - path: "~ /(wp-admin|wp-login|admin|phpmyadmin)"
        extraConfig: |
          deny all;
          access_log off;
          log_not_found off;
    extraConfig: |
      # Enhanced security headers for external traffic
      add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'self';" always;

      # Request ID for tracing
      add_header X-Request-ID $request_id always;

      # Hide nginx version
      server_tokens off;

      # Real IP configuration for external load balancers
      real_ip_header X-Forwarded-For;
      real_ip_recursive on;
      set_real_ip_from 10.0.0.0/8;
      set_real_ip_from 172.16.0.0/12;
      set_real_ip_from 192.168.0.0/16;

  # Health check server
  - listen:
      - "8080"
    serverName: "health.check"
    locations:
      - path: "/nginx-health"
        extraConfig: |
          access_log off;
          return 200 "External nginx health OK";
          add_header Content-Type text/plain;

# Monitoring configuration
monitoring:
  enabled: true
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/nginx-status"

# Network policy for external access - セキュリティファースト: Cloudflare Tunnel専用
networkPolicy:
  enabled: false  # 01-foundation/network-policies/cloudflare-tunnel-access-policyで制御

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  maxUnavailable: ""

# Cloudflare Tunnel設定（subchartに渡される）
# 本番環境設定は values-production.yaml で管理
