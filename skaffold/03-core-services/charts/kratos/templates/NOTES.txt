1. Get the Kratos public API URL by running these commands:
{{- if contains "NodePort" .Values.services.public.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Values.namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "kratos.fullname" . }}-public)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Values.namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.services.public.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Values.namespace }} svc -w {{ include "kratos.fullname" . }}-public'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Values.namespace }} {{ include "kratos.fullname" . }}-public --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.services.public.port }}
{{- else if contains "ClusterIP" .Values.services.public.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Values.namespace }} -l "{{ include "kratos.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Values.namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your Kratos public API"
  kubectl --namespace {{ .Values.namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Get the Kratos admin API URL by running these commands:
{{- if contains "NodePort" .Values.services.admin.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Values.namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "kratos.fullname" . }}-admin)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Values.namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.services.admin.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Values.namespace }} svc -w {{ include "kratos.fullname" . }}-admin'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Values.namespace }} {{ include "kratos.fullname" . }}-admin --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.services.admin.port }}
{{- else if contains "ClusterIP" .Values.services.admin.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Values.namespace }} -l "{{ include "kratos.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:8081 to use your Kratos admin API"
  kubectl --namespace {{ .Values.namespace }} port-forward $POD_NAME 8081:4434
{{- end }}

3. Check the status of your Kratos deployment:
  kubectl get pods -l "{{ include "kratos.selectorLabels" . }}" -n {{ .Values.namespace }}

4. View Kratos logs:
  kubectl logs -l "{{ include "kratos.selectorLabels" . }}" -n {{ .Values.namespace }}

5. Health check endpoints:
  - Liveness: /health/alive
  - Readiness: /health/ready

{{- if .Values.kratos.dev }}
‚ö†Ô∏è  WARNING: Kratos is running in development mode. Do not use this in production!
{{- end }}

{{- if not .Values.ssl.enabled }}
‚ö†Ô∏è  WARNING: SSL/TLS is disabled. Enable SSL for production deployments.
{{- end }}

{{- if .Values.secrets.enabled }}
‚ö†Ô∏è  WARNING: Using default secrets. Generate secure secrets for production deployments.
{{- end }}

üìñ For more information about Kratos configuration, visit:
   https://www.ory.sh/kratos/docs/