{{- /*
  File: templates/migrate-job.yaml
  Purpose: Run DB migrations exactly once per install/upgrade
*/ -}}
apiVersion: batch/v1
kind: Job
metadata:
  # タイムスタンプ付きで毎回固有の名前を生成し、selector 衝突を根絶
  name: {{ include "migrate.fullname" . }}-{{ now | date "20060102150405" }} # Go 2006-01-02 15:04:05 フォーマット
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "migrate.labels" . | nindent 4 }}
  annotations:
    # --- Helm Hooks ---
    "helm.sh/hook": pre-install,pre-upgrade          # インストール前 & アップグレード前に実行
    "helm.sh/hook-delete-policy": hook-succeeded     # 成功時に自動削除（失敗時は残す）
    "helm.sh/hook-weight": "10"                      # データベースが完全に準備完了後に実行
    {{- /* 共通アノテーションもマージ */}}
    {{- with .Values.commonAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  # Job が終わったら 5 分後に自動で掃除してクラスタを汚さない
  ttlSecondsAfterFinished: {{ .Values.ttlSecondsAfterFinished | default 300 }}
  completions: {{ .Values.completions | default 1 }}
  parallelism: {{ .Values.parallelism | default 1 }}
  backoffLimit: {{ .Values.backoffLimit | default 3 }}
  activeDeadlineSeconds: {{ .Values.activeDeadlineSeconds | default 3600 }}
  # Selector is auto-generated by Kubernetes - do not specify manually
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        # Pod labels for Kubernetes Job auto-selector
        {{- include "migrate.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      restartPolicy: {{ .Values.restartPolicy | default "Never" }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "migrate.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-migrate
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Starting database migration with dependency checks..."

              # Skip connectivity checks - rely on Kubernetes service dependencies
              echo "Starting migration process..."
              echo "Note: Assuming PostgreSQL is available via Kubernetes service mesh"

              # Set up DB_URL for migrate tool using Service name (networking now resolved)
              export DB_URL="postgres://alt_db_user:${POSTGRES_PASSWORD}@${DB_HOST}:${DB_PORT}/alt?sslmode=${DB_SSL_MODE}&connect_timeout=60&statement_timeout=300000&idle_in_transaction_session_timeout=300000"
              echo "Database URL configured (host masked for security)"

              # Run migrations using entrypoint
              echo "Starting database migrations..."
              exec /usr/local/bin/entrypoint.sh
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          # 推奨: Secret で一括取り込み（個別 env がある場合は追加で記載）
          {{- if .Values.envFromSecret }}
          envFrom:
            - secretRef:
                name: {{ .Values.envFromSecret.name }}
          {{- end }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            # PostgreSQL password from Secret
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.configMap.create }}
            - name: config
              mountPath: /app/config
            {{- end }}
            # Mount migration files from ConfigMap
            - name: migrations
              mountPath: /migrations
              readOnly: true
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        {{- if .Values.configMap.create }}
        - name: config
          configMap:
            name: {{ .Values.configMap.name }}
        {{- end }}
        # Migration files volume from ConfigMap
        - name: migrations
          configMap:
            name: {{ include "migrate.fullname" . }}-migrations
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
