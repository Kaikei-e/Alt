# Default values for alt-backend
# Alt Backend API service configuration

# Replica configuration
replicaCount: 1

# Image configuration
image:
  repository: kaikei/alt-backend  # INCIDENT 65 FIX: サービス専用repository
  pullPolicy: IfNotPresent  # INCIDENT 82 FIX: Skaffold動的tag対応
  # INCIDENT 82 FIX: 固定tag削除 - Skaffold setValueTemplatesで動的tag注入
  # tag: "alt-backend-latest"

# Image pull secrets
imagePullSecrets: []

# Service account
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Pod annotations and labels - ULTRATHINK Phase 1.1 opaque-ports統一実装
podAnnotations:
  kompose.cmd: "kompose convert -f compose.yaml --out ./k8s-manifests/"
  kompose.version: "1.36.0 (ae2a39403)"
  rask.group: "alt-backend"
  linkerd.io/inject: enabled
  # ULTRATHINK Strategy: PostgreSQL mTLS維持 + Protocol Detection無効化
  config.linkerd.io/opaque-ports: "5432,8080"
  config.linkerd.io/proxy-protocol-detection-timeout: "0s"
  # SKIP設定コメントアウト - production.yamlで上書き

podLabels:
  io.kompose.service: "alt-backend"

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

# Container security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false  # Alt-backend needs to write logs
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

# Service configuration
service:
  type: ClusterIP
  port: 9000
  targetPort: 9000
  protocol: TCP
  ports:
    metrics:
      name: metrics
      port: 9001
      targetPort: 9001
      protocol: TCP
  annotations:
    # Linkerd opaque-ports for Envoy proxy communication
    config.linkerd.io/opaque-ports: "8080"

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: alt-backend.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Resources configuration
resources:
  limits:
    cpu: "4"
    memory: "2Gi"
  requests:
    cpu: "2"
    memory: "1Gi"

# linkerd-await代替: 延長されたプローブ設定でLinkerdプロキシ準備待ち
livenessProbe:
  httpGet:
    path: /v1/health
    port: 9000
  initialDelaySeconds: 120  # 延長: Linkerd + DB準備待ち
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 5  # 許容度向上

readinessProbe:
  httpGet:
    path: /v1/health
    port: 9000
  initialDelaySeconds: 90  # 延長: 初期接続安定化待ち
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 5  # 許容度向上

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# SSL volumes削除
volumes: []

# SSL volumeMounts削除
volumeMounts: []

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# linkerd-await代替: プローブ初期遅延を延長してLinkerdプロキシ準備待ち

# Environment variables - Linkerd mTLS only
env:
  # データベース設定
  DB_HOST: "postgres.alt-database.svc.cluster.local"
  DB_PORT: "5432"
  DB_NAME: "alt"
  DB_USER: "alt_db_user"

  # 接続プール最適化
  DB_MAX_CONNS: "20"
  DB_MIN_CONNS: "5"
  DB_MAX_CONN_LIFE: "30m"

  # Proxy設定 - 根本解決: Skaffold統合制御対応
  # Phase 7a: Envoy Proxy統合（デフォルト無効、Skaffold setValuesで制御）
  ENVOY_PROXY_ENABLED: "false"
  ENVOY_PROXY_URL: "http://envoy-proxy.alt-apps.svc.cluster.local:8080"

  # Sidecar proxy設定（デフォルト無効、Skaffold setValuesで制御）
  SIDECAR_PROXY_ENABLED: "false"
  SIDECAR_PROXY_URL: "http://alt-backend-proxy.alt-apps.svc.cluster.local:8085"

  # nginx-external proxy（フォールバック用として無効化）
  NGINX_PROXY_ENABLED: "false"
  PROXY_ENABLED: "false"

  # RSS Egress Gateway設定 (ULTRATHINK ROOT FIX - フォールバック用)
  EGRESS_GATEWAY_URL: "http://nginx-external.alt-ingress.svc.cluster.local:8889"

  # 根本解決: 統一HTTPクライアントファクトリ戦略設定（デフォルト値）
  PROXY_STRATEGY: "DIRECT"
  ENVOY_PROXY_BASE_URL: "http://envoy-proxy.alt-apps.svc.cluster.local:8080"

  # アプリケーション設定
  LOG_LEVEL: "info"
  PORT: "9000"

  # mTLS完全移行: PostgreSQL SSL無効化（開発環境基本設定）
  DB_SSL_MODE: "disable"
  DB_SSLMODE: "disable"

  # ULTRATHINK Phase 1.5: 最適化されたDB接続設定
  DB_CONNECT_TIMEOUT: "90s"  # Protocol Detection対応
  DB_READ_TIMEOUT: "45s"
  DB_WRITE_TIMEOUT: "45s"
  DB_MAX_RETRIES: "15"   # さらに増加
  DB_RETRY_DELAY: "3s"   # 短縮して高速リトライ
  DB_POOL_HEALTH_CHECK: "2m"  # 接続プール健全性

# Secret references for environment variables
envFromSecret:
  name: backend-secrets
  keys:
    - DB_PASSWORD
    - POSTGRES_PASSWORD
    - DB_APP_PASSWORD
    - HF_TOKEN
    - MEILI_MASTER_KEY
    - MEILISEARCH_API_KEY
    - PRE_PROCESSOR_DB_PASSWORD
    - DB_TAG_GENERATOR_PASSWORD
    - SEARCH_INDEXER_DB_PASSWORD
    - CLICKHOUSE_PASSWORD
    - APP_CLICKHOUSE_PASSWORD

# ConfigMap configuration
configMap:
  create: true
  name: alt-backend-config
  data:
    .env: |
      # Alt Backend Configuration
      PORT=9000
      LOG_LEVEL=info
      DB_MAX_CONNECTIONS=25
      DB_MAX_IDLE_CONNECTIONS=5
      DB_CONNECTION_MAX_LIFETIME=5m
      CORS_ALLOWED_ORIGINS=*
      RATE_LIMIT_REQUESTS_PER_SECOND=100
      RATE_LIMIT_BURST=200

# SSL configuration削除 - Linkerd mTLS only

# Secrets configuration
secrets:
  enabled: true
  name: "backend-secrets"
  data:
    DB_PASSWORD: "postgres_secure_password"
    POSTGRES_PASSWORD: "postgres_secure_password"
    DB_APP_PASSWORD: "app_user_secure_password"
    HF_TOKEN: "hf_secure_token_placeholder"
    MEILI_MASTER_KEY: "meili_secure_master_key"
    MEILISEARCH_API_KEY: "meili_secure_api_key"
    PRE_PROCESSOR_DB_PASSWORD: "preprocessor_secure_password"
    DB_TAG_GENERATOR_PASSWORD: "tag_generator_secure_password"
    SEARCH_INDEXER_DB_PASSWORD: "search_indexer_secure_password"
    CLICKHOUSE_PASSWORD: "clickhouse_secure_password"
    APP_CLICKHOUSE_PASSWORD: "app_clickhouse_secure_password"

# Deployment strategy
strategy:
  type: Recreate

# Common labels - avoid duplicating labels already in _helpers.tpl
commonLabels: {}

# Common annotations
commonAnnotations: {}

# Monitoring configuration
monitoring:
  enabled: false  # Disabled until Prometheus operator is installed
  metricsPath: "/metrics"
  scrapeInterval: 30s
  scrapeTimeout: 10s

  # Prometheus annotations
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9001"
    prometheus.io/path: "/metrics"