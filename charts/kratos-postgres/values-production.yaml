# Production environment values for kratos-postgres (HA configuration)

# Production-specific image settings
image:
  repository: postgres
  tag: "16-alpine"
  pullPolicy: IfNotPresent

# Production HA configuration
# CloudNativePG cluster configuration optimized for Kratos
cluster:
  enabled: true
  instances: 2  # Smaller HA setup for identity service
  
  postgresql:
    parameters:
      # Kratos-specific production settings
      max_connections: "100"
      shared_preload_libraries: "pg_stat_statements"
      pg_stat_statements.max: "5000"
      pg_stat_statements.track: "all"
      log_statement: "mod"  # Log only modifications for security
      log_min_duration_statement: "500"  # Lower threshold for identity queries
      # Identity-specific optimizations
      synchronous_commit: "on"
      random_page_cost: "1.0"
      effective_io_concurrency: "100"
      
  bootstrap:
    initdb:
      database: "kratos_db"
      owner: "kratos_db_user"
      secret:
        name: "kratos-postgres-credentials"
        
  storage:
    size: "5Gi"  # Smaller storage for identity database
    storageClass: "local-storage"
    
  monitoring:
    enabled: true
    
  backup:
    retentionPolicy: "30d"
    barmanObjectStore:
      destinationPath: "s3://alt-backup/kratos-postgres"
      s3Credentials:
        accessKeyId:
          name: "backup-credentials"
          key: "ACCESS_KEY_ID"
        secretAccessKey:
          name: "backup-credentials"
          key: "SECRET_ACCESS_KEY"
        region:
          name: "backup-credentials"
          key: "REGION"

# Production namespace
namespace: alt-database

# Dependency overrides - ensure dependencies use correct namespace
common-secrets:
  namespace:
    name: "alt-database"
  # Only enable kratos-specific secrets to avoid conflicts
  database:
    postgres:
      enabled: false
    authPostgres:
      enabled: false
    kratosPostgres:
      enabled: false
    clickhouse:
      enabled: false
  apiKeys:
    huggingFace:
      enabled: false
    meilisearch:
      enabled: false
  services:
    backend:
      enabled: false
    preProcessor:
      enabled: false
    tagGenerator:
      enabled: false
    searchIndexer:
      enabled: false
    authService:
      enabled: false
common-ssl:
  namespace:
    name: "alt-database"

# Production resource requirements (smaller for identity service)
resources:
  limits:
    cpu: "1"
    memory: "2Gi"
  requests:
    cpu: "500m"
    memory: "1Gi"

# Authentication configuration (use existing secret from postgres release)
auth:
  username: "kratos_db_user"
  database: "kratos_db"
  existingSecret: "kratos-postgres-secrets"

# SSL configuration (disabled for initial deployment)
ssl:
  enabled: false
  secretName: kratos-postgres-ssl-certs

# Environment variables
env:
  POSTGRES_DB: "kratos_db"
  POSTGRES_USER: "kratos_db_user"
  DB_HOST: "kratos-postgres-cluster-rw.alt-database.svc.cluster.local"
  DB_PORT: "5432"
  DB_SSL_MODE: "require"

# High availability specific settings (smaller setup)
ha:
  enabled: true
  readReplicas: 1  # One read replica for identity service

# Persistent volume configuration
persistence:
  enabled: true
  size: "5Gi"  # Smaller storage for identity data
  storageClass: "local-storage"
  accessMode: "ReadWriteOnce"

# PostgreSQL configuration for production identity workloads
postgres:
  maxConnections: 100
  sharedBuffers: "256MB"
  effectiveCacheSize: "1GB"
  workMem: "4MB"
  maintenanceWorkMem: "64MB"
  walKeepSize: "1GB"
  loggingCollector: "on"
  logStatement: "mod"
  logMinDurationStatement: 500  # Lower threshold for identity queries
  randomPageCost: 1.0
  effectiveIoConcurrency: 100
  
  autovacuum:
    maxWorkers: 2
    naptime: "30s"  # More frequent for session management
  
  customConfig: |
    # Production Kratos-specific optimizations
    synchronous_commit = on
    seq_page_cost = 1.0
    # Connection pooling optimization
    shared_preload_libraries = 'pg_stat_statements'
    pg_stat_statements.max = 5000
    pg_stat_statements.track = all

# Backup configuration
backup:
  enabled: true
  schedule: "0 3 * * *"  # Different time from main postgres
  retention: "30d"
  storage:
    type: "s3"
    bucket: "alt-backup"
    path: "kratos-postgres"

# Security context
securityContext:
  runAsUser: 999
  runAsGroup: 999
  fsGroup: 999

# Production-specific tolerations
tolerations:
  - key: "auth-database"
    operator: "Equal"
    value: "kratos-postgres"
    effect: "NoSchedule"

# Production-specific affinity
affinity:
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
            - key: "node-type"
              operator: "In"
              values: ["auth-database"]
  # Anti-affinity to ensure HA instances are on different nodes
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: kratos-postgres
          topologyKey: kubernetes.io/hostname