# Alt-Frontend 高度最適化版 Docker
# 50-70%サイズ削減、高度セキュリティ、最高パフォーマンス

# ================================================
# Stage 1: Base with optimizations
# ================================================
FROM node:lts-alpine AS base

# セキュリティ: 不要パッケージ削除、最新アップデート
RUN apk add --no-cache \
    dumb-init \
    wget \
    && apk upgrade \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# 非rootユーザー作成 (セキュリティ)
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# pnpm最適化インストール
RUN npm install -g pnpm@latest && npm cache clean --force

# ================================================
# Stage 2: Dependencies installer
# ================================================
FROM base AS deps

WORKDIR /app

# 依存関係ファイルコピー
COPY app/package.json app/pnpm-lock.yaml ./

# Production依存関係のみ (最適化)
RUN pnpm install --frozen-lockfile --prod \
    && pnpm store prune \
    && rm -rf /root/.pnpm \
    && rm -rf /tmp/*

# ================================================
# Stage 3: Build dependencies
# ================================================  
FROM base AS build-deps

WORKDIR /app

# 依存関係ファイルコピー
COPY app/package.json app/pnpm-lock.yaml ./

# 全依存関係インストール (ビルド用)
RUN pnpm install --frozen-lockfile \
    && pnpm store prune

# ================================================
# Stage 4: Builder
# ================================================
FROM build-deps AS builder

# ソースコードコピー
COPY app/ .

# 環境変数設定 (ビルド最適化)
ARG API_URL
ARG NEXT_PUBLIC_API_BASE_URL
ENV API_URL=${API_URL:-http://alt-backend:9000}
ENV NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-/api}
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Next.js最適化ビルド
RUN pnpm run build

# ビルド後クリーンアップ
RUN rm -rf node_modules \
    && rm -rf .next/cache \
    && rm -rf src \
    && rm -rf __tests__ \
    && rm -rf *.test.* \
    && rm -rf *.spec.* \
    && rm -rf coverage \
    && rm -rf .eslintrc* \
    && rm -rf .prettier* \
    && rm -rf vitest* \
    && rm -rf playwright*

# Production依存関係のみ再インストール
RUN pnpm install --frozen-lockfile --prod \
    && pnpm store prune \
    && rm -rf /root/.pnpm

# ================================================
# Stage 5: Runtime (Distroless考慮)
# ================================================
FROM gcr.io/distroless/nodejs20-debian12:latest AS runtime-distroless

WORKDIR /app

# 非rootユーザー設定
USER 1001:1001

# 必要ファイルのみコピー
COPY --from=builder --chown=1001:1001 /app/.next ./.next
COPY --from=builder --chown=1001:1001 /app/public ./public
COPY --from=builder --chown=1001:1001 /app/package.json ./package.json
COPY --from=builder --chown=1001:1001 /app/next.config.ts ./next.config.ts
COPY --from=builder --chown=1001:1001 /app/node_modules ./node_modules

# 環境変数設定
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

EXPOSE 3000

# Distroless実行
CMD ["node_modules/.bin/next", "start"]

# ================================================
# Stage 6: Runtime (Alpine - デフォルト)
# ================================================
FROM base AS runtime

WORKDIR /app

# 環境変数設定
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# 必要ファイルのみコピー
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /app/next.config.ts ./next.config.ts
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules

# セキュリティ: 非rootユーザー
USER nextjs

EXPOSE 3000

# ヘルスチェック (最適化)
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD wget --quiet --tries=1 --spider --timeout=3 http://localhost:3000/ || exit 1

# 最適化された起動
ENTRYPOINT ["dumb-init", "--"]
CMD ["pnpm", "start"]

# ================================================
# Final stage selection
# ================================================
# デフォルト: Alpine runtime
FROM runtime AS final