# syntax=docker/dockerfile:1.6

##### 1) deps stage ─ npm/pnpm DL をキャッシュ #####
FROM node:20-alpine AS deps
WORKDIR /app

# pnpm を corepack で有効化（公式推奨）
RUN corepack enable && corepack prepare pnpm@latest --activate \
  && apk add --no-cache libc6-compat      # glibc 依存モジュール回避

COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

##### 2) build stage ─ アプリをビルド #####
FROM node:20-alpine AS build
WORKDIR /app

# pnpm を corepack で有効化（build stage でも必要）
RUN corepack enable && corepack prepare pnpm@latest --activate

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# ビルド引数・環境変数（必要なら --build-arg で上書き）
ARG API_URL=http://alt-backend:9000
ARG NEXT_PUBLIC_API_BASE_URL=/api
ARG GIT_SHA
ARG BUILD_ID
ENV API_URL=$API_URL \
  NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL \
  GIT_SHA=${GIT_SHA} \
  BUILD_ID=${BUILD_ID}

RUN pnpm run build

##### 3) runtime stage ─ 最小実行環境 #####
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production \
  PORT=3000 \
  HOSTNAME=0.0.0.0 \
  NEXT_TELEMETRY_DISABLED=1

# 必要最小ファイルをコピー（standalone 方式）
COPY --from=build --chown=1001:1001 /app/.next/standalone ./
COPY --from=build --chown=1001:1001 /app/.next/static ./.next/static
COPY --from=build --chown=1001:1001 /app/public ./public

# 非-root ユーザ
RUN addgroup -g 1001 -S nextjs \
  && adduser  -u 1001 -S -G nextjs nextjs
USER nextjs

EXPOSE 3000

# /api/health が JSON {"status":"ok"} を返す想定（REPORT.md修正対応）
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s \
  CMD wget -qO- http://localhost:${PORT}/api/health \
  | grep -q '"status":"ok"' || exit 1

# Next.js standalone エントリ
CMD ["node", "server.js"]
