// Code generated by MockGen. DO NOT EDIT.
// Source: service/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=service/interfaces.go -destination=test/mocks/service_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "pre-processor/models"
	service "pre-processor/service"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeedProcessorService is a mock of FeedProcessorService interface.
type MockFeedProcessorService struct {
	ctrl     *gomock.Controller
	recorder *MockFeedProcessorServiceMockRecorder
	isgomock struct{}
}

// MockFeedProcessorServiceMockRecorder is the mock recorder for MockFeedProcessorService.
type MockFeedProcessorServiceMockRecorder struct {
	mock *MockFeedProcessorService
}

// NewMockFeedProcessorService creates a new mock instance.
func NewMockFeedProcessorService(ctrl *gomock.Controller) *MockFeedProcessorService {
	mock := &MockFeedProcessorService{ctrl: ctrl}
	mock.recorder = &MockFeedProcessorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedProcessorService) EXPECT() *MockFeedProcessorServiceMockRecorder {
	return m.recorder
}

// GetProcessingStats mocks base method.
func (m *MockFeedProcessorService) GetProcessingStats(ctx context.Context) (*service.ProcessingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessingStats", ctx)
	ret0, _ := ret[0].(*service.ProcessingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessingStats indicates an expected call of GetProcessingStats.
func (mr *MockFeedProcessorServiceMockRecorder) GetProcessingStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessingStats", reflect.TypeOf((*MockFeedProcessorService)(nil).GetProcessingStats), ctx)
}

// ProcessFeeds mocks base method.
func (m *MockFeedProcessorService) ProcessFeeds(ctx context.Context, batchSize int) (*service.ProcessingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessFeeds", ctx, batchSize)
	ret0, _ := ret[0].(*service.ProcessingResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessFeeds indicates an expected call of ProcessFeeds.
func (mr *MockFeedProcessorServiceMockRecorder) ProcessFeeds(ctx, batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFeeds", reflect.TypeOf((*MockFeedProcessorService)(nil).ProcessFeeds), ctx, batchSize)
}

// ResetPagination mocks base method.
func (m *MockFeedProcessorService) ResetPagination() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPagination")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPagination indicates an expected call of ResetPagination.
func (mr *MockFeedProcessorServiceMockRecorder) ResetPagination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPagination", reflect.TypeOf((*MockFeedProcessorService)(nil).ResetPagination))
}

// MockArticleSummarizerService is a mock of ArticleSummarizerService interface.
type MockArticleSummarizerService struct {
	ctrl     *gomock.Controller
	recorder *MockArticleSummarizerServiceMockRecorder
	isgomock struct{}
}

// MockArticleSummarizerServiceMockRecorder is the mock recorder for MockArticleSummarizerService.
type MockArticleSummarizerServiceMockRecorder struct {
	mock *MockArticleSummarizerService
}

// NewMockArticleSummarizerService creates a new mock instance.
func NewMockArticleSummarizerService(ctrl *gomock.Controller) *MockArticleSummarizerService {
	mock := &MockArticleSummarizerService{ctrl: ctrl}
	mock.recorder = &MockArticleSummarizerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleSummarizerService) EXPECT() *MockArticleSummarizerServiceMockRecorder {
	return m.recorder
}

// HasUnsummarizedArticles mocks base method.
func (m *MockArticleSummarizerService) HasUnsummarizedArticles(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUnsummarizedArticles", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUnsummarizedArticles indicates an expected call of HasUnsummarizedArticles.
func (mr *MockArticleSummarizerServiceMockRecorder) HasUnsummarizedArticles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUnsummarizedArticles", reflect.TypeOf((*MockArticleSummarizerService)(nil).HasUnsummarizedArticles), ctx)
}

// ResetPagination mocks base method.
func (m *MockArticleSummarizerService) ResetPagination() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPagination")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPagination indicates an expected call of ResetPagination.
func (mr *MockArticleSummarizerServiceMockRecorder) ResetPagination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPagination", reflect.TypeOf((*MockArticleSummarizerService)(nil).ResetPagination))
}

// SummarizeArticles mocks base method.
func (m *MockArticleSummarizerService) SummarizeArticles(ctx context.Context, batchSize int) (*service.SummarizationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummarizeArticles", ctx, batchSize)
	ret0, _ := ret[0].(*service.SummarizationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummarizeArticles indicates an expected call of SummarizeArticles.
func (mr *MockArticleSummarizerServiceMockRecorder) SummarizeArticles(ctx, batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummarizeArticles", reflect.TypeOf((*MockArticleSummarizerService)(nil).SummarizeArticles), ctx, batchSize)
}

// MockQualityCheckerService is a mock of QualityCheckerService interface.
type MockQualityCheckerService struct {
	ctrl     *gomock.Controller
	recorder *MockQualityCheckerServiceMockRecorder
	isgomock struct{}
}

// MockQualityCheckerServiceMockRecorder is the mock recorder for MockQualityCheckerService.
type MockQualityCheckerServiceMockRecorder struct {
	mock *MockQualityCheckerService
}

// NewMockQualityCheckerService creates a new mock instance.
func NewMockQualityCheckerService(ctrl *gomock.Controller) *MockQualityCheckerService {
	mock := &MockQualityCheckerService{ctrl: ctrl}
	mock.recorder = &MockQualityCheckerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQualityCheckerService) EXPECT() *MockQualityCheckerServiceMockRecorder {
	return m.recorder
}

// CheckQuality mocks base method.
func (m *MockQualityCheckerService) CheckQuality(ctx context.Context, batchSize int) (*service.QualityResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQuality", ctx, batchSize)
	ret0, _ := ret[0].(*service.QualityResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckQuality indicates an expected call of CheckQuality.
func (mr *MockQualityCheckerServiceMockRecorder) CheckQuality(ctx, batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQuality", reflect.TypeOf((*MockQualityCheckerService)(nil).CheckQuality), ctx, batchSize)
}

// ProcessLowQualityArticles mocks base method.
func (m *MockQualityCheckerService) ProcessLowQualityArticles(ctx context.Context, articles []models.ArticleWithSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLowQualityArticles", ctx, articles)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLowQualityArticles indicates an expected call of ProcessLowQualityArticles.
func (mr *MockQualityCheckerServiceMockRecorder) ProcessLowQualityArticles(ctx, articles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLowQualityArticles", reflect.TypeOf((*MockQualityCheckerService)(nil).ProcessLowQualityArticles), ctx, articles)
}

// ResetPagination mocks base method.
func (m *MockQualityCheckerService) ResetPagination() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPagination")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPagination indicates an expected call of ResetPagination.
func (mr *MockQualityCheckerServiceMockRecorder) ResetPagination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPagination", reflect.TypeOf((*MockQualityCheckerService)(nil).ResetPagination))
}

// MockArticleFetcherService is a mock of ArticleFetcherService interface.
type MockArticleFetcherService struct {
	ctrl     *gomock.Controller
	recorder *MockArticleFetcherServiceMockRecorder
	isgomock struct{}
}

// MockArticleFetcherServiceMockRecorder is the mock recorder for MockArticleFetcherService.
type MockArticleFetcherServiceMockRecorder struct {
	mock *MockArticleFetcherService
}

// NewMockArticleFetcherService creates a new mock instance.
func NewMockArticleFetcherService(ctrl *gomock.Controller) *MockArticleFetcherService {
	mock := &MockArticleFetcherService{ctrl: ctrl}
	mock.recorder = &MockArticleFetcherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleFetcherService) EXPECT() *MockArticleFetcherServiceMockRecorder {
	return m.recorder
}

// FetchArticle mocks base method.
func (m *MockArticleFetcherService) FetchArticle(ctx context.Context, url string) (*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchArticle", ctx, url)
	ret0, _ := ret[0].(*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchArticle indicates an expected call of FetchArticle.
func (mr *MockArticleFetcherServiceMockRecorder) FetchArticle(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchArticle", reflect.TypeOf((*MockArticleFetcherService)(nil).FetchArticle), ctx, url)
}

// ValidateURL mocks base method.
func (m *MockArticleFetcherService) ValidateURL(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateURL", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateURL indicates an expected call of ValidateURL.
func (mr *MockArticleFetcherServiceMockRecorder) ValidateURL(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateURL", reflect.TypeOf((*MockArticleFetcherService)(nil).ValidateURL), url)
}

// MockHealthCheckerService is a mock of HealthCheckerService interface.
type MockHealthCheckerService struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerServiceMockRecorder
	isgomock struct{}
}

// MockHealthCheckerServiceMockRecorder is the mock recorder for MockHealthCheckerService.
type MockHealthCheckerServiceMockRecorder struct {
	mock *MockHealthCheckerService
}

// NewMockHealthCheckerService creates a new mock instance.
func NewMockHealthCheckerService(ctrl *gomock.Controller) *MockHealthCheckerService {
	mock := &MockHealthCheckerService{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckerService) EXPECT() *MockHealthCheckerServiceMockRecorder {
	return m.recorder
}

// CheckNewsCreatorHealth mocks base method.
func (m *MockHealthCheckerService) CheckNewsCreatorHealth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNewsCreatorHealth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNewsCreatorHealth indicates an expected call of CheckNewsCreatorHealth.
func (mr *MockHealthCheckerServiceMockRecorder) CheckNewsCreatorHealth(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNewsCreatorHealth", reflect.TypeOf((*MockHealthCheckerService)(nil).CheckNewsCreatorHealth), ctx)
}

// WaitForHealthy mocks base method.
func (m *MockHealthCheckerService) WaitForHealthy(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForHealthy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForHealthy indicates an expected call of WaitForHealthy.
func (mr *MockHealthCheckerServiceMockRecorder) WaitForHealthy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForHealthy", reflect.TypeOf((*MockHealthCheckerService)(nil).WaitForHealthy), ctx)
}
