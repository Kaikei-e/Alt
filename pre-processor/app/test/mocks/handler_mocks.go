// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../test/mocks/handler_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	handler "pre-processor/handler"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJobHandler is a mock of JobHandler interface.
type MockJobHandler struct {
	ctrl     *gomock.Controller
	recorder *MockJobHandlerMockRecorder
	isgomock struct{}
}

// MockJobHandlerMockRecorder is the mock recorder for MockJobHandler.
type MockJobHandlerMockRecorder struct {
	mock *MockJobHandler
}

// NewMockJobHandler creates a new mock instance.
func NewMockJobHandler(ctrl *gomock.Controller) *MockJobHandler {
	mock := &MockJobHandler{ctrl: ctrl}
	mock.recorder = &MockJobHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobHandler) EXPECT() *MockJobHandlerMockRecorder {
	return m.recorder
}

// StartFeedProcessingJob mocks base method.
func (m *MockJobHandler) StartFeedProcessingJob(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFeedProcessingJob", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartFeedProcessingJob indicates an expected call of StartFeedProcessingJob.
func (mr *MockJobHandlerMockRecorder) StartFeedProcessingJob(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFeedProcessingJob", reflect.TypeOf((*MockJobHandler)(nil).StartFeedProcessingJob), ctx)
}

// StartQualityCheckJob mocks base method.
func (m *MockJobHandler) StartQualityCheckJob(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartQualityCheckJob", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartQualityCheckJob indicates an expected call of StartQualityCheckJob.
func (mr *MockJobHandlerMockRecorder) StartQualityCheckJob(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQualityCheckJob", reflect.TypeOf((*MockJobHandler)(nil).StartQualityCheckJob), ctx)
}

// StartSummarizationJob mocks base method.
func (m *MockJobHandler) StartSummarizationJob(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSummarizationJob", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSummarizationJob indicates an expected call of StartSummarizationJob.
func (mr *MockJobHandlerMockRecorder) StartSummarizationJob(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSummarizationJob", reflect.TypeOf((*MockJobHandler)(nil).StartSummarizationJob), ctx)
}

// Stop mocks base method.
func (m *MockJobHandler) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockJobHandlerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockJobHandler)(nil).Stop))
}

// MockHealthHandler is a mock of HealthHandler interface.
type MockHealthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHealthHandlerMockRecorder
	isgomock struct{}
}

// MockHealthHandlerMockRecorder is the mock recorder for MockHealthHandler.
type MockHealthHandlerMockRecorder struct {
	mock *MockHealthHandler
}

// NewMockHealthHandler creates a new mock instance.
func NewMockHealthHandler(ctrl *gomock.Controller) *MockHealthHandler {
	mock := &MockHealthHandler{ctrl: ctrl}
	mock.recorder = &MockHealthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthHandler) EXPECT() *MockHealthHandlerMockRecorder {
	return m.recorder
}

// CheckDependencies mocks base method.
func (m *MockHealthHandler) CheckDependencies(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDependencies", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDependencies indicates an expected call of CheckDependencies.
func (mr *MockHealthHandlerMockRecorder) CheckDependencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDependencies", reflect.TypeOf((*MockHealthHandler)(nil).CheckDependencies), ctx)
}

// CheckHealth mocks base method.
func (m *MockHealthHandler) CheckHealth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockHealthHandlerMockRecorder) CheckHealth(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockHealthHandler)(nil).CheckHealth), ctx)
}

// MockJobScheduler is a mock of JobScheduler interface.
type MockJobScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockJobSchedulerMockRecorder
	isgomock struct{}
}

// MockJobSchedulerMockRecorder is the mock recorder for MockJobScheduler.
type MockJobSchedulerMockRecorder struct {
	mock *MockJobScheduler
}

// NewMockJobScheduler creates a new mock instance.
func NewMockJobScheduler(ctrl *gomock.Controller) *MockJobScheduler {
	mock := &MockJobScheduler{ctrl: ctrl}
	mock.recorder = &MockJobSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobScheduler) EXPECT() *MockJobSchedulerMockRecorder {
	return m.recorder
}

// GetJobStatus mocks base method.
func (m *MockJobScheduler) GetJobStatus(jobName string) (handler.JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobStatus", jobName)
	ret0, _ := ret[0].(handler.JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobStatus indicates an expected call of GetJobStatus.
func (mr *MockJobSchedulerMockRecorder) GetJobStatus(jobName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStatus", reflect.TypeOf((*MockJobScheduler)(nil).GetJobStatus), jobName)
}

// Schedule mocks base method.
func (m *MockJobScheduler) Schedule(ctx context.Context, jobName, interval string, jobFunc func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", ctx, jobName, interval, jobFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockJobSchedulerMockRecorder) Schedule(ctx, jobName, interval, jobFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockJobScheduler)(nil).Schedule), ctx, jobName, interval, jobFunc)
}

// Stop mocks base method.
func (m *MockJobScheduler) Stop(jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockJobSchedulerMockRecorder) Stop(jobName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockJobScheduler)(nil).Stop), jobName)
}

// StopAll mocks base method.
func (m *MockJobScheduler) StopAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAll indicates an expected call of StopAll.
func (mr *MockJobSchedulerMockRecorder) StopAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAll", reflect.TypeOf((*MockJobScheduler)(nil).StopAll))
}
