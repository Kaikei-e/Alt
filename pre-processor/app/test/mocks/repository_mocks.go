// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../test/mocks/repository_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	url "net/url"
	models "pre-processor/models"
	repository "pre-processor/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleRepository is a mock of ArticleRepository interface.
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
	isgomock struct{}
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository.
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance.
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// CheckExists mocks base method.
func (m *MockArticleRepository) CheckExists(ctx context.Context, urls []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExists", ctx, urls)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExists indicates an expected call of CheckExists.
func (mr *MockArticleRepositoryMockRecorder) CheckExists(ctx, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExists", reflect.TypeOf((*MockArticleRepository)(nil).CheckExists), ctx, urls)
}

// Create mocks base method.
func (m *MockArticleRepository) Create(ctx context.Context, article *models.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockArticleRepositoryMockRecorder) Create(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleRepository)(nil).Create), ctx, article)
}

// FindForSummarization mocks base method.
func (m *MockArticleRepository) FindForSummarization(ctx context.Context, cursor *repository.Cursor, limit int) ([]*models.Article, *repository.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindForSummarization", ctx, cursor, limit)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(*repository.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindForSummarization indicates an expected call of FindForSummarization.
func (mr *MockArticleRepositoryMockRecorder) FindForSummarization(ctx, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindForSummarization", reflect.TypeOf((*MockArticleRepository)(nil).FindForSummarization), ctx, cursor, limit)
}

// HasUnsummarizedArticles mocks base method.
func (m *MockArticleRepository) HasUnsummarizedArticles(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUnsummarizedArticles", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUnsummarizedArticles indicates an expected call of HasUnsummarizedArticles.
func (mr *MockArticleRepositoryMockRecorder) HasUnsummarizedArticles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUnsummarizedArticles", reflect.TypeOf((*MockArticleRepository)(nil).HasUnsummarizedArticles), ctx)
}

// MockFeedRepository is a mock of FeedRepository interface.
type MockFeedRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeedRepositoryMockRecorder
	isgomock struct{}
}

// MockFeedRepositoryMockRecorder is the mock recorder for MockFeedRepository.
type MockFeedRepositoryMockRecorder struct {
	mock *MockFeedRepository
}

// NewMockFeedRepository creates a new mock instance.
func NewMockFeedRepository(ctrl *gomock.Controller) *MockFeedRepository {
	mock := &MockFeedRepository{ctrl: ctrl}
	mock.recorder = &MockFeedRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedRepository) EXPECT() *MockFeedRepositoryMockRecorder {
	return m.recorder
}

// GetProcessingStats mocks base method.
func (m *MockFeedRepository) GetProcessingStats(ctx context.Context) (*repository.ProcessingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessingStats", ctx)
	ret0, _ := ret[0].(*repository.ProcessingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessingStats indicates an expected call of GetProcessingStats.
func (mr *MockFeedRepositoryMockRecorder) GetProcessingStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessingStats", reflect.TypeOf((*MockFeedRepository)(nil).GetProcessingStats), ctx)
}

// GetUnprocessedFeeds mocks base method.
func (m *MockFeedRepository) GetUnprocessedFeeds(ctx context.Context, cursor *repository.Cursor, limit int) ([]*url.URL, *repository.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedFeeds", ctx, cursor, limit)
	ret0, _ := ret[0].([]*url.URL)
	ret1, _ := ret[1].(*repository.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUnprocessedFeeds indicates an expected call of GetUnprocessedFeeds.
func (mr *MockFeedRepositoryMockRecorder) GetUnprocessedFeeds(ctx, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedFeeds", reflect.TypeOf((*MockFeedRepository)(nil).GetUnprocessedFeeds), ctx, cursor, limit)
}

// MockSummaryRepository is a mock of SummaryRepository interface.
type MockSummaryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSummaryRepositoryMockRecorder
	isgomock struct{}
}

// MockSummaryRepositoryMockRecorder is the mock recorder for MockSummaryRepository.
type MockSummaryRepositoryMockRecorder struct {
	mock *MockSummaryRepository
}

// NewMockSummaryRepository creates a new mock instance.
func NewMockSummaryRepository(ctrl *gomock.Controller) *MockSummaryRepository {
	mock := &MockSummaryRepository{ctrl: ctrl}
	mock.recorder = &MockSummaryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummaryRepository) EXPECT() *MockSummaryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSummaryRepository) Create(ctx context.Context, summary *models.ArticleSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, summary)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSummaryRepositoryMockRecorder) Create(ctx, summary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSummaryRepository)(nil).Create), ctx, summary)
}

// Delete mocks base method.
func (m *MockSummaryRepository) Delete(ctx context.Context, summaryID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, summaryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSummaryRepositoryMockRecorder) Delete(ctx, summaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSummaryRepository)(nil).Delete), ctx, summaryID)
}

// Exists mocks base method.
func (m *MockSummaryRepository) Exists(ctx context.Context, summaryID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, summaryID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSummaryRepositoryMockRecorder) Exists(ctx, summaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSummaryRepository)(nil).Exists), ctx, summaryID)
}

// FindArticlesWithSummaries mocks base method.
func (m *MockSummaryRepository) FindArticlesWithSummaries(ctx context.Context, cursor *repository.Cursor, limit int) ([]*models.ArticleWithSummary, *repository.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticlesWithSummaries", ctx, cursor, limit)
	ret0, _ := ret[0].([]*models.ArticleWithSummary)
	ret1, _ := ret[1].(*repository.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindArticlesWithSummaries indicates an expected call of FindArticlesWithSummaries.
func (mr *MockSummaryRepositoryMockRecorder) FindArticlesWithSummaries(ctx, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticlesWithSummaries", reflect.TypeOf((*MockSummaryRepository)(nil).FindArticlesWithSummaries), ctx, cursor, limit)
}

// MockExternalAPIRepository is a mock of ExternalAPIRepository interface.
type MockExternalAPIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExternalAPIRepositoryMockRecorder
	isgomock struct{}
}

// MockExternalAPIRepositoryMockRecorder is the mock recorder for MockExternalAPIRepository.
type MockExternalAPIRepositoryMockRecorder struct {
	mock *MockExternalAPIRepository
}

// NewMockExternalAPIRepository creates a new mock instance.
func NewMockExternalAPIRepository(ctrl *gomock.Controller) *MockExternalAPIRepository {
	mock := &MockExternalAPIRepository{ctrl: ctrl}
	mock.recorder = &MockExternalAPIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalAPIRepository) EXPECT() *MockExternalAPIRepositoryMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockExternalAPIRepository) CheckHealth(ctx context.Context, serviceURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx, serviceURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockExternalAPIRepositoryMockRecorder) CheckHealth(ctx, serviceURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockExternalAPIRepository)(nil).CheckHealth), ctx, serviceURL)
}

// SummarizeArticle mocks base method.
func (m *MockExternalAPIRepository) SummarizeArticle(ctx context.Context, article *models.Article) (*models.SummarizedContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummarizeArticle", ctx, article)
	ret0, _ := ret[0].(*models.SummarizedContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummarizeArticle indicates an expected call of SummarizeArticle.
func (mr *MockExternalAPIRepositoryMockRecorder) SummarizeArticle(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummarizeArticle", reflect.TypeOf((*MockExternalAPIRepository)(nil).SummarizeArticle), ctx, article)
}
