# バランス版Dockerfile - 実用性重視 (400-600MB目標)
# 軽量モデルのみ内蔵、重いモデルは外部ボリューム

FROM python:3.13-slim AS builder

# 必要最小限のビルド依存関係
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install uv
RUN pip install --no-cache-dir uv

WORKDIR /app

# 軽量依存関係をコピー（MLパッケージ除外）
COPY app/pyproject.toml ./pyproject.toml
COPY app/uv.lock ./

# Pythonパッケージをインストール
RUN uv sync --frozen --no-dev

# アプリケーションコードをコピー
COPY app/ .

# Pythonバイトコードのコンパイル
RUN uv run python -m compileall -f .

# 軽量依存関係をコピー（MLパッケージ除外）
COPY app/pyproject.toml ./pyproject.toml
COPY app/uv.lock ./

# 最終ランタイムステージ
FROM python:3.13-slim AS runtime

# ランタイムに必要な最小限のパッケージのみ
# 注意: MecABシステムパッケージは除外（fugashi[unidic-lite]を使用）
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# 非rootユーザー作成
RUN useradd --create-home --shell /bin/bash --uid 1000 app

# 外部モデルストレージ用ディレクトリ作成
RUN mkdir -p /models /cache && chown -R app:app /models /cache

# 非rootユーザーに切り替え
USER app
WORKDIR /home/app

# ビルドステージから仮想環境をコピー
COPY --from=builder --chown=app:app /app/.venv /home/app/.venv

# No built-in models - external models required

# アプリケーションコードをコピー
COPY --chown=app:app app/ .

# 環境変数設定（内蔵モデルと外部モデルの両方に対応）
ENV PATH="/home/app/.venv/bin:$PATH" \
    PYTHONPATH="/home/app" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    NLTK_DATA="/models/nltk_data:/home/app/nltk_data_builtin" \
    SENTENCE_TRANSFORMERS_HOME="/models/sentence_transformers" \
    SENTENCE_TRANSFORMERS_BUILTIN="/home/app/sentence_transformers_builtin" \
    TRANSFORMERS_CACHE="/cache/transformers" \
    HF_HOME="/cache/huggingface" \
    MODELS_DIR="/models"

# スマートスタートアップスクリプト（内蔵モデルと外部モデルの自動切り替え）
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Starting balanced tag-generator..."\n\
\n\
# 外部モデルストレージの確認\n\
if [ -d "$MODELS_DIR" ] && [ -f "$MODELS_DIR/.models_ready" ]; then\n\
    echo "Using external model storage: $MODELS_DIR"\n\
    # 外部モデルを優先使用\n\
    export NLTK_DATA="$MODELS_DIR/nltk_data:/home/app/nltk_data_builtin"\n\
    export SENTENCE_TRANSFORMERS_HOME="$MODELS_DIR/sentence_transformers"\n\
else\n\
    echo "Using built-in lightweight models"\n\
    # 内蔵モデルにフォールバック\n\
    export NLTK_DATA="/home/app/nltk_data_builtin"\n\
    export SENTENCE_TRANSFORMERS_HOME="/home/app/sentence_transformers_builtin"\n\
    echo "WARNING: Using lightweight models. For full features, mount external models."\n\
fi\n\
\n\
# アプリケーション開始\n\
echo "Starting application with model configuration..."\n\
exec python main.py\n' > /home/app/start-balanced.sh && chmod +x /home/app/start-balanced.sh

# バランス版ヘルスチェック
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD python -c "import sys; import fugashi; sys.exit(0)" || exit 1

# 使用方法のコメント
# 基本使用（内蔵軽量モデル）：
# docker run tag-generator:balanced
#
# 外部モデルストレージ使用（推奨）：
# docker run -v /host/models:/models -v /host/cache:/cache tag-generator:balanced

CMD ["./start-balanced.sh"]