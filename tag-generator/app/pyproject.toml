[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests", "."]
addopts = [
    "--cov=.",
    "--cov-report=xml",
    "--cov-report=term-missing",
    "--junit-xml=tests/results.xml",
    "-v"
]

[project]
name = "tag-generator"
version = "0.1.0"
description = "Ultra-minimal tag generator (external models required)"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    # Japanese Text Processing (self-contained)
    "fugashi[unidic-lite]>=1.5.1",  # includes unidic-lite, no external MecAB needed

    # Language Processing (minimal)
    "nltk>=3.9.1",
    "langdetect>=1.0.9",

    # Database
    "psycopg2-binary>=2.9.0",

    # Logging and Data Validation
    "structlog>=25.4.0",
    "pydantic>=2.10.0",

    # Security
    "bleach>=6.1.0",

    # Authentication and API
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "aiohttp>=3.9.0",
    "PyJWT>=2.8.0",
    "python-multipart>=0.0.6",

    # NOTE: Heavy ML packages removed for ultra-minimal build
    # keybert, sentence-transformers, transformers must be installed in external models
    # or use runtime installation with lazy loading
]

[dependency-groups]
dev = [
    # Testing Framework
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.1",
    "pytest-timeout>=2.4.0",

    # Code Quality Tools
    "ruff>=0.12.1",
    "bandit>=1.8.0",

    # Type Checking
    "pyright>=1.1.390",
    "types-psycopg2>=2.9.21.20250516",

    # Additional test dependencies for CI
    "langdetect>=1.0.9"
]

# ML dependencies for testing (not included in production builds)
test-ml = [
    "sentence-transformers>=3.3.0",
    "keybert>=0.8.5",
    "transformers>=4.40.0",
    "torch>=2.1.0",
    "scikit-learn>=1.5.2"
]

# NOTE: ML dependencies removed from core dependencies to prevent inclusion in lock file
# If needed, install separately: pip install keybert sentence-transformers transformers

[tool.setuptools.packages]
find = { include = ["tag_generator", "tag_generator.*", "article_fetcher", "article_fetcher.*", "tag_extractor", "tag_extractor.*", "tag_inserter", "tag_inserter.*"] }

# Ultra-minimal optimization notes:
# - Removed ALL heavy ML packages from core dependencies
# - Created separate 'ml' group for ML dependencies
# - Reduced to absolute minimum for basic functionality
# - ML models must be provided externally or installed at runtime

[tool.ruff]
target-version = "py313"
line-length = 120
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info"
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit (security)
]
ignore = [
    "S101",  # Use of assert detected (OK in tests)
    "S608",  # Possible SQL injection (handled by ORM)
    "E501",  # Line too long (handled by formatter when possible)
    "S110",  # try-except-pass (sometimes needed in cleanup code)
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["S101", "S603", "S110"]
"tests/**" = ["S101", "S603", "S110"]
"auth_service.py" = ["S104"]  # Allow binding to all interfaces for development server

[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = ["B101"]  # Skip assert_used test