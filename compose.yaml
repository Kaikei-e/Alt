services:
  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      alt-frontend:
        condition: service_healthy
      alt-backend:
        condition: service_healthy
    networks:
      - alt-network
    tty: true

  alt-frontend:
    build:
      context: ./alt-frontend
      dockerfile: Dockerfile.frontend
      x-bake: &buildkit
        platforms: ["linux/amd64"]
      args:
        - NEXT_PUBLIC_API_BASE_URL=/api
        - API_URL=http://alt-backend:9000
    environment:
      - NEXT_PUBLIC_API_BASE_URL=/api
      - API_URL=http://alt-backend:9000
      - NODE_ENV=production
      - PORT=3000
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - alt-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    tty: true

  alt-backend:
    build:
      context: ./alt-backend
      dockerfile: Dockerfile.backend
    restart: always
    ports:
      - "9000:9000"
    networks:
      - alt-network
    volumes:
      - .env:/app/.env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9000/v1/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    tty: true

  news-creator:
    build:
      context: ./news-creator
      dockerfile: Dockerfile.creator
    image: qwen3-8b-awq:latest
    runtime: nvidia
    environment:
      - HF_TOKEN=${HF_TOKEN}
      - MODEL_ID=Qwen/Qwen2.5-7B-Instruct
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: always
    ports:
      - "9100:9100"
    networks:
      - alt-network
    tty: true

  pre-processor:
    build:
      context: ./pre-processor
      dockerfile: Dockerfile.preprocess
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - PRE_PROCESSOR_DB_USER=${PRE_PROCESSOR_DB_USER}
      - PRE_PROCESSOR_DB_PASSWORD=${PRE_PROCESSOR_DB_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    restart: always
    ports:
      - "9200:9200"
    networks:
      - alt-network
    tty: true

  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      PRE_PROCESSOR_DB_USER: ${PRE_PROCESSOR_DB_USER}
      PRE_PROCESSOR_DB_PASSWORD: ${PRE_PROCESSOR_DB_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:rw
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - alt-network
    tty: true

  migrate:
    build:
      context: ./migrate
      dockerfile: Dockerfile.migrate
    container_name: db_migrator
    volumes:
      - ./db/migrations:/migrations
    environment:
      DB_URL: "pgx5://${POSTGRES_USER:-devuser}:${POSTGRES_PASSWORD:-devpassword}@db:5432/${POSTGRES_DB:-devdb}?sslmode=disable&search_path=public"
      MIGRATE_MAX_RETRIES: "12"
      MIGRATE_RETRY_INTERVAL: "5"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - alt-network
networks:
  alt-network:

volumes:
  db_data: