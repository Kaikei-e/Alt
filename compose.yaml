services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./alt-frontend/out:/usr/share/nginx/html:ro
    depends_on:
      - alt-frontend
    networks:
      - alt-network

  alt-frontend:
    build:
      context: ./alt-frontend
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:9000
      - API_URL=http://alt-backend:9000
    depends_on:
      - alt-backend
    networks:
      - alt-network

  alt-backend:
    build:
      context: ./alt-backend
      dockerfile: Dockerfile.backend
    ports:
      - "9000:9000"
    networks:
      - alt-network
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/v1/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  db:
      image: postgres:16-alpine
      restart: always
      environment:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      volumes:
        - db_data:/var/lib/postgresql/data
        - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      ports:
        - "5432:5432"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 5s
        timeout: 5s
        retries: 5
        start_period: 10s
      networks:
        - alt-network
        
networks:
  alt-network:

volumes:
  db_data: